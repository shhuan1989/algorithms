{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=71&rd=2009",
	"statement":"<pre>This problem was taken from the Collegiate Challenge Finals.\n\nClass name: Area\nMethod name: totalEnclosed\nParameters: int, int, String \nReturns: int\n\nImplement a class Area, which contains a method totalEnclosed.  totalEnclosed\nreturns the sum of the union of areas enclosed by a path on the coordinate\nplane.  The path (call it the &quot;perimeter&quot;) is composed of horizontal and\nvertical lines connecting ordered integer pairs. The perimeter is defined by a\nstarting point (x,y) (x and y are integers) and a series of commands.  The\ncommands are U, D, R, and L.  U moves 1 unit up.  D moves 1 unit down.  R moves\n1 unit right.  L moves 1 unit left.  The method takes as parameters two ints\nthat are the starting (x,y) coordinates and a String that is the string of 1\ncharacter commands.  The method starts at the starting point and successively\nprocesses the commands in the String from left to right and returns the area of\nthe union of the shapes enclosed by the resulting perimeter.  \n\n*Enclosed areas must lie within the domain -10 &lt;= x &lt;= 10 and -10 &lt;= y &lt;= 10.\nIf any point on the perimeter is beyond this domain, the method concludes there\nis no enclosed area and returns 0.\n*A point is in an enclosed area if and only if every continuous path from the\npoint to outside the domain (-10 &lt;= x &lt;= 10 and -10 &lt;= y &lt;= 10) crosses the\nperimeter.\n\nAnother way to look at this is: return the number of unit squares in the domain\nthat are enclosed by the perimeter.\n\nThe method signature is (be sure your method is public):\nint totalEnclosed(int startX, int startY, String commands)\n\nTopCoder will ensure the following:\n*startX must satisfy -10 &lt;= startX &lt;= 10.\n*startY must satisfy -10 &lt;= startY &lt;= 10.\n*commands contains only the characters U, D, L, and R and has length less than\n1000 characters.\n\nNote:\n-The solution must run in under 6 seconds on TopCoder's tester.\n\nExamples:\n-If the starting point is (0,0) and the commands are RRUULLDDDDL, the enclosed\narea is a square from (0,0) to (2,2). The area of this square is 4, and the\nmethod should return 4.\n\n-If the starting point is (3,3) and the commands are LDRULLLDDRUU, there are\ntwo enclosed areas, a square from (2,2) to (3,3) and a rectangle from (0,1) to\n(1,3). The areas are 1 and 2, and the method should return 1+2=3.\n\n-If the starting point is (0,0) and the commands are LLUURRDDLURD, the enclosed\narea is just the square from (-2,0) to (0,2) and the method should return the\nsquare's area, 4.  The area from (-1,0) to (0,1) is also enclosed by another\npath, but is not counted twice because the method must return the area of the\nunion.\n\n-If the starting point is (10,10) and the commands are URDL, the path goes out\nof the domain and the method should return 0.\n\n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Area",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"totalEnclosed",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, String",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int totalEnclosed(int param0, int param1, String param2)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}