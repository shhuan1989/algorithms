{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7512&rd=10665",
	"statement":"<p> Bob's father bought him a toy map of islands and seas. The map is a two-dimensional grid where each cell is either 'x' or '.'. A sea is defined as a maximal connected group of '.' cells, where two '.' cells are connected if they are vertically or horizontally adjacent. An island is defined as a maximal connected group of 'x' cells, where two 'x' cells are connected if they are vertically, horizontally, or diagonally adjacent. An island has a level of 0 if it contains no other islands. An island has a level of K+1 if it contains one or more islands and the highest level of a contained island is K. An island A contains island B if A and B are different and, if you start sailing from any point of island B, you won't be able to sail out of island A (you can sail only horizontally and vertically, but not diagonally). </p> <p> For example, the given map below has 5 islands with level 0 (islands 0 - 4 on the right picture) and one island with level 1 (island 5). Please note that starting at island 3, you can not sail outside island 5 (you can not sail diagonally), but its possible get out of island 1 when starting at island 4. </p> <pre>\nxxx.x...xxxxx        000.0...11111\nxxxx....x...x        0000....1...1\n........x.x.x        ........1.4.1\n..xxxxx.x...x        ..55555.1...1\n..x...x.xxx.x        ..5...5.111.1\n..x.x.x...x..        ..5.3.5...1..\n..x...x...xxx        ..5...5...111\n...xxxxxx....        ...555555....\nx............        2............\n</pre> <p> Given a String[] <b>seaMap</b>, return a int[], where the k-th element is the number of islands of level k. The int[] must contain exactly (m + 1) elements, where m is the highest level of an island in the map. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"LandAndSea",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"howManyIslands",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] howManyIslands(String[] seaMap)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {1 }",
			"id":0,
			"input":"{\"x\"}",
			"note":"",
			"order":1
		},
		{
			"expect":"Returns: {1, 1 }",
			"id":0,
			"input":"{ \"xxxxx\", \"x...x\", \"x.x.x\", \"x...x\", \"xxxxx\" }",
			"note":"",
			"order":2
		},
		{
			"expect":"Returns: {2, 1 }",
			"id":0,
			"input":"{ \"xxxxx\", \"x...x\", \"x.x.x\", \"x...x\", \"xxxxx\", \"xxxxx\", \"x...x\", \"x.x.x\", \"x...x\", \"xxxxx\" }",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: { }",
			"id":0,
			"input":"{ \"..\", \"..\" }",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: {1, 1 }",
			"id":0,
			"input":"{ \"............\", \".......xxxx.\", \"..xxx.x...x.\", \"..x..x..x.x.\", \"..x.x.x...x.\", \"..xx...xxx..\" }",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"seaMap will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of seaMap will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of seaMap will contain the same number of characters."
		},
		{
			"order":4,
			"val":"Each element of seaMap will contain only '.' and lowercase 'x' characters."
		}
	]
}