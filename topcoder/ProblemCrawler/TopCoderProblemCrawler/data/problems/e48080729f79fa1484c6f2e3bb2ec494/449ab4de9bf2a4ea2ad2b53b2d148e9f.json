{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8180&rd=12019",
	"statement":"<p>The function f: R -&gt; R is called <i>cool</i> if there are integer numbers a<sub>0</sub> &lt;= a<sub>1</sub> &lt;= ... &lt;= a<sub>k-1</sub> (k &gt;= 1) such that f(x) = |x - a<sub>0</sub>| + |x - a<sub>1</sub>| + ... + |x - a<sub>k-1</sub>| for every real value of x.</p> <p>You will be given a int[] <b>values</b>, containing n elements. You should find a cool function f such that f(i) = <b>values</b>[i] for every i, where 0 &lt;= i &lt; n. Return a int[], containing the values a<sub>0</sub>, a<sub>1</sub>, ..., a<sub>k-1</sub> for this function. If there are many possible answers, choose the one with the smallest number of elements. If tie still exists, return the lexicographically smallest int[]. Constraints will guarantee that <b>values</b> corresponds to at least one cool function.</p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CoolFunction",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"restore",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] restore(int[] values)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {0 }",
			"id":0,
			"input":"{0}",
			"note":"|x| is acceptable here.",
			"order":1
		},
		{
			"expect":"Returns: {-50 }",
			"id":0,
			"input":"{50}",
			"note":"Here there are two variants with k=1: |x-50| and |x+50|. The second one is lexicographically smaller.",
			"order":2
		},
		{
			"expect":"Returns: {-2, 0 }",
			"id":0,
			"input":"{2, 4}",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: {-2, 1 }",
			"id":0,
			"input":"{3, 3}",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: {1, 1, 1, 2 }",
			"id":0,
			"input":"{5, 1}",
			"note":"The return is not necessarily  increasing.",
			"order":5
		},
		{
			"expect":"Returns: {1, 1, 1, 1, 2, 4 }",
			"id":0,
			"input":"{10, 4, 6}",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"values will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of values will be between 0 and 50, inclusive."
		},
		{
			"order":3,
			"val":"values will correspond to at least one cool function."
		}
	]
}