{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11223&rd=14427",
	"statement":"Fox Ciel likes to jump around in large fields. She is currently at point (0, 0) of a field, and she wants to land at point (<b>Tx</b>, <b>Ty</b>) using exactly <b>R</b> jumps. <br /><br /><br /><br /> In one jump, she can move 0, 1, 2, ..., <b>Mx</b> units in the positive x direction and 0, 1, 2, ..., <b>My</b> units in the positive y direction. All jumps must have a non-zero distance. In addition, there are some jumps which she is not good at. These jumps are described in the int[] <b>bad</b>. If <b>bad</b> contains the number b, it means she cannot make a diagonal jump where she moves exactly b units in the positive x direction and b units in the positive y direction. Each element of <b>bad</b> will be a multiple of 10. <br /><br /><br /><br /> For instance, if <b>Mx</b>=12, <b>My</b>=11, <b>bad</b>={10} and she is at point (0, 0), then the only points she can jump to are the green ones shown below: <br /><br /><br /><br /> <img src=\"http://www.topcoder.com/contest/problem/FoxJumping/FoxJumping_Fig1.gif\" /> <br /><br /><br /><br /> Return the number of ways she can start at (0, 0), jump exactly <b>R</b> times, and land at (<b>Tx</b>, <b>Ty</b>), modulo 10,007. Two ways are considered to be different if there is an index i, 0 &lt;= i &lt; <b>R</b>, such that Ciel lands at different points after the i-th (0-based) jump in these ways.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"FoxJumping",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getCount",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int, int, int, int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getCount(int Tx, int Ty, int Mx, int My, int R, int[] bad)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"2",
			"note":"There is only 1 way to reach the destination.  ",
			"order":1
		},
		{
			"expect":"2",
			"id":0,
			"input":"2",
			"note":"The following are the 6 ways she can reach her destination. Note that when she jumps, she must move a distance of at least one unit.  ",
			"order":2
		},
		{
			"expect":"10",
			"id":0,
			"input":"10",
			"note":"",
			"order":3
		},
		{
			"expect":"10",
			"id":0,
			"input":"10",
			"note":"",
			"order":4
		},
		{
			"expect":"11",
			"id":0,
			"input":"11",
			"note":"",
			"order":5
		},
		{
			"expect":"456",
			"id":0,
			"input":"123",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"Tx and Ty will each be between 1 and 800, inclusive."
		},
		{
			"order":2,
			"val":"Mx and My will each be between 1 and 800, inclusive."
		},
		{
			"order":3,
			"val":"R will be between 1 and 1,600, inclusive."
		},
		{
			"order":4,
			"val":"bad will contain between 0 and 50 elements, inclusive."
		},
		{
			"order":5,
			"val":"Each element of bad will be between 1 and min(Mx, My), inclusive, and be a multiple of 10."
		},
		{
			"order":6,
			"val":"All elements of bad will be distinct."
		}
	]
}