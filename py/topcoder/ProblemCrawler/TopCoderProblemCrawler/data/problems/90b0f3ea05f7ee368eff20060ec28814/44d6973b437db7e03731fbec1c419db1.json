{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8702&rd=13697",
	"statement":"<p>A small company has recently been growing quickly and has decided that it needs to restructure its organisation. In the past, there were no permanent managers and project teams were formed on an ad-hoc basis depending on which employees were available at the time. This has lead to a situation where many of the employees have managed each other at some time in the past. Now that the company is bigger, it wants to impose a more formal hierarchical structure. The company is to be divided into divisions, each of which will be structured as a tree. One employee in each division will be assigned as the division leader and can be the permanent manager of some other employees. These employees can in turn manage futher employees, and so on. Each employee will belong to exactly one division and each employee in a division other than the division leader will have a permanent manager in the division.</p><br /><br /> <p>The company knows that such a restructuring may lead to ill-feeling amongst the employees, particularly if an employee ends up being managed permanently by another employee that he or she has managed in the past. It has therefore come up with the following model to try to minimise this ill-feeling. If an employee has managed a person in the past, then he or she feels <i>superior</i> to that person. This is also transitive, so if A has managed B, and B has managed C, then A feels superior to both B and C, even if A has not directly managed C. More formally, an employee <tt>X<sub>0</sub></tt> feels superior to another employee <tt>X<sub>k</sub></tt>, if and only if there exists a sequence of employees <tt>X<sub>0</sub></tt>, <tt>X<sub>1</sub></tt>, <tt>X<sub>2</sub></tt> ... <tt>X<sub>k</sub></tt>, where employeee <tt>X<sub>i</sub></tt> has managed employee <tt>X<sub>i+1</sub></tt> for each value of i &lt; k. This can clearly lead to cases where each one of a pair of employees feels superior to the other and such a pair is termed <i>mutually superior</i>. These pairs of employees tend to spend a lot of time arguing about who is superior, so the company wishes to ensure they are separated in the new company structure. It has put the following restrictions on the structure of the new divisions.</p> \n <ul>\n  <li>The new permanent manager of an employee must have managed that employee in the past.</li> \n  <li>No employee can feel superior to his or her direct permanent manager.</li> \n  <li>No pair of mutually superior employees can have the same direct permanent manager.</li> \n </ul> <p>The company wishes to end up with as few divisions as possible. You are given a String[] <b>hasManaged</b>, which details which employees have managed others in the past. Character j of element i will be 'Y' if employee i has managed employee j in the past and 'N' otherwise. Return the minimum number of divisions that the company must create in order to satisfy the above restrictions.</p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CompanyRestructuring",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"fewestDivisions",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int fewestDivisions(String[] hasManaged)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"NNNN\",\"NNYN\",\"NNNN\",\"YYYN\"}",
			"note":"There are no mutually superior employees here and only a single division is needed. There are 2 possible structures:  or ",
			"order":1
		},
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"NNYN\",\"NNYN\",\"YNNN\",\"YYYN\"}",
			"note":"This case is similar to case 0), except now employees 0 and 2 are mutually superior, so cannot have the same manager. The second structure shown above is therefore invalid, but the first one is still possible.",
			"order":2
		},
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{\"NYNNN\",\"NNYNN\",\"NNNYN\",\"NNNNY\",\"YNNNN\"}",
			"note":"Everybody feels superior to everybody else, so there is no way that any of them can work in the same division.",
			"order":3
		},
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"NYNYYYNN\" ,\"NNNNYYNN\" ,\"NYNNYYNN\" ,\"NNYNYYNN\" ,\"NNNNNNNN\" ,\"NYYNYNNN\" ,\"YYNYYYNN\" ,\"YYNYYYYN\"}",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: 4",
			"id":0,
			"input":"{\"NYNYNNYYNYNNNYYNYNYY\" ,\"YNNNNNYYNNNYYNYNYNYY\" ,\"NNNNNNYYNNNYYNYNNNNY\" ,\"YNYNNNNYNNNYNNYNYNNY\" ,\"NYNNNNNYYYYNYNYYNNYN\" ,\"YYYYNNYNYNNNNNYYNYNY\" ,\"NNNNNNNNNNNYYNNNNNYY\" ,\"NNNNNNYNNNNYYNYNNNYN\" ,\"NYYYNNNYNNNNYYNYYNYY\" ,\"NNYNNNYYNNNNYNNNNNYY\" ,\"YYNNNYNNYNNNNYNNYNYY\" ,\"NNNNNNNYNNNNYNYNNNNY\" ,\"NNNNNNYNNNNYNNNNNNNN\" ,\"NNYNNNNNNNNYYNYNNYYN\" ,\"NNNNNNNNNNNYNNNNNNNY\" ,\"YNYYNYYNNNYYNNNNYNYY\" ,\"NYNNNNNYNYNYYYYNNNNY\" ,\"NNYNNNNYNYNYYYNNNNYY\" ,\"NNNNNNNYNNNYNNNNNNNY\" ,\"NNNNNNYYNNNYYNYNNNYN\"}",
			"note":"",
			"order":5
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{\"NNNYNNNNNNNYNNNNNNNN\" ,\"NNNNNNYNNYNNNNNYNYYN\" ,\"YNNNNNYNYNNNNNNNNNNY\" ,\"YNNNNNNNNNNNNNNNNNNN\" ,\"NNYNNNYNYNNYNNYNNNNY\" ,\"NNNYNNNNNNNYNNYYYNYY\" ,\"NNYYNNNNYNNNNNNNNNNY\" ,\"NYNNNYNNYNNNYNYNYNNN\" ,\"NNNNNNNNNNNNNNNNNNNN\" ,\"YNNNNNNNNNNYNNYYNNYN\" ,\"NNYYNYNNYYNNNNYYNYNN\" ,\"NNNNNNNNYNNNNNNNNNNN\" ,\"NNNYYNYNYYYYNNNNYNYY\" ,\"NNYYNYNNYYYYNNNNNYNY\" ,\"NNYYYNNNYNNNNNNNNNNN\" ,\"YNNYYYNNNNNNNNYNYNYY\" ,\"NNNNYNYNNNNYNNYNNNNN\" ,\"YNNYYYYNNYNNYNNNYNYN\" ,\"YNNYYYYNYNNYNNYYYNNY\" ,\"YNYNNNNNYNNYNNNNNNNN\"}",
			"note":"",
			"order":6
		},
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{\"NNNNN\",\"NNNNN\",\"NNNNN\",\"NNNNN\",\"NNNNN\"}",
			"note":"Nobody has managed anybody in the past, so nobody can be a manager in the new structure either.",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"hasManaged will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of hasManaged will contain the same number of characters as there are elements in hasManaged."
		},
		{
			"order":3,
			"val":"Each character of hasManaged will be 'Y' or 'N'."
		},
		{
			"order":4,
			"val":"Character i of element i of hasManaged will be 'N'."
		}
	]
}