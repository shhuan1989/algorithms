{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6142&rd=9925",
	"statement":"Given a sequence of bits (0's and 1's), we want to find an arbitrary monotonically increasing curve that best fits the bits. That is, the i<sup>th</sup> bit is b(i), and we want to find some curve, f, such that for x&lt;y, f(x) &lt;= f(y), and the sum over i of (f(i)-b(i))<sup>2</sup> (the squared error) is minimized.<br /><br /><br /><br /> Given the sequence of bits as a String[] where you concatenate all the elements together, return the minimum possible squared error.",
	"notes":[{
		"order":1,
		"val":"Your return must have relative or absolute error less than 1e-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MonotoneSEMin",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"min",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double min(String[] bits)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1.5",
			"id":0,
			"input":"{\"10001110\"}",
			"note":"The flat curve f(x) = 0.5 would give a squared error of 0.5*8 = 2. Naturally, we can do better than this though, and it turns out that the best we can do is a squared error of 1.5.",
			"order":1
		},
		{
			"expect":"Returns: 0.0",
			"id":0,
			"input":"{\"00\"}",
			"order":2
		},
		{
			"expect":"Returns: 0.0",
			"id":0,
			"input":"{\"11\"}",
			"order":3
		},
		{
			"expect":"Returns: 26.244842801985662",
			"id":0,
			"input":"{\"1010100101010101001010101001\", \"0101010100100010010001010101\", \"1110110101001011010111011011\", \"1010111101110110111000111100\"}",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"bits will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of bits will contain between 1 and 50 bits ('0' or '1'), inclusive."
		}
	]
}