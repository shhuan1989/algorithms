{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=2271&rd=4710",
	"statement":"TeX, a popular typesetting program, has a peculiar way of reading input from the user. In this problem, we will examine one aspect of the input process. When the initial routines of TeX read characters from an <b>input</b> String, all characters except (quotes for clarity) '^' are handled the same (this is actually oversimplified; real TeX is more complicated). The ASCII values of non-caret characters are returned, in sequence, as they are read. For example, <pre>\n\t <b>input</b> = &quot;aAbB cd&quot;\nreturned value = {97,65,98,66,32,99,100}.</pre> Note that the ASCII values for 'a', 'B', and ' ' are 97, 66, and 32 respectively. The exception to this rule involves carets ('^'). The following 'caret rules' are listed in order of precedence, from highest to lowest. When reading the <b>input</b>, the highest precedence rule that applies is used. \n <ul> \n  <li> 1) Two consecutive carets followed immediately by 2 lowercase hex digits should be converted into a single character whose ASCII value is determined by the hex digits (hex is an abbreviation for base-16). A lowercase hex digit is either in the range '0'-'9' or 'a'-'f'. For example, &quot;^^61&quot; would result in {97} as the returned value.</li> \n  <li> 2) Two consecutive carets followed by a single character whose ASCII value <i>k</i> is above 63, should be replaced with a single character whose ASCII value is <i>k</i>-64.</li> \n  <li> 3) Two consecutive carets followed by a single character whose ASCII value <i>k</i> is below 64, should be replaced with a single character whose ASCII value is <i>k</i>+64.</li> \n  <li> 4) A single caret should cause the ASCII value of a caret, namely 94, to be returned. </li> \n </ul> Rules can only be applied, in order of precedence, to the next characters being read. For example, when processing &quot;^^^5e5e&quot; you cannot immediately replace the ^^5e with a single ^ (5e is the hex value of 94). The caret rule will be applied to the ^^^, since it is leftmost. One application of a caret rule can cause future applications to occur. For example, &quot;^^5e^5e&quot; will become ^^5e and then ^ so you would return {94}. See the examples for further clarification.",
	"notes":[
		{
			"order":1,
			"val":"In hexadecimal, values 'a'-'f' represent 10,11,12,13,14, and 15 respectively. "
		},
		{
			"order":2,
			"val":"Since hexadecimal is base-16, the second digit from the right is the 16s column. For example, the number a7 is interpreted as (10*16)+(7*1) = 167."
		},
		{
			"order":3,
			"val":"Remember, only lowercase hexadecimal letters can be used with rule 1."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TeXLeX",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getTokens",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] getTokens(String input)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: { 97, 65, 98, 66, 32, 99, 100 }",
			"id":0,
			"input":"\"aAbB cd\"",
			"note":"From above.",
			"order":1
		},
		{
			"expect":"Returns: { 96, 94 }",
			"id":0,
			"input":"\"^^ ^^5e\"",
			"note":"",
			"order":2
		},
		{
			"expect":"Returns: { 94, 94 }",
			"id":0,
			"input":"\"^^\"",
			"note":"Only the last caret rule applies.",
			"order":3
		},
		{
			"expect":"Returns: { 30, 53, 101, 53, 101 }",
			"id":0,
			"input":"\"^^^5e5e\"",
			"note":"From above.",
			"order":4
		},
		{
			"expect":"Returns: { 96, 97, 98, 65, 83, 70, 115, 38, 42, 94, 64, 37, 35 }",
			"id":0,
			"input":"\"^^5e^5e^5e^5e^ abASFs&*^@%#\"",
			"order":5
		},
		{
			"expect":"Returns: { 117, 69, 32, 64 }",
			"id":0,
			"input":"\"^^5E ^^40\"",
			"note":"Beware of the capital hex letter E.",
			"order":6
		},
		{
			"expect":"Returns: { 32, 50, 30, 94, 79, 67, 35, 56, 74, 4, 113, 57, 71, 81, 112, 101, 105, 41, 95, 38, 95, 81, 60, 0, 62, 124, 65, 76, 56, 36, 94, 94 }",
			"id":0,
			"input":"\"^^`2^^^^OC^^c^^xJ^^Dq9GQpe^^)^^i_&_Q<^^@>|AL8^^d^^\"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"input will contain between 1 and 50 characters inclusive."
		},
		{
			"order":2,
			"val":"Each character of input will have ASCII value between 32 and 126 inclusive."
		}
	]
}