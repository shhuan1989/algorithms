{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1758&rd=5001",
	"statement":"<i>*** You may only submit a given problem once - no resubmissions will be accepted. ***</i><br /><br /><br /><br /> An arithmetic series consists of a sequence of terms such that each term minus its immediate predecessor gives the same result. For example, the sequence 3,7,11,15 is the terms of the arithmetic series 3+7+11+15; each term minus its predecessor equals 4. (Of course there is no requirement on the first term since it has no predecessor.) <p> Given a collection of integers, we want to find the longest arithmetic series that can be formed by choosing a sub-collection (possibly the entire collection). Create a class ASeries that contains a method longest that is given a int[] <b>values</b> and returns the length of the longest arithmetic series that can be formed from <b>values</b>. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ASeries",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"longest",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int longest(int[] values)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{3,8,4,5,6,2,2}",
			"note":" No arithmetic series using these values is longer than 2,3,4,5,6. ",
			"order":1
		},
		{
			"expect":"Returns: 3",
			"id":0,
			"input":"{-1,-5,1,3}",
			"note":"-1, 1, 3 is an arithmetic series (so is 3,-1,-5).",
			"order":2
		},
		{
			"expect":"Returns: 3",
			"id":0,
			"input":"{-10,-20,-10,-10}",
			"note":"-10,-10,-10 is an arithmetic series.",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"values will contain between 2 and 50 elements inclusive."
		},
		{
			"order":2,
			"val":"Each element of values will be between -1,000,000 and 1,000,000 inclusive."
		}
	]
}