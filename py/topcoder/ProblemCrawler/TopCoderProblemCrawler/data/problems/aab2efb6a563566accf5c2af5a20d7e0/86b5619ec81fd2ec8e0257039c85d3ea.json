{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7541&rd=10671",
	"statement":"You live in a big city and need to travel to work every day using the metro rail network. However, the railway lines aren't 100% reliable and occasionally problems with the track lead to a line having to run much slower than usual. You've been in the city for a while, so you know the approximate probabilities of delays happening on each of the lines. Your task is to develop a strategy that minimizes the expected time to get from your starting point to your destination. <br /><br /><br /><br /> When setting out on your journey, you have no way of telling which lines are delayed. Fortunately, the rail company posts information about delayed lines at the stations. However, they are not very good at communicating between stations, so each station will only have information posted about the train lines that pass through that particular station. You will therefore find out whether a line is delayed the first time you arrive in a station through which that line passes. Note that you have to be in the station to read the notice, so you don't gain information about delays by passing through a station on a train without disembarking. If a line is delayed, then the amount of time for the trains to run between adjacent stations on that line is increased by an amount <b>delay</b>. Getting on and off trains also takes a certain amount of time. You may assume that the lines which are delayed do not change throughout the course of the entire journey. Trains run in both directions on all lines, with the journey time being the same in both directions, but to change direction, you have to disembark and reboard. Assume that a delay affects trains in both directions. <br /><br /><br /><br /> Each line is given as the order of stations that the train visits on that line. A line may pass through a station multiple times, but these intersections are not joined. For example, if a train visits stations 0 1 2 3 4 5 2 6 7 in that order and you are at station 0 wishing to get to station 7, you have two options: visit all the stations on the line, or disembark at station 2 and reboard a different train at the later point on the line where it passes through station 2 again. There is no train that visits stations 0 1 2 6 7 without going through stations 3 4 5. <br /><br /><br /><br /> You will be given a String[] <b>lines</b>, where each element will contain a space-separated list of integers representing the stations that the a single line passes through in order, with the j<sup>th</sup> integer in the i<sup>th</sup> element being the number of the j<sup>th</sup> station on that line. The time that the trains take between each station will be described as a space-separated list of integers in a String[] <b>times</b>. The i<sup>th</sup> element of <b>times</b> describes the i<sup>th</sup> line in <b>lines</b>, with the j<sup>th</sup> integer being the time to travel between the j<sup>th</sup> and j+1<sup>th</sup> stations on the line. The probability of each line being delayed is given as a percentage in <b>probabilities</b> in the same order as <b>lines</b>. The time to catch or disembark a train is <b>changeTime</b> and the additional time to travel between adjacent stations if a line is delayed is <b>delay</b>. <br /><br /><br /><br /> You should work out the minimum expected journey time to get from station <b>start</b> to station <b>destination</b> and return this time. Return -1.0 if it is not possible to reach station <b>destination</b> from station <b>start</b>.",
	"notes":[
		{
			"order":1,
			"val":"The return value must be accurate to within an absolute or relative tolerance of 1e-9."
		},
		{
			"order":2,
			"val":" includes the time you spend waiting for trains."
		},
		{
			"order":3,
			"val":"It takes  time to board a train and  time to disembark. For a single journey on a single line, therefore, the cost is 2 *  + ."
		},
		{
			"order":4,
			"val":"If multiple lines pass through a station, you will find out about delays on all of these lines when you are in the station."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MetroNetwork",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minimizeTime",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, String[], String[], int[], int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double minimizeTime(int start, int destination, String[] lines, String[] times, int[] probabilities, int changeTime, int delay)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"7",
			"id":0,
			"input":"0",
			"note":"  This network is shown topologically in the above diagram. In this diagram and all subsequent ones, station numbers are shown in bold numerals and segment times are shown italicized. When there is a possibility of a line being delayed, this segment time is formatted \"\", quotes for clarity.  Here there is a single line, so no choice as to which route to take. If the line is not delayed then the journey time is  If the line is delayed, the time is  For a total expected journey time of ",
			"order":1
		},
		{
			"expect":"3",
			"id":0,
			"input":"0",
			"note":" This network is shown above. Here you have 2 choices: you can either travel to station 1 on line zero, then change to line 2, or travel to station 2 on line 1 and change to line 3. Lines 0 and 1 are never delayed and lines 2 and 3 are delayed 50% of the time. Since you cannot tell from station 0 which of lines 2 and 3, if either, are delayed, and both of the journey times are otherwise the same, you just pick one of the choices at random. You will end up having to travel on a delayed line 50% of the time. ",
			"order":2
		},
		{
			"expect":"3",
			"id":0,
			"input":"0",
			"note":" This is the same network as example 1, except line 2 has been extended to station 0 (see diagram). The time to travel on the additional segment is way too long for you to ever bother travelling on it, but it means that line 2 passes through station 0, so you know from the start whether or not it is delayed. The optimal strategy is now to consider whether line 2 is delayed from the start at station 0. If it is, then travel to station 1 on line 0 and then to station 3 on line 2. Otherwise you should take the other route via station 2. This strategy ensures that you will only travel on a delayed line if both lines 2 and 3 are delayed (25% probability), thus leading to a reduction in the expected journey time.",
			"order":3
		},
		{
			"expect":"4",
			"id":0,
			"input":"0",
			"note":" This network is shown above. Here, the optimal strategy is to travel to station 1 on line 0 and get off purely to check whether line 1 is delayed or not. If it is, then travel to station 2 on line 0, then station 4 on line 2. Otherwise travel to station 3 on line 0 and then to station 4 on line 1.",
			"order":4
		},
		{
			"expect":"9",
			"id":0,
			"input":"12",
			"note":"",
			"order":5
		},
		{
			"expect":"3",
			"id":0,
			"input":"0",
			"note":"There is no route to the destination here.",
			"order":6
		},
		{
			"expect":"8",
			"id":0,
			"input":"31",
			"note":"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"lines will contain between 1 and 8 elements, inclusive."
		},
		{
			"order":2,
			"val":"times and probabilities will contain the same number of elements as lines."
		},
		{
			"order":3,
			"val":"Each element of lines and times will contain no more than 50 characters."
		},
		{
			"order":4,
			"val":"Each element of lines will be a space-separated list of integers, without leading zeros, containing at least 2 integers."
		},
		{
			"order":5,
			"val":"Each integer in lines will be between 0 and 39, inclusive."
		},
		{
			"order":6,
			"val":"Each element of times will be a space-separated list of integers, without leading zeros, containing exactly 1 fewer integer than the corresponding element of lines."
		},
		{
			"order":7,
			"val":"Each integer in times will be between 1 and 100, inclusive."
		},
		{
			"order":8,
			"val":"Each element of probabilities will be between 0 and 100, inclusive."
		},
		{
			"order":9,
			"val":"changeTime will be between 1 and 100, inclusive."
		},
		{
			"order":10,
			"val":"delay will be between 1 and 100, inclusive."
		},
		{
			"order":11,
			"val":"start and destination will be distinct and will correspond to stations in lines."
		}
	]
}