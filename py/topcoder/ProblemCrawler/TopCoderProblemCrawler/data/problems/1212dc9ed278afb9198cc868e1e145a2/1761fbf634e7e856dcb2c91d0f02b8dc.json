{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11944&rd=15094",
	"statement":"<i>This problem statement contains superscripts and/or subscripts. It may not display properly outside the applet.</i> <br /><br /> <br /><br /> Wojtek and Tomek are playing darts. Unfortunately the dartboard is blurred and Wojtek can't read some of the numbers written on it. On the other hand, Tomek remembers the numbers written on the dartboard. <br /><br /> <br /><br /> The dartboard is divided into N parts. Wojtek knows that for each integer x between 1 and N, inclusive, there is exactly one part that is worth x points. You are given a int[] <b>points</b> containing N integers. If <b>points</b>[i] is positive, the i-th part is worth <b>points</b>[i] points. If <b>points</b>[i] is zero, he can't read the number that indicates the point value of the i-th part. <br /><br /> <br /><br /> Wojtek and Tomek will play the following game. First, Wojtek throws K darts. Wojtek is perfectly skilled at darts, so he will certainly hit the parts he wants to hit. He is allowed to hit the same part with multiple darts. After Wojtek throws all the darts, Tomek calculates Wojtek's total score. The total score is simply the sum of the points hit by each of the darts. (Note that each part of the dartboard may be counted multiple times if Wojtek hits it with multiple darts.) If the total score is at least <b>P</b> points, Wojtek wins. Otherwise, Tomek wins. <br /><br /> <br /><br /> You are given the int[] <b>points</b> and the int <b>P</b>. Return the smallest K such that Wojtek is guaranteed to win the game if he follows the optimal strategy when throwing the darts.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"BlurredDartboard",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minThrows",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int minThrows(int[] points, int P)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"8",
			"id":0,
			"input":"{0, 3, 4, 0, 0}",
			"note":"Wojtek should hit part 2 twice. He will get 8 points.",
			"order":1
		},
		{
			"expect":"15",
			"id":0,
			"input":"{0, 0, 0, 0, 0}",
			"note":"Wojtek should hit each part exactly once. He doesn't know the point values, but the total score will be always 15.",
			"order":2
		},
		{
			"expect":"2012",
			"id":0,
			"input":"{4, 7, 8, 1, 3, 2, 6, 5}",
			"note":"",
			"order":3
		},
		{
			"expect":"2012",
			"id":0,
			"input":"{0, 0, 5, 0, 0, 0, 1, 3, 0, 0}",
			"note":"",
			"order":4
		},
		{
			"expect":"1000000000",
			"id":0,
			"input":"{0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"points will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of points will be between 0 and N, inclusive, where N is the number of elements in points."
		},
		{
			"order":3,
			"val":"Each of the integers from 1 to N, inclusive, will appear at most once in points."
		},
		{
			"order":4,
			"val":"P will be between 1 and 1,000,000,000 (109), inclusive."
		}
	]
}