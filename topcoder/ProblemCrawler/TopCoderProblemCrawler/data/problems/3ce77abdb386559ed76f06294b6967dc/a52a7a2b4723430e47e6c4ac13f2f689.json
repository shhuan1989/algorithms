{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8151&rd=10934",
	"statement":"<p> A subsequence of a string <i>s</i> is a string that can be obtained by erasing zero or more characters from <i>s</i>. For example, &quot;aacb&quot;, &quot;c&quot;, &quot;&quot;, and &quot;abacaba&quot; are subsequences of &quot;abacaba&quot;, but &quot;bbc&quot; is not. </p> <p> Common subsequences of strings <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub> are strings that are subsequences of both <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub>. </p> <p> A string <i>s</i><sub>1</sub> is called a cyclic shift of string <i>s</i> if <i>s</i><sub>1</sub> can be obtained by removing zero or more characters from the beginning of string <i>s</i> and appending them to the end of string <i>s</i> in the same order. For example, strings &quot;abcde&quot;, &quot;bcdea&quot; and &quot;eabcd&quot; are cyclic shifts of string &quot;abcde&quot;, but &quot;cdeba&quot; is not. </p> <p> You are given two String[]s <b>a</b> and <b>b</b>. Construct a string <i>A</i> by concatenating all the elements of <b>a</b>, and construct a string <i>B</i> by concatening all the elements of <b>b</b>. </p> <p> Consider all common subsequences for all pairs (<i>x</i>, <i>y</i>), where <i>x</i> is any cyclic shift of string <i>A</i>, and <i>y</i> is any cyclic shift of string <i>B</i>. There are length(<i>A</i>) * length(<i>B</i>) such pairs. Find the common subsequence among all of these that comes last alphabetically, and return the last <b>suffixLength</b> characters of that subsequence. If the subsequence contains less than <b>suffixLength</b> characters, then return the whole subsequence. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CommonSubsequence",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxLex",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String maxLex(String[] a, String[] b, int suffixLength)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"aaabb\"}",
			"id":0,
			"input":"{\"baab\"}",
			"note":"The answer is the one of the common subsequences for the pair (\"bbaa\", \"bbaaa\").",
			"order":1
		},
		{
			"expect":"{\"bc\", \"a\"}",
			"id":0,
			"input":"{\"a\", \"cb\"}",
			"note":"The answer is one of the common subsequences for the pair (\"acb\", \"cab\") (there exist more such pairs).",
			"order":2
		},
		{
			"expect":"{\"xxxxzzzzzzzzzzz\"}",
			"id":0,
			"input":"{\"xzzzzzzzzzzzzzzzzzzx\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"{\"jdhccgeiaaijbddh\"}",
			"id":0,
			"input":"{\"ichhbca\", \"aghafbbgbaehi\"}",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"a and b will each contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of a and b will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of a and b will contain only characters with ASCII value between 35 and 126, inclusive."
		},
		{
			"order":4,
			"val":"suffixLength will be between 1 and 100, inclusive."
		}
	]
}