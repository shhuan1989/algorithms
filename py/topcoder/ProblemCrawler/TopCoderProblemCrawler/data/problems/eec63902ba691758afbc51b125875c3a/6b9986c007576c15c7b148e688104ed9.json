{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7540&rd=10668",
	"statement":"<p>Consider 26 different substances, labeled 'A' through 'Z' (quotes for clarity only). Some of these substances can be created from the others by an alchemical reaction. Each alchemical reaction takes at least two different substances. Exactly 1 gram of each input substance is combined, causing an explosion. After the dust settles, we are left with just 1 gram of the resulting substance.</p> <p>Alchemists don't like extra work, thus, for any given substance, there's at most one known reaction that results in that substance.</p> <p>You are given a String <b>initial</b> describing the substances that you have initially. Each occurrence of a letter indicates 1 gram, so if a letter appears k times in <b>initial</b>, it means you have k grams of that substance. You are also given a String[] <b>reactions</b> describing all the possible alchemical reactions. Each element of <b>reactions</b> describes a single reaction and is formatted as &quot;<i>ingredients</i>-&gt;<i>result</i>&quot; (quotes for clarity only), where <i>ingredients</i> is the list of substances consumed and <i>result</i> is the substance produced. Return the minimal number of reactions required to obtain at least 1 gram of the substance 'X', or -1 if it is impossible.</p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"QuantumAlchemy",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minSteps",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int minSteps(String initial, String[] reactions)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"ABC->F\", \"FE->X\"}",
			"id":0,
			"input":"\"ABCDE\"",
			"note":"Some substances may be left unused.",
			"order":1
		},
		{
			"expect":"{\"BZ->Y\", \"ZY->X\", \"AB->Z\"}",
			"id":0,
			"input":"\"AABBB\"",
			"note":"First, we make two grams of 'Z' by applying the last reaction twice. Second, we make 'Y' via the first reaction, and we still have 1 gram of 'Z' left, so that we can finally make 'X'.",
			"order":2
		},
		{
			"expect":"{\"BZ->Y\", \"ZY->X\", \"AB->Z\"}",
			"id":0,
			"input":"\"AAABB\"",
			"note":"Not enough.",
			"order":3
		},
		{
			"expect":"{\"BZ->Y\", \"ZY->X\", \"AB->Z\"}",
			"id":0,
			"input":"\"AAXB\"",
			"note":"No need to bother if we're already there.",
			"order":4
		},
		{
			"expect":"{\"ABCE->Z\", \"RTYUIO->P\", \"QWER->T\", \"MN->B\"}",
			"id":0,
			"input":"\"ABCDEFGHIJKLMNOPQRSTUVWYZABCDEFGHIJKLMNOPQRSTUVWYZ\"",
			"note":"We have a lot of stuff and some reactions, but none of them results in 'X'.",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"initial will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":2,
			"val":"initial will contain only uppercase letters ('A'-'Z')."
		},
		{
			"order":3,
			"val":"reactions will contain between 1 and 26 elements, inclusive."
		},
		{
			"order":4,
			"val":"Each element of reactions will contain between 5 and 28 characters, inclusive."
		},
		{
			"order":5,
			"val":"Each element of reactions will be formatted as &quot;ingredients-&gt;result&quot; (quotes for clarity only)."
		},
		{
			"order":6,
			"val":"Each ingredients will be a string of distinct uppercase letters ('A'-'Z')."
		},
		{
			"order":7,
			"val":"Each result will be an uppercase letter ('A'-'Z')."
		},
		{
			"order":8,
			"val":"Each result will be distinct."
		},
		{
			"order":9,
			"val":"Each ingredients will not contain the corresponding result."
		}
	]
}