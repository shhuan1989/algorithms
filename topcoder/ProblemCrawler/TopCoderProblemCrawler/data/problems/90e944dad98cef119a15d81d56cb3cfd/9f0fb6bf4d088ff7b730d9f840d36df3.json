{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13339&rd=16060",
	"statement":"<p> Alice likes eating candies. Her favorite type of candy are the Surprise Candies. Surprise Candies come in N different flavors and in N different shapes. You know the following facts about the shapes and flavors of Surprise Candies: </p>\n <ul> \n  <li>The shapes are numbered 0 through N-1.</li> \n  <li>The flavors are numbered 0 through N-1.</li> \n  <li>You can tell the shape of a candy before buying it. (Thus, you can do stuff like &quot;buy exactly 47 candies of shape 3&quot;.)</li> \n  <li>You can only tell the flavor of a candy when eating it. (Thus, you <i>do not</i> know the flavor when you are buying the candy.)</li> \n  <li>For each shape of Surprise Candies, there are exactly two flavors that can have that shape.</li> \n  <li>For each flavor of Surprise Candies, there are exactly two shapes that can have that flavor.</li> \n </ul> <p></p> <p> In Alice's street there is a store that sells Surprise Candies. Alice knows the exact inventory of this store. You are given this information in int[]s <b>Type1</b>, <b>Number1</b>, <b>Type2</b>, and <b>Number2</b>. Each of these int[]s has exactly N elements. For each i, their elements at index i correspond to the shape number i, as follows: </p>\n <ul> \n  <li>The store contains exactly <b>Number1</b>[i] candies with shape i and flavor <b>Type1</b>[i].</li> \n  <li>The store contains exactly <b>Number2</b>[i] candies with shape i and flavor <b>Type2</b>[i].</li> \n </ul> <p></p> <p> Alice wants to eat candies of all N flavors today. However, she is lazy to go to the store, so she sent Kirito to do the shopping for her. Kirito must buy a set of candies that is guaranteed to contain all N flavors. Return the smallest number of candies Kirito may buy. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CandyCollection",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"solve",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int solve(int[] Type1, int[] Number1, int[] Type2, int[] Number2)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1,1}",
			"id":0,
			"input":"{0,0}",
			"note":"In this test case we have N=2. Thus, there are two shapes and two flavors. The store has exactly one candy for each combination (shape,flavor). Kirito can simply buy two candies with the same shape, their flavors must be different.",
			"order":1
		},
		{
			"expect":"{2,5}",
			"id":0,
			"input":"{0,0}",
			"note":"In this test case we have N=2 again, but now the supply of candies in the store is larger. There are 2+2 = 4 candies of shape 0, and 5+5 = 10 candies of shape 1. The optimal strategy for Kirito is to buy 3 candies of shape 0. Both flavors have to be present in those three candies.",
			"order":2
		},
		{
			"expect":"{1,1,2,2}",
			"id":0,
			"input":"{0,0,2,3}",
			"note":"One optimal solution is to buy two candies of shape 0 and three candies of shape 2.",
			"order":3
		},
		{
			"expect":"{5,5,10,13}",
			"id":0,
			"input":"{0,1,2,3}",
			"note":"",
			"order":4
		},
		{
			"expect":"{895,704,812,323,334,674,665,142,712,254,869,548,645,663,758,38,860,724,742,530}",
			"id":0,
			"input":"{12,9,0,16,9,18,12,3,6,0,8,2,10,6,5,2,14,10,5,13}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"N will between 1 and 1000, inclusive."
		},
		{
			"order":2,
			"val":"Type1, Number1, Type2, Number2 will each contain exactly N elements."
		},
		{
			"order":3,
			"val":"For each i, Type1[i] and Types2[i] will be different."
		},
		{
			"order":4,
			"val":"Each element of Type1 and Type2 will be between 0 and N-1, inclusive."
		},
		{
			"order":5,
			"val":"Each element of Number1 and Number2 will be between 1 and 1000, inclusive."
		},
		{
			"order":6,
			"val":"Each of the values 0 through N-1 will appear exactly twice in Type1 and Type2 together."
		}
	]
}