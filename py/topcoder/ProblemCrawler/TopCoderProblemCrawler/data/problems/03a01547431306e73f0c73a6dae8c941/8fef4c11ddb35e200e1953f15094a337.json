{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=2923&rd=5854",
	"statement":"A group of people stand before you arranged in rows and columns. Looking from above, they form an R by C rectangle of people. You will be given a String[] <b>people</b> containing the height of each person. Elements of <b>people</b> correspond to rows in the rectangle. Each element contains a space-delimited list of integers representing the heights of the people in that row. Your job is to return 2 specific heights in a int[]. The first is computed by finding the shortest person in each row, and then finding the tallest person among them (the &quot;tallest-of-the-shortest&quot;). The second is computed by finding the tallest person in each column, and then finding the shortest person among them (the &quot;shortest-of-the-tallest&quot;).",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TallPeople",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getPeople",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] getPeople(String[] people)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: { 4, 7 }",
			"id":0,
			"input":"{\"9 2 3\", \"4 8 7\"}",
			"note":"The heights 2 and 4 are the shortest from the rows, so 4 is the taller of the two. The heights 9, 8, and 7 are the tallest from the columns, so 7 is the shortest of the 3.",
			"order":1
		},
		{
			"expect":"Returns: { 4, 4 }",
			"id":0,
			"input":"{\"1 2\", \"4 5\", \"3 6\"}",
			"order":2
		},
		{
			"expect":"Returns: { 1, 1 }",
			"id":0,
			"input":"{\"1 1\", \"1 1\"}",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"people will contain between 2 and 50 elements inclusive."
		},
		{
			"order":2,
			"val":"Each element of people will contain between 3 and 50 characters inclusive."
		},
		{
			"order":3,
			"val":"Each element of people will be a single space-delimited list of positive integers such that: 1) Each positive integer is between 1 and 1000 inclusive with no extra leading zeros.2) Each element contains the same number of integers.3) Each element contains at least 2 positive integers.4) Each element does not contain leading or trailing whitespace."
		}
	]
}