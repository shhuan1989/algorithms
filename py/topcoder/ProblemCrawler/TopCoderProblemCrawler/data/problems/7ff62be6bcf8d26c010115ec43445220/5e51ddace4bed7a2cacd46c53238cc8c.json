{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=2942&rd=10842",
	"statement":"You have been given a <b>width</b>-by-<b>height</b> rectangular piece of paper to fold. For the sake of clarity, assume the paper is on a grid such that the <b>width</b> is parallel to the x-axis and the <b>height</b> is parallel to the y-axis. In addition, assume the paper lies entirely in non-negative coordinates, with one corner on the point (0,0). In order, you will perform a sequence of folds on the paper. More precisely, after concatenating the elements of <b>folds</b> you will have a single space-delimited list of single folds. Each single fold will be formatted as (quotes for clarity) &quot;TypeCoordinate&quot;, where Type is either 'X', 'x', 'Y', or 'y', and Coordinate is an integer. Uppercase types denote folds in the positive direction. For example, &quot;X10&quot; denotes a fold along a vertical axis with x-coordinate 10 in the positive direction. Positive direction means that the portion of the paper to the left of the crease is folded toward the right (toward the positive x direction). Positive direction would denote folding upward had the crease been along a horizontal axis. All folds are considered <i>ideal</i> in that they fold all layers of the paper and leave it perfectly flat. If a crease is given that doesn't intersect the interior of the paper (edges do not count), no fold occurs. Once all folds are complete, return the thickness of the thickest part of the paper. The thickness at a particular point is the number of layers of paper at that point.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"PaperThickness",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxThickness",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long maxThickness(String[] folds, int width, int height)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"3",
			"id":0,
			"input":"{\"X1\"}",
			"note":"We begin with a square piece of paper with corners at (0,0) and (3,3). Here only a single fold occurs along the vertical line x=1.",
			"order":1
		},
		{
			"expect":"3",
			"id":0,
			"input":"{\"X0 x-1 Y-10\"}",
			"note":"The same piece of paper, but here the folds miss the interior.",
			"order":2
		},
		{
			"expect":"6",
			"id":0,
			"input":"{\"X2\", \" y3\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"5",
			"id":0,
			"input":"{\"X1 \", \"x3\"}",
			"note":"",
			"order":4
		},
		{
			"expect":"2",
			"id":0,
			"input":"{\"x1 y1\"}",
			"note":"Here the 2x2 square is folded into a thicker 1x1 square.",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"width will be between 1 and 100000, inclusive."
		},
		{
			"order":2,
			"val":"height will be between 1 and 100000, inclusive."
		},
		{
			"order":3,
			"val":"folds will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":4,
			"val":"Each element of folds will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":5,
			"val":"Once concatenated, the elements of folds will form a single-space delimited list of folds with no leading or trailing spaces. Each fold will be formatted as (quotes for clarity) &quot;TypeCoordinate&quot;, where 1) Type is either 'X', 'x', 'Y' or 'y', and2) Coordinate is an integer between -100000 and 100000, inclusive, with no extra leading zeros and a single leading '-' on negative values."
		}
	]
}