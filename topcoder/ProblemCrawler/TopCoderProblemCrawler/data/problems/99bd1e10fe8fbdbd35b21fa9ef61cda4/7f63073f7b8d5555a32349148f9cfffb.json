{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6831&rd=10132",
	"statement":"We are given a collection of integers and a positive number, <b>maxJump</b>. We are interested in different ways of arranging all the integers from the collection into a &quot;satisfactory sequence&quot;. A sequence is satisfactory if it has the property that the absolute value of the difference between adjacent values is always less than or equal to <b>maxJump</b>. <p> Create a class Coherency that contains a method starters that is given a int[] <b>collection</b> and positive number <b>maxJump</b>. It returns the number of distinct values from <b>collection</b> that could be the starting value in a satisfactory sequence. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Coherency",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"starters",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int starters(int[] collection, int maxJump)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"6",
			"id":0,
			"input":" {8,1,1,1,1}",
			"note":" However the values are arranged there must be a jump of 7. ",
			"order":1
		},
		{
			"expect":"7",
			"id":0,
			"input":"{8,1,1,1,1}",
			"note":" Any arrangement of these values has a maximum jump of 7. So we could start a satisfactory sequence with either a 1 or with the 8. ",
			"order":2
		},
		{
			"expect":"4",
			"id":0,
			"input":"{6,1,11,5,7,1}",
			"note":" (1,1,5,6,7,11) is a satisfactory sequence starting with 1. (11,7,6,5,1,1} is a satisfactory sequence starting with 11. There is no satisfactory sequence that starts with any of the other values, so there are 2 distinct possible starting values. ",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"collection will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element in collection will be between -1,000,000,000 and 1,000,000,000, inclusive."
		},
		{
			"order":3,
			"val":"maxJump will be between 0 and 1,000,000,000, inclusive."
		}
	]
}