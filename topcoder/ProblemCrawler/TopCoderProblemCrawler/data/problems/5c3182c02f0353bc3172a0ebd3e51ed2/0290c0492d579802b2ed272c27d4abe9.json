{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=3449&rd=6531",
	"statement":"<p> You are planning a business trip in which you need to visit clients in three cities. The airline charges a separate rate for each individual leg of your journey. For example, if you are flying from city A to city C, and you land in city B along the way, then you will pay the fare for a flight from A to B plus the fare for a flight from B to C. The airline only sells round-trip tickets, so if you pay for a flight from A to B, then you get a flight from B to A for free, whether you intend to use it or not. You want to calculate the minimum cost needed to fly to your three destination cities and return home. </p> <p> The prices of each possible flight are given as a String[] <b>fares</b>. The <i>i</i>-th element of <b>fares</b> represents the prices of flights between city <i>i</i> and each of the other cities. In particular, character <i>j</i> of element <i>i</i> represents the price of a flight between city <i>i</i> and city <i>j</i>. Characters with ASCII values between 49 (the character '<tt>1</tt>') and 122 (the character '<tt>z</tt>') represent costs between $10 and $740, respectively. In particular, a character with ASCII value VAL represents the cost 10*(VAL - 48), measured in dollars. The special character '<tt>-</tt>' indicates that no flights are available between those two cities. For example, if <b>fares</b> contains the Strings </p> <pre>\n    &quot;-7-&quot;\n    &quot;7-A&quot;\n    &quot;-A-&quot;\n</pre> then it costs $70 to travel between cities 0 and 1, and $170 to travel between cities 1 and 2 ('A' has ASCII value 65). There are no direct flights between cities 0 and 2. <b>fares</b> is always symmetric; the cost to travel from city <i>i</i> to city <i>j</i> is always the same as the cost to travel from city <i>j</i> to city <i>i</i>. <p> The indices of the cities you intend to visit are given in a int[] <b>destinations</b>, which always contains exactly 3 elements. It is possible that more than one client lives in the same city, so the elements of <b>destinations</b> are not necessarily distinct. You live in city 0, and must begin and end your trip there. Calculate and return the minimum cost to visit all three clients, or -1 if it is impossible to visit one or more of the clients. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Triptych",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minCost",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int minCost(String[] fares, int[] destinations)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{ 1, 2, 1 }",
			"id":0,
			"input":"{ \"-7-\", \"7-A\", \"-A-\" } ",
			"note":"You fly from city 0 to city 1 for $70, and visit both client 0 and client 2. Then you fly from city 1 to city 2 for $170, and visit client 1. Finally, you return home to city 0, with a layover in city 1.",
			"order":1
		},
		{
			"expect":"{ 1, 3, 4 }",
			"id":0,
			"input":"{ \"-8--9\", \"8---7\", \"---5-\", \"--5--\", \"97---\" }",
			"note":"You can reach cities 1 and 4, but you can't get to city 3.",
			"order":2
		},
		{
			"expect":"{ 2, 3, 4 }",
			"id":0,
			"input":"{ \"-5777\", \"5-555\", \"75-88\", \"758-8\", \"7588-\" }",
			"note":"You could fly directly to each client's city and return home in between visits for a cost of $210. However, you can make all the visits for only $200 by flying to city 1 and using that as a hub to fly to the other cities.",
			"order":3
		},
		{
			"expect":"{ 0, 0, 0 }",
			"id":0,
			"input":"{ \"-123\", \"1-45\", \"24-6\", \"356-\" }",
			"note":"All the clients live in your own city, so no flights are necessary.",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"fares contains between 3 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of fares contains exactly N characters, where N is the number of elements in fares."
		},
		{
			"order":3,
			"val":"Each character in fares is either '-' or has an ASCII value between 49 ('1') and 122 ('z'), inclusive."
		},
		{
			"order":4,
			"val":"The character '\\' (ASCII 92) does not appear in fares."
		},
		{
			"order":5,
			"val":"Character i of element j of fares is equal to character j of element i, for all indices i and j."
		},
		{
			"order":6,
			"val":"Character i of element i of fares is '-', for all indices i."
		},
		{
			"order":7,
			"val":"destinations contains exactly 3 elements."
		},
		{
			"order":8,
			"val":"Each element of destinations is between 0 and N-1, inclusive."
		}
	]
}