{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=166&rd=4000",
	"statement":"<pre>Class name: Spiral\nMethod name: numberAt\nParameters: int, int, int, int\nReturns: int\nImplement a class Spiral, which contains a method numberAt.  numberAt fills a\nnRows by nCols two-dimensional array with numbers 1..N (where N = nRows *\nnCols) in a clockwise spiral direction. The method then returns the value at a\nspecified position (row,col) of that array.\n\nThe method signature is:\nint numberAt(int nRows, int nCols, int row, int col); (be sure the method is\ndeclared public)\nNotes:\nThe number of rows in the two-dimensional array is equal to nRows.\nThe number of columns in the two-dimensional array is equal to nCols.\nThe upper left corner is located at (row, col) = (0, 0) \nThe lower right corner is located at (row, col) =  (nRows-1, nCols-1)\nThe rectangular array is to be filled in the following manner:\nStart at row=0, col=0 which is filled with the number 1\nMovement is clockwise and follows the pattern right-down-left-up until it fills\nthe entire rectangular array.\nAfter each move, the current location is filled with the value of the previous\nlocation plus one.\nHere is an example of a spiral with nRows=5, nCols=6:\n01 02 03 04 05 06\n18 19 20 21 22 07\n17 28 29 30 23 08 \n16 27 26 25 24 09 \n15 14 13 12 11 10\n*TopCoder will verify that 0 &lt; nRows &lt;= 100, 0 &lt; nCols &lt;= 100, 0 &lt;= row &lt;\nnRows, and 0 &lt;= col &lt; nCols.\n\n-If the spiral is nRows=5 by nCols=6, row=4, and col=5, numberAt returns 10.\n-If the spiral is nRows=5 by nCols=6, row=2, and col=3, numberAt returns 30.\n-If the spiral is nRows=100 by nCols=100, row=50, and col=50, numberAt returns\n9999.\n-If the spiral is nRows=100 by nCols=100, row=3, and col=72, numberAt returns\n1234.\n-If the spiral is nRows=1 by nCols=1, row=0, and col=0, numberAt returns 1.  \n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Spiral",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"numberAt",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int numberAt(int param0, int param1, int param2, int param3)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}