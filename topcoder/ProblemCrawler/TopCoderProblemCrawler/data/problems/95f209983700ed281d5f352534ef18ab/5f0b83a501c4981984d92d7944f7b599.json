{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11557&rd=14649",
	"statement":"<i>NOTE: This problem statement contains subscripts/superscripts that may not display properly if viewed outside of the applet.</i><br /><br /><br /><br /> Raising a matrix to a power efficiently is a well known problem in computer science. Let A be matrix with elements a<sub>ij</sub> where: 0 &lt;= i,j &lt; <b>n</b>. The value of each element is given by:<br /><br /> a<sub>ij</sub> = <b>d</b>*i + <b>q</b><sup>j</sup><br /><br /> Let B be the resulting matrix from raising A to the <b>k</b>-th power: B = A<sup><b>k</b></sup>.<br /><br /> B has elements b<sub>ij</sub>. You are to return some specific elements from B. The parameters <b>rows</b> and <b>columns</b> specify which elements. Element t of your return should contain the value of b<sub>ij</sub> where i = <b>rows</b>[t] and j = <b>columns</b>[t]. <br /><br /><br /><br /> You are given ints <b>d</b>, <b>q</b>, <b>n</b>, <b>k</b> and int[]s <b>rows</b> and <b>columns</b>. Return an int[] containing the values of some elements, b<sub>ij</sub>, modulo 1,000,000,007.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MatrixPower",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getElements",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int, int, int[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] getElements(int d, int q, int n, int k, int[] rows, int[] columns)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"1",
			"note":"A contains rows [1, 2] and [2, 3]. Then B = A contains rows [1*1+2*2, 1*2+2*3] = [5, 8] and [2*1+3*2, 2*2+3*3] = [8, 13].",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"0",
			"note":"A is a 10x10 matrix containing only 1s. A contains only 10s and B = A contains only 100s.",
			"order":2
		},
		{
			"expect":"1000000000",
			"id":0,
			"input":"0",
			"note":"You may be asked to return the value of the same element more the once.",
			"order":3
		},
		{
			"expect":"1000000000",
			"id":0,
			"input":"1000000000",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"d will be between 0 and 10^9, inclusive."
		},
		{
			"order":2,
			"val":"q will be between 1 and 10^9, inclusive."
		},
		{
			"order":3,
			"val":"n will be between 1 and 10,000, inclusive."
		},
		{
			"order":4,
			"val":"k will be between 1 and 10^9, inclusive."
		},
		{
			"order":5,
			"val":"rows will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":6,
			"val":"columns will contain the same number of elements as rows."
		},
		{
			"order":7,
			"val":"Each element of rows will be between 0 and n-1, inclusive."
		},
		{
			"order":8,
			"val":"Each element of columns will be between 0 and n-1, inclusive."
		}
	]
}