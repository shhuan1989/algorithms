{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=890&rd=4462",
	"statement":" An &quot;n-dimensional grid of size k&quot; contains k^n cells. Each cell can be represented as an n-tuple of values from the set {0,1,...,k-1}. For example a 2-dimensional grid of size 3 is just a 3 x 3 square, with cells (0,0) (0,1) (0,2) (1,0) (1,1) (1,2) (2,0) (2,1) and (2,2). A 3-dimensional grid of size 5 is a cube containing 125 cells. Cell (0,2,2) is the cell in row 0, column 2, layer 2. <p> Higher dimensions get a little harder to describe geometrically, but not algebraically! Every cell in an n-dimensional grid can be uniquely represented by an n-tuple specifying the &quot;row&quot; &quot;column&quot; &quot;layer&quot; &quot;plane&quot; &quot;hyper-row&quot; etc. (English fails us at about the same point as geometry fails us). We can define a straight line in an n-dimensional grid algebraically. It is a set of distinct cells that can be placed in a sequence such that the difference between each pair of adjacent cells is the same throughout the sequence. Of course, the difference between two n-tuples is an n-tuple. A maximal line in an n-dimensional grid of size k is a line containing k cells. </p><p> In a 3-dimensional grid of size 4, one example of a maximal straight line is (3,0,1),(2,1,1),(1,2,1),(0,3,1) which is a straight line of length 4. The difference between each pair of adjacent cells in the sequence is (-1,1,0). </p><p> You want to create a maximal line in your n-dimensional grid by adding to a collection of cells that have already been chosen. Create a class TupleLine that contains the method quickLine that takes an int <b>size</b> and a String[] <b>chosen</b> as inputs and returns the smallest number of additional cells that you could choose to form a maximal line in the grid. </p><p> Each String in <b>chosen</b> is a sequence of digits indicating a particular cell. For example, &quot;410&quot; would indicate the cell at row 4, column 1, layer 0 in a 3-dimensional grid whose size is at least 5 (since it has a row 4). The dimension of the grid is always the same as the length of each String in <b>chosen</b>. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TupleLine",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"quickLine",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int quickLine(int size, String[] chosen)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"00\",\"02\",\"21\"}",
			"id":0,
			"input":"4",
			"note":"  The left-hand picture shows the original situation. The right-hand picture shows the only way of completing a maximal line by adding two X's. ",
			"order":1
		},
		{
			"expect":"{\"00\",\"32\",\"21\",\"32\"}",
			"id":0,
			"input":"4",
			"note":" There are lots of ways to form a maximal line with 3 more cells. Note that the cell \"32\" appears twice in  but, of course, this does not help us to form a maximal line. ",
			"order":2
		},
		{
			"expect":"{\"0022\",\"0202\",\"0112\",\"0000\",\"0112\"}",
			"id":0,
			"input":"3",
			"note":"These first three cells already form a maximal line in this 4-dimensional grid.",
			"order":3
		},
		{
			"expect":"{\"2355846\",\"6355842\",\"3355848\"}",
			"id":0,
			"input":"9",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"size is between 3 and 9 inclusive"
		},
		{
			"order":2,
			"val":"chosen contains between 1 and 50 elements inclusive"
		},
		{
			"order":3,
			"val":"each character in each element of chosen is a digit whose value is less than size"
		},
		{
			"order":4,
			"val":"each element in chosen contains the same number of characters, n. n is the dimension of the grid and is between 2 and 9 inclusive"
		}
	]
}