{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6115&rd=9815",
	"statement":"<p> A palindrome is a phrase that reads the same forward and backward (ignoring spaces). Given the first half of a palindrome (as described below), you must return a complete palindrome that contains only words from a given set of legal words. The returned palindrome must be a phrase where words are separated by single spaces. </p> <p> You will be given the first half of the palindrome as a String <b>text</b> containing only letters and no spaces. There are two complete palindromes that can be created from this first half. For example, given &quot;ABC&quot;, you could produce either &quot;ABCCBA&quot; or &quot;ABCBA&quot; as the complete palindrome. You must then insert spaces into the complete palindrome such that all the words in the phrase exist in the String[] <b>words</b> </p> <p> For example, given the list of words { &quot;A&quot;, &quot;CANAL&quot;, &quot;MAN&quot;, &quot;PANAMA&quot;, &quot;PLAN&quot; }, and the text &quot;AMANAPLANAC&quot;, your method would return the String &quot;A MAN A PLAN A CANAL PANAMA&quot;. </p> <p> If no palindrome can be made, your method should return &quot;&quot;. If more than one palindrome can be made, return the one that comes first lexicographically (please note that ' ' comes before all letters). </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Palindromist",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"palindrome",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String palindrome(String text, String[] words)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{ \"A\", \"CANAL\", \"MAN\", \"PANAMA\", \"PLAN\" }",
			"id":0,
			"input":"\"AMANAPLANAC\"",
			"order":1
		},
		{
			"expect":"{ \"AA\", \"A\", \"AAA\" }",
			"id":0,
			"input":"\"AAAAA\"",
			"order":2
		},
		{
			"expect":"{ \"CBABC\", \"CBAABC\" }",
			"id":0,
			"input":"\"CBA\"",
			"order":3
		},
		{
			"expect":"{ \"AR\", \"CAR\", \"FAST\", \"RACE\", \"SAFE\", \"CEFA\", \"ACE\", \"STTS\", \"AFEC\" }",
			"id":0,
			"input":"\"RACEFAST\"",
			"order":4
		},
		{
			"expect":"{ \"AA\", \"AAB\", \"BAA\", \"BAB\" }",
			"id":0,
			"input":"\"AABAABA\"",
			"order":5
		},
		{
			"expect":"{ \"WARTS\", \"I\", \"TOO\", \"A\", \"FAD\", \"STUPID\", \"STRAW\", \"PUT\", \"NO\", \"ON\", \"SOOT\" }",
			"id":0,
			"input":"\"STRAWNOTOOSTUPIDAF\"",
			"order":6
		},
		{
			"expect":"{ \"AAAA\" }",
			"id":0,
			"input":"\"AAAAA\"",
			"order":7
		},
		{
			"expect":"{ \"A\", \"AA\" }",
			"id":0,
			"input":"\"A\"",
			"order":8
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"text will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":2,
			"val":"text will contain only uppercase letters ('A'-'Z')."
		},
		{
			"order":3,
			"val":"words will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":4,
			"val":"Each element of words will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":5,
			"val":"Each element of words will contain only uppercase letters ('A'-'Z')."
		}
	]
}