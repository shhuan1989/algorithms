{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13517&rd=16191",
	"statement":"<p> For two positive integers a and b (a &lt;= b) we define an integer f(a,b) as a concatenation of numbers a, a + 1, a + 2, ..., b - 1, b in a decimal notation. For example, f(2,5) = 2345, f(18,23) = 181920212223. </p> <p> You are given three ints <b>L</b>, <b>R</b>, <b>v</b>. Return the number of pairs of integers x, y (<b>L</b> &lt;= x &lt;= y &lt;= <b>R</b>) such that f(x,y) is equal to <b>v</b> modulo 1,000,000,007. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ConcatenateNumbers",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"numberOfSegments",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long numberOfSegments(int L, int R, int v)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"13",
			"id":0,
			"input":"11",
			"note":"f(11,11) = 11, f(11,12) = 1112, f(11,13) = 111213, f(12,12) = 12, f(12,13) = 1213, f(13,13) = 13. You must return 1 because only f(11,13) = 111213 module 1,000,000,007.",
			"order":1
		},
		{
			"expect":"13",
			"id":0,
			"input":"11",
			"note":"",
			"order":2
		},
		{
			"expect":"13",
			"id":0,
			"input":"11",
			"note":"",
			"order":3
		},
		{
			"expect":"100000",
			"id":0,
			"input":"1",
			"note":"",
			"order":4
		},
		{
			"expect":"1000000000",
			"id":0,
			"input":"999900001",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"L and R will be between 1 and 1,000,000,000 (10^9), inclusive."
		},
		{
			"order":2,
			"val":"R-L will be between 0 and 100,000, inclusive."
		},
		{
			"order":3,
			"val":"v should be between 0 and 1,000,000,006, inclusive."
		}
	]
}