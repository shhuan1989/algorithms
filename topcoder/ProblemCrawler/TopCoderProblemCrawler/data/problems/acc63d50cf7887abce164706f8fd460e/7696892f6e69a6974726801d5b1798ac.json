{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=4461&rd=6536",
	"statement":"<i> NOTE: This problem statement contains an image that may not display properly if viewed outside of the applet. </i> <p> You will be given the map of a maze, with exactly two openings on the boundary. Your task is to add mirrors to the maze in such an arrangement that if a laser is shined through one opening in the boundary, it will exit through the other opening. Your method should return the least number of mirrors necessary to be added in order to accomplish this. If no solution is possible, return -1. </p> <p> The maze will consist of walls ('#'), open spaces ('.'), and mirrors ('/' and '`') arranged on a regular grid. The laser may only travel though open spaces and reflect off of mirrors. If it hits a wall, the light will be absorbed. You may only place mirrors on open spaces. </p> <p> Mirrors are always at a 45-degree angle to the axes of the maze, and deflect the laser at a right angle. </p> <p> For example, given the following maze: </p> <pre>\n\n    #######\n    ##....#\n    ##.##.#\n    ##.##.#\n    ......#\n    ##.####\n    ##.####\n</pre> <p> There are three arrangements of mirrors that will deflect the laser from one opening in the boundary to the other: <br /><br /> </p> \n <center> \n  <img src=\"http://www.topcoder.com/contest/problem/MirrorPath/mirrors1.gif\" /> \n </center> <p> These three solutions require 1, 3, and 4 mirrors, respectively. The least number of mirrors needed is 1, so 1 is the correct answer. </p> <p> The map may have mirrors already placed, which you may use but cannot move. For example, given the following map: </p> <pre>\n\n    #######\n    ##....#\n    ##.##.#\n    ##.##.#\n    ../...#\n    ##.####\n    ##.####\n</pre> <p> there is only one solution (the third arrangement in the figure above). Three more mirrors must be added, so the correct answer in this case is 3. </p> ",
	"notes":[{
		"order":1,
		"val":"Since '\\' is a special character, we will use the '/' (forward slash) and '`' (back quote) characters to indicate mirrors in the input."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MirrorPlacement",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"mirrors",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int mirrors(String[] map)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{ \"#######\", \"##....#\", \"##.##.#\", \"##.##.#\", \"......#\", \"##.####\", \"##.####\" }",
			"note":"This is the first example in the problem statement.",
			"order":1
		},
		{
			"expect":"Returns: 3",
			"id":0,
			"input":"{ \"########\", \"##....##\", \"##.##.##\", \"##...`..\", \"#####.##\" }",
			"note":"This is similar to the second example in the problem statement.",
			"order":2
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{ \"##################################################\", \"#................................................#\", \".................................................#\", \"#................................................#\", \"#.................................................\", \"#................................................#\", \"##################################################\" } ",
			"note":"There are many 2-mirror solutions possible, all with '`' mirrors in the same column of the 3rd and 5th rows.",
			"order":3
		},
		{
			"expect":"Returns: -1",
			"id":0,
			"input":"{ \"###########\", \"...../.....\", \"#####.#####\", \"###.....###\", \"###.###.###\", \"###.....###\", \"###########\" }",
			"note":"No solution is possible.",
			"order":4
		},
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{ \"########.##\", \"#./......`#\", \"#../.`....#\", \"#.`...../.#\", \"#....`.../#\", \"###.#######\" }",
			"order":5
		},
		{
			"expect":"Returns: 8",
			"id":0,
			"input":"{ \"#.#####\", \"#..####\", \"##..###\", \"###..##\", \"####..#\", \"#####.#\" }",
			"order":6
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{ \"####\", \"####\", \"#..#\" }",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"map will contain between 3 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"The length of each element of map will be the same, and be between 3 and 50, inclusive."
		},
		{
			"order":3,
			"val":"map will contain only the characters '#', '.', '/', and '`'."
		},
		{
			"order":4,
			"val":"Exactly 2 characters on the boundary of map will be '.'. All other characters on the boundary will be '#'."
		},
		{
			"order":5,
			"val":"The characters in the four corners of map will be '#'."
		}
	]
}