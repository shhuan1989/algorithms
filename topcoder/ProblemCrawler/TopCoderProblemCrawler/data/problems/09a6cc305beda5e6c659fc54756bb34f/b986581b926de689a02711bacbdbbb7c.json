{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=5981&rd=9811",
	"statement":"<p>It's the year 2051. You have some free time in June this year and want to visit an interesting galaxy. You will need some machines during your trip and you are wondering how many of them you can take.</p> <p>There are a number of machines in a store. Each machine may depend on other machines to work properly, and you want all the machines you take to work. You noticed that although machine A may not depend directly on machine B, you may be unable to take A without B because of some indirect dependency. For example, if machine A is dependent on machine C and machine C is dependent on B, you cannot take machine A without machine B.</p> <p>You discovered an interesting rule while selecting your machines. If a machine A depends on machines B and C, then B is dependent on C, C is dependent on B, or both B and C depend on each other. Although the rule you found is true for direct dependencies, you were able to prove that it also holds for indirect dependencies.</p> <p>You want to buy K different machines such that all of them will work properly. You are given a String[] <b>dependencies</b> describing the dependencies between the machines. Element i of <b>dependencies</b> is a space delimited list of machines that machine i is directly dependent on. Return a int[] with all possible positive values for K in ascending order.</p> <br /><br /> Example: <pre>{&quot;1 2&quot;,&quot;0 2&quot;,&quot;3&quot;,&quot;&quot;}</pre> \n <ul> \n  <li>Machine 0 needs machines 1 and 2 to work</li> \n  <li>Machine 1 needs machines 0 and 2 to work</li> \n  <li>Machine 2 needs machine 3 to work</li> \n  <li>Machine 3 does not need any other machine to work</li> \n </ul> <p>The allowed K values are 1 (you take only machine 3), 2 (you take machines 2 and 3) and 4 (you take all the machines). So you should return {1,2,4}.</p>",
	"notes":[{
		"order":1,
		"val":"First machine has index 0, second has index 1 and so on."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"GalaxyExpedition",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"possibleValues",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] possibleValues(String[] dependencies)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {1, 2, 4 }",
			"id":0,
			"input":"{\"1 2\",\"0 2\",\"3\",\"\"}",
			"note":"The example from the problem statement.",
			"order":1
		},
		{
			"expect":"Returns: {3 }",
			"id":0,
			"input":"{\"1\",\"2\",\"0\"}",
			"note":"We have to take all three machines.",
			"order":2
		},
		{
			"expect":"Returns: {2, 4 }",
			"id":0,
			"input":"{\"1\",\"0\",\"3\",\"2\"}",
			"note":"We can take a pair {0,1} or {2,3}, and as always we can take all the machines.",
			"order":3
		},
		{
			"expect":"Returns: {1, 3, 5 }",
			"id":0,
			"input":"{\"\",\"2 0\",\"0 1\",\"0 4\",\"3 0\"}",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"dependencies contains between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of dependencies contains between 0 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of dependencies is a space delimited list of integers."
		},
		{
			"order":4,
			"val":"Each integer in dependencies is between 0 and the number of elements in dependencies - 1, inclusive, and contains no extra leading zeros."
		},
		{
			"order":5,
			"val":"Each element of dependencies contains no duplicate values."
		},
		{
			"order":6,
			"val":"Element i of dependencies does not contain the value i."
		},
		{
			"order":7,
			"val":"If a machine A depends on machines B and C, then B is dependent on C, C is dependent on B, or both B and C depend on each other."
		}
	]
}