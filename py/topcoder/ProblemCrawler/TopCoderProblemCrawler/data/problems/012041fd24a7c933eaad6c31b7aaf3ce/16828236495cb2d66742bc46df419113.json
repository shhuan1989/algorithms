{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6165&rd=9983",
	"statement":"You are given a network where each pair of nodes is connected by at most 1 path. Your boss has told you to place traffic monitors on certain nodes to better supervise the network. A single monitor can watch all links directly connected to the node it is attached to. Assuming every link must be watched, return the fewest number of monitors that must be installed. <br /><br /><br /><br /> Nodes i and j share a symmetric link in your network if character j of element i of <b>links</b> is 'Y' ('N' otherwise). A path is a sequence of distinct nodes such that neighbors in the sequence share a link.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TrafficMonitor",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getMin",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getMin(String[] links)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{ \"NN\", \"NN\" }",
			"note":"There are no edges to monitor.",
			"order":1
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{ \"NYNN\", \"YNYN\", \"NYNY\", \"NNYN\" }",
			"order":2
		},
		{
			"expect":"Returns: 22",
			"id":0,
			"input":"{}",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"links will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of links will contain exactly N characters, where N is the number of elements in links."
		},
		{
			"order":3,
			"val":"Each character of links will be 'Y' or 'N'."
		},
		{
			"order":4,
			"val":"Character i of element i of links will be 'N'."
		},
		{
			"order":5,
			"val":"Character i of element j of links will equal character j of element i."
		},
		{
			"order":6,
			"val":"There will be at most one path between any two nodes."
		}
	]
}