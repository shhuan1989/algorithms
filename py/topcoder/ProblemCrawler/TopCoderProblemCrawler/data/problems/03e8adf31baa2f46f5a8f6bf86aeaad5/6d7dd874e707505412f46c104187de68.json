{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=3098&rd=5871",
	"statement":"<p>A &quot;combo box&quot;, &quot;choice&quot;, or &quot;select box&quot; is a graphical component found in many applications where the current selection is displayed with an arrow on the right side that you can push on to see all the options that can be selected. You probably selected an item from a combo box to open this problem.</p> <p>A common behavior when you try to use a combo box with your keyboard is that the first element in the combo box that starts with the typed character (case insensitive) after the currently selected item becomes selected. If there are no elements that start with that character after the currently selected item but there is one before it, the first element in the combo box that starts with that character is selected. If no items in the combo box start with that letter, the currently selected element stays selected.</p> <p>A well-designed combo box will allow you to navigate by keyboard from any selection to any other selection in a minimal number of keystrokes.</p> <p>You will be given the selectable contents of the combo box as a String[] called <b>elements</b>. You are to write a program to find the maximum number of keystrokes absolutely necessary to get to any element from any element in the combo box.</p>",
	"notes":[
		{
			"order":1,
			"val":"The elements in  may not be unique."
		},
		{
			"order":2,
			"val":"It takes zero keystrokes to get from an element to itself."
		},
		{
			"order":3,
			"val":"The keystrokes made are case-insensitive, meaning that if 'a' is hit, the first 'a' or 'A' after the current selection will be selected, whichever occurs first."
		},
		{
			"order":4,
			"val":"In most real applications, you could use the arrow keys as well as the letter keys. However, in this problem, you may only use letter keys."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ComboBoxKeystrokes",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minimumKeystrokes",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int minimumKeystrokes(String[] elements)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"alpha\",\"beta\",\"gamma\",\"delta\"}",
			"note":"Since all the elements in the combo box start with different letters, you can get to any element with one keystroke!",
			"order":1
		},
		{
			"expect":"Returns: 8",
			"id":0,
			"input":"{\"kyky\",\"kalinov\",\"kalmakka\",\"Kavan\",\"Kawigi\",\"kaylin\",\"Klinck\",\"krijgertje\",\"kupo\"}",
			"note":"This list of fine coders can only be traversed one at a time, because all elements start with \"K\".",
			"order":2
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{\"a\",\"b\",\"c\",\"b\",\"d\",\"b\",\"e\",\"b\",\"f\"}",
			"note":"The b's in this list would be an inconvenience, if you couldn't always instantly skip to the entry before them, making them all no more than 2 keystrokes away.",
			"order":3
		},
		{
			"expect":"Returns: 4",
			"id":0,
			"input":"{\"apple\",\"Boy\",\"CaRD\",\"Dog\",\"egG\",\"FruiT\", \"Grape\",\"hand\",\"Ant\",\"eagle\",\"ice cream\", \"air\",\"East\",\"Exit\",\"Door\",\"camerA\",\"bad\", \"fast\",\"Zealot\",\"internAtional\",\"Bead\", \"Bread\",\"Exit\",\"fast\", \"actiVe\",\"Cats\", \"beast\",\"Alligator\",\"drag\",\"castle\", \"clean\",\"iLlEgAl\",\"crab\",\"Free Willy\", \"first\",\"dean\",\"Fourth of July\",\"King\", \"fellow\",\"FrEaK\",\"Elephant\",\"bird\",\"Bible\", \"creep\",\"create\",\"Deal\",\"eEl\",\"entrance\", \"cream\",\"Fleece\"}",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"elements will have between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"There will be between 1 and 50 characters in each element of elements, inclusive."
		},
		{
			"order":3,
			"val":"Each element in elements will consist of upper- and lower-case letters and spaces, but will not start with a space."
		}
	]
}