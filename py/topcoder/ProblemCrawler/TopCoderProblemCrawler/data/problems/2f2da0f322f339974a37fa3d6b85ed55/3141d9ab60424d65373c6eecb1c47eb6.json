{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=3480&rd=6528",
	"statement":"<p> Just before a chess match between two teams, each team's coach secretly determines an ordering of his team's players. The first players in each team then get to play against each other, the second players in each team play against each other, etc. The team with the most wins will win the match. </p> <p> You are the coach for one of the teams, and you have somehow managed to find out the order of the players in the other team. Based on that, you want to order your players so that your team's expected score is maximized to your advantage. The expected score of a single game can be calculated by the following formula (which is directly derived from how the international chess rating system works): </p> <pre>\nE<sub>A</sub> = 1 / (1 + 10 <sup>(R<sub>B</sub> - R<sub>A</sub>)/400</sup>)\n\nE<sub>B</sub> = 1 / (1 + 10 <sup>(R<sub>A</sub> - R<sub>B</sub>)/400</sup>)\n</pre> <p> where R<sub>A</sub> and R<sub>B</sub> are the ratings of player A and B, and E<sub>A</sub> and E<sub>B</sub> are the expected scores for each player. For instance, if R<sub>A</sub> is 2432 and R<sub>B</sub> is 2611, the expected score for player A is 1 / (1 + 10 <sup>179/400</sup>) = 0.263005239459. The expected score for a team is the sum of the expected scores for the players in that team. </p> <p> To make things a bit more complicated, the players in a team must be ordered such that a player with rating <i>x</i> plays before all players with rating strictly less than <i>x</i> - <b>lim</b>, where <b>lim</b> is a given non-negative integer. For example, if <b>lim</b> is 100, a player with rating 2437 must play before a player with rating 2336 but not necessarily before a player with rating 2337. </p> <p>Create a class ChessMatch containing the method bestExpectedScore which takes a int[] <b>teamA</b>, the ratings of your players (in no particular order); a int[] <b>teamB</b>, the ratings of your opponent's players in the order they will play; and an int <b>lim</b>, the limit determining how freely you can order your players. You can assume that your opponent's players will be ordered in accordance with <b>lim</b>. The method should return a double, your team's expected score if you order your players optimally.</p>",
	"notes":[{
		"order":1,
		"val":"Your return must have an absolute or relative error less than 1e-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ChessMatch",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"bestExpectedScore",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double bestExpectedScore(int[] teamA, int[] teamB, int lim)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{2534,2429,2340,2389}",
			"id":0,
			"input":"{2239,2412,2399,2267}",
			"note":"   ",
			"order":1
		},
		{
			"expect":"{2534,2429,2340,2389}",
			"id":0,
			"input":"{2239,2412,2399,2267}",
			"note":" ",
			"order":2
		},
		{
			"expect":"{1500,1503}",
			"id":0,
			"input":"{2500,2503}",
			"note":" ",
			"order":3
		},
		{
			"expect":"{1885,1851,1743,1714,2338,2167,1789}",
			"id":0,
			"input":"{1786,2080,2156,2132,2187,2380,2191}",
			"note":" ",
			"order":4
		},
		{
			"expect":"{2138,2259,2109,2160,2295,2022,2043,2131, 1655,1716,1648,1779,1518,1570,1560,1677}",
			"id":0,
			"input":"{1868,1797,2213,2085,1611,2002,2167,1908, 1773,1834,1766,2245,1582,2009,2233,2030}",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"teamA will contain between 1 and 20 elements, inclusive."
		},
		{
			"order":2,
			"val":"teamB will contain the same number of elements as teamA."
		},
		{
			"order":3,
			"val":"Each element in teamA and teamB will be between 1500 and 3000, inclusive."
		},
		{
			"order":4,
			"val":"lim will be between 0 and 1500, inclusive."
		},
		{
			"order":5,
			"val":"teamB[i] + lim will be equal or greater than teamB[j] for j&gt;i."
		}
	]
}