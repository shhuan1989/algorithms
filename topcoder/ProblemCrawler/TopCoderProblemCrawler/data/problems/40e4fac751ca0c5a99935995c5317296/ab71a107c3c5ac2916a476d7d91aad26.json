{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8049&rd=10957",
	"statement":"<p>You are given a String[] <b>songs</b>, each element of which represents one song and has the format &quot;BAND ALBUM SONG&quot; (quotes for clarity), where BAND, ALBUM and SONG are non-empty strings of lowercase letters, representing the band name, the album name and the song name, respectively.</p> <p>You wish to arrange all the songs into a list sorted in lexicographical order. Each song can be included in the list in one of the following 6 formats: &quot;BAND ALBUM SONG&quot;, &quot;BAND SONG ALBUM&quot;, &quot;ALBUM BAND SONG&quot;, &quot;ALBUM SONG BAND&quot;, &quot;SONG BAND ALBUM&quot;, &quot;SONG ALBUM BAND&quot;. Different songs in the list can have different formats. In other words, the format chosen for a song does not depend on the formats chosen for other songs in the list. Determine all possible 0-indexed positions of the song represented by <b>songs</b>[0] in the list. Return a int[] containing all the distinct positions in ascending order. </p>",
	"notes":[{
		"order":1,
		"val":"A String  comes before a String  lexicographically if  is a proper prefix of , or if  has a smaller character at the first position where the characters differ. Note that the space character (' ') is lexicographically smaller than the letters 'A'-'Z'."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"SongsList",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getPositions",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] getPositions(String[] songs)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {0, 1, 2 }",
			"id":0,
			"input":"{ \"beatles help yesterday\", \"queen innuendo showmustgoon\", \"eagles hotelcalifornia hotelcalifornia\" }",
			"note":"        ",
			"order":1
		},
		{
			"expect":"Returns: {0 }",
			"id":0,
			"input":"{ \"a a a\", \"b b b\", \"c c c\" }",
			"note":"",
			"order":2
		},
		{
			"expect":"Returns: {1, 3, 5 }",
			"id":0,
			"input":"{ \"b e h\", \"i i i\", \"g g g\", \"f f f\", \"d d d\", \"c c c\", \"a a a\" }",
			"note":"",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"songs will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of songs will contain between 5 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of songs will be in the format &quot;BAND ALBUM SONG&quot; (quotes for clarity), where BAND, ALBUM and SONG are non-empty sequences of lowercase letters ('a'-'z')."
		},
		{
			"order":4,
			"val":"The following property will hold for every pair of distinct songs S1 and S2 in songs: Write S1 in all 6 possible formats. Then, write S2 in all 6 possible formats. There will be no overlap between these two lists (overlap within each list is permitted). For example, songs cannot contain both &quot;a b c&quot; and &quot;c b a&quot; because &quot;c b a&quot; can be written as &quot;a b c&quot; (in &quot;SONG ALBUM BAND&quot; format)."
		}
	]
}