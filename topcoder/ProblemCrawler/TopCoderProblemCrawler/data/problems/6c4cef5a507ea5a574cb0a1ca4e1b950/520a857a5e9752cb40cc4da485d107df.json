{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=79&rd=3005",
	"statement":"<pre>Class Name: Bases\nMethod Name: adder\nParameters: String,String,int\nReturns: String\n\nImplement a class Bases, which contains a method adder.  The method takes two\nStrings as parameters representing numbers in a certain number base and an int\nthat is that base.  The method returns the sum of the numbers, also in the same\nbase.\n\nAdding numbers in bases other than 10 is similar to adding numbers in base 10.\nStart at the least significant digit, add, and carry...  There is a carry when\nthe sum is greater than or equal to the number base.\n\nThe base will be at most 16.\nFor base 16, the digits in order are:\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\nFor any base b less than 16, the digits are the first b digits in the list above.\n\nFor example, add 613.56 and 104.4 in base 7:\n\n  11\n 104.40\n 613.56\n-------\n1021.26\n(When adding the 4 and the 5 to the right of the decimal, the sum is 2 more\nthan the base, so there is a carry (1) and the sum minus the base (2) is\nwritten below...)\n\nFor example. add 1D.8 and 2.A in base 16:\n\n11\n1D.8\n02.A\n----\n20.2\n\nWhen returning the sum, all leading 0s are truncated, unless the result is 0.\nIf the result is 0, the method returns &quot;0&quot;.\nIf the fractional part is 0, the point and all 0s to its right are truncated.\nIf the fractional part is non-zero, all trailing 0s are truncated.\n\nHere is the method signature (be sure your method is public):\nString adder(String arg1, String arg2, int base)\n\nTopCoder will ensure the following:\nbase is between 2 and 16, inclusive.\narg1 and arg2 have length at least 1 and at most 50. \narg1 and arg2 correctly represent non-negative numbers in the specified base\nand contain only the characters '0' - '9' and 'A' - 'F' and '.'.\n\nNOTES:\narg1 and arg2 may or may not have a '.', fractional part, or integer part.\nThe left most digit of arg1 and arg2 is the most significant digit.  The right\nmost digit is least significant.\n\nExamples:\n*If arg1 = 102.4, arg2 = 63.23, and base=10, the method returns 165.63\n*If arg1 = 1D.EE, arg2 = D11.A12, and base=15, the method returns D30.A02\n*If arg1 = .4, arg2 = .4, and base=8, the method returns 1\n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Bases",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"adder",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String, String, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String adder(String param0, String param1, int param2)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}