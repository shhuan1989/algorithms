{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13009&rd=15844",
	"statement":"There is an n times n field. Some of the cells of the field contain water springs. You are given a map of the field encoded as a String[] <b>field</b>. There are n elements in <b>field</b> and each of them has n characters. Each character in <b>field</b> is a digit. The digit 0 represents a cell with no water. The digits 1 through 9 represent springs, and the digit is the rate at which the spring gives water. For example, the digit 5 is a spring that produces 5 units of water per unit of time.<br /><br /> <br /><br /> <br /><br /> There are 4n elephants around the field: one per each cell boundary, as shown in the pictures below. The elephants can use their trunks to drink water. Each elephant can only extend its trunk straight into the field. So, for example, the elephants that are on the left side of the field can only extend their noses towards the right. The trunks are long enough to reach the opposite end of the field. Each elephant can drink water at any rate. All water not consumed by elephants is lost.<br /><br /> <br /><br /> <br /><br /> <img src=\"http://www.topcoder.com/contest/problem/ElephantDrinking/elephant.png\" /> <br /><br /> <br /><br /> There are two additional restrictions: The trunks of elephants are not allowed to intersect. For each cell with water, there can be at most one elephant drinking from that cell.<br /><br /> <br /><br /> <br /><br /> For example, figure (a) below shows a valid configuration. Cells with water springs are blue, elephants are green, and their trunks are red. In the figure there are four elephants that drink. Figures (b) and (c) show invalid configurations. In both of them the trunks intersect.<br /><br /> <br /><br /> <br /><br /> Your task is to return the maximal total number of units of water per unit time the elephants can drink.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ElephantDrinking",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxSum",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maxSum(String[] field)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 4",
			"id":0,
			"input":"{\"00000\", \"00110\", \"01000\", \"00100\", \"00000\"}",
			"note":"This is the field shown in the figure in the problem statement. All springs have rate 1. As shown in figure (a), four elephants can drink at the same time. And as we only have four cells with water, this is clearly optimal.",
			"order":1
		},
		{
			"expect":"Returns: 16",
			"id":0,
			"input":"{\"111\", \"191\", \"111\"}",
			"note":"In the optimal solution there will be seven elephants drinking from springs with rate 1, and one elephant drinking from the central spring with rate 9. The total rate at which these elephants will consume water is 7*1 + 1*9 = 16 units per unit of time.",
			"order":2
		},
		{
			"expect":"Returns: 10",
			"id":0,
			"input":"{\"1010\", \"0011\", \"1100\", \"1111\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: 10",
			"id":0,
			"input":"{\"0011\", \"1110\", \"0111\", \"0101\"} ",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: 13",
			"id":0,
			"input":"{\"11100\", \"00100\", \"11111\", \"00100\", \"10111\"} ",
			"note":"",
			"order":5
		},
		{
			"expect":"Returns: 112",
			"id":0,
			"input":"{\"023771\", \"509514\", \"675579\", \"367472\", \"575198\", \"115281\"}",
			"note":"",
			"order":6
		},
		{
			"expect":"Returns: 148",
			"id":0,
			"input":"{}",
			"note":"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"n will be between 2 and 50, inclusive."
		},
		{
			"order":2,
			"val":"field will contain exactly n elements."
		},
		{
			"order":3,
			"val":"Each element in field will contain exactly n characters."
		},
		{
			"order":4,
			"val":"Each character in field will be a digit ('0'-'9')."
		}
	]
}