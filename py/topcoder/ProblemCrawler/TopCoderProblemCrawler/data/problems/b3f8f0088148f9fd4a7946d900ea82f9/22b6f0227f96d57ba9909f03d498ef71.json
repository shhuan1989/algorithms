{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1135&rd=4605",
	"statement":"A permutation of the letters in an alphabet can be described by a string that contains each letter exactly once. For example, CABD describes the permutation of ABCD that maps A to C, B to A, C to B, and D to D. If we repeatedly apply that permutation, we will get the sequence ABCD,CABD,BCAD,ABCD,CABD,BCAD,ABCD,... This permutation is cyclic with length 3. <p> We want to find the permutation of the first n letters of</p> <pre>    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n</pre> that has the longest cycle. Create a class Permutation that contains the method best that takes the number of characters <b>n</b> as input and returns the lexicographically first permutation that has the maximum possible cycle length. <p> &quot;Lexicographically first&quot; means the String that would sort first among all the permutations of maximum cycle length, using the ASCII sequence (which sorts uppercase letters before lowercase letters). </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Permutation",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"best",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String best(int n)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: \"ACBEFD\"",
			"id":0,
			"input":"6",
			"note":"This permutation has cycle length 6. So does BDEFCA, but ACBEFD is lexicographically first. The cycle is: ABCDEF -> ACBEFD -> ABCFDE -> ACBDEF -> ABCEFD -> ACBFDE -> ABCDEF",
			"order":1
		},
		{
			"expect":"Returns: \"BCAEFGD\"",
			"id":0,
			"input":"7",
			"note":"This is the lexicographically first permutation with cycle length 12",
			"order":2
		},
		{
			"expect":"Returns: \"BCDEAGHIJKLFNOPQRSTMVWXYZabcU\"",
			"id":0,
			"input":"29",
			"order":3
		},
		{
			"expect":"Returns: \"A\"",
			"id":0,
			"input":"1",
			"order":4
		},
		{
			"expect":"Returns: \"BCAEFGHD\"",
			"id":0,
			"input":"8",
			"order":5
		}
	],
	"constraints":[{
		"order":1,
		"val":"n is between 1 and 52 inclusive"
	}]
}