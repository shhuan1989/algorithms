{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6052&rd=9917",
	"statement":"Let S = {1, 2,..., <b>n</b>} be a set of positive integers. A <i>permutation</i> on S is a function that takes each element of S to a distinct element of S (i.e., it is one-to-one). The <i>identity permutation</i> takes each element of S to itself. Given a permutation f on S, we can ask how many times f must be applied until we arrive at the identity permutation. The smallest such positive value is called the <i>order</i> of f (i.e., the smallest positive k such that f^k = identity). For example, suppose f behaves as follows (for <b>n</b>=3): <pre>\n\t1-&gt;2, 2-&gt;1, 3-&gt;3\n</pre> Then applying f twice results in the identity permutation, since every element is taken to itself: <pre>\n    1-&gt;2-&gt;1, 2-&gt;1-&gt;2, 3-&gt;3-&gt;3\n</pre> Since applying f once is not the identity permutation, the order of f is 2. Considering all permutations on S, return how many possible orders there are.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"NumPermutationOrders",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"howMany",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long howMany(int n)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"1",
			"note":"Here the only permutation is the identity.",
			"order":1
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"2",
			"note":"Here there are two possible permutations: the identity (order 1), and the permutation that swaps 1 and 2 (order 2).",
			"order":2
		},
		{
			"expect":"Returns: 3",
			"id":0,
			"input":"3",
			"note":"Here there are 3! = 6 possible permutations: the identity (order 1), 3 permutations that swap two elements (order 2), and 2 permutations that do not fix any element (order 3).",
			"order":3
		},
		{
			"expect":"Returns: 4",
			"id":0,
			"input":"4",
			"order":4
		},
		{
			"expect":"Returns: 16",
			"id":0,
			"input":"10",
			"order":5
		}
	],
	"constraints":[{
		"order":1,
		"val":"n will be between 1 and 1000, inclusive."
	}]
}