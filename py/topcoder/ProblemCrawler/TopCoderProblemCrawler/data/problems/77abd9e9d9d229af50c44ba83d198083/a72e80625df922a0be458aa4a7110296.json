{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=4487&rd=7220",
	"statement":"You are playing a card game in which large <i>flushes</i>, or sets of cards of the same suit, are beneficial. Your next move is to draw <b>number</b> cards: the larger the flush you get, the better. You wish to know the expected size of the largest flush in the cards you draw. The deck will consist of some number of cards of four suits, given as <b>suits</b>. The <i>i</i>th element of <b>suits</b> is the number of cards of that suit in the deck. Return a double, the expected size of the largest flush your hand will make.<br /><br /><br /><br /> The expected size of the largest flush is calculated as follows: For each possible hand, multiply the size of the largest flush in that hand by the probability of getting that hand. Then add all of these values together to get the expected size of the largest flush. For example, if half of the possible hands give you a flush of size 3, and the rest give you one of size 2, the expected value is (0.5 * 3) + (0.5 * 2) = 2.5. Also, recall that there are <tt>n Choose k = n!/k!/(n-k)!</tt> ways to select k cards of one suit out of a total of n cards in that suit, where ! denotes the factorial operation. Thus, if <tt><b>suits</b> = {3,3,3,3}</tt>, then there are <tt>(3 Choose 3) * (3 Choose 2) * (3 Choose 1) * (3 Choose 0) = 1 * 3 * 3 * 1 = 9</tt> ways to get 3 cards of the first suit, 2 of the second, 1 of the third, and none of the fourth. ",
	"notes":[
		{
			"order":1,
			"val":"Look out for overflow! A 32-bit datatype may not be large enough."
		},
		{
			"order":2,
			"val":"Your return value must have an absolute or relative error less than 1e-9."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Flush",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"size",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double size(int[] suits, int number)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"{2,2,2,2}",
			"note":"Draw the first card; you have a 1 out of 7 chance to draw the matching suit for your second card. The expected size is thus (1/7 * 2) + (6/7 * 1) = 8/7 = 1.1428571428571428.",
			"order":1
		},
		{
			"expect":"22",
			"id":0,
			"input":"{1,4,7,10}",
			"note":"You are drawing all of the cards, so your largest flush will be of size 10.",
			"order":2
		},
		{
			"expect":"49",
			"id":0,
			"input":"{13, 13, 13, 13}",
			"note":"If you get 12 cards of each suit, you must have drawn 48 cards, so drawing 49, 50, 51, or 52 cards must give you a flush of size 13.",
			"order":3
		},
		{
			"expect":"26",
			"id":0,
			"input":"{13, 13, 13, 13}",
			"order":4
		},
		{
			"expect":"0",
			"id":0,
			"input":"{13,13,13,13}",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"suits will contain exactly four elements."
		},
		{
			"order":2,
			"val":"Each element of suits is between 0 and 13, inclusive."
		},
		{
			"order":3,
			"val":"number is between 0 and the sum of the elements of suits, inclusive."
		}
	]
}