{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13747&rd=16416",
	"statement":"<p> Charlie has N pancakes. He wants to serve some of them for breakfast. We will number the pancakes 0 through N-1. For each i, pancake i has width i+1 and deliciousness <b>d</b>[i]. </p> <p> Charlie chooses the pancakes he is going to serve using the following randomized process: He starts by choosing the first pancake uniformly at random from all the pancakes he has. He places the chosen pancake onto a plate. This pancake now forms the bottom of a future stack of pancakes. Then, Charlie repeats the following procedure: </p>\n <ol> \n  <li>If there are no more pancakes remaining, terminate.</li> \n  <li>Choose a pancake uniformly at random from the pancakes that have not been chosen yet.</li> \n  <li>If the width of this pancake is greater than the width of the pancake on top of the stack, terminate without taking it.</li> \n  <li>Place the chosen pancake on top of the stack and go back to step 1.</li> \n </ol> <p></p> <p> You are given the int[] <b>d</b> with N elements. The total deliciousness of a serving of pancakes is the sum of the deliciousness of all pancakes used in the serving. Compute and return the expected value of the total deliciousness of the pancakes chosen by Charlie. </p>",
	"notes":[{
		"order":1,
		"val":"Your return value must have an absolute or relative error smaller than or equal to 1e-6"
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"RandomPancakeStack",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"expectedDeliciousness",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double expectedDeliciousness(int[] d)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1.6666666666666667",
			"id":0,
			"input":"{1,1,1}",
			"note":"The following scenarios may occur:  Summing this up, we get the expected deliciousness to be 1/3 * (1) + 1/3 * (1/2 * 1 + 1/2 * 2) + 1/3 * (1/2 * 2 + 1/2 * 3) = 5/3 = 1.666...",
			"order":1
		},
		{
			"expect":"Returns: 9.891666666666667",
			"id":0,
			"input":"{3,6,10,9,2}",
			"note":"",
			"order":2
		},
		{
			"expect":"Returns: 10.999999724426809",
			"id":0,
			"input":"{10,9,8,7,6,5,4,3,2,1}",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: 7.901100088183421",
			"id":0,
			"input":"{1,2,3,4,5,6,7,8,9,10}",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: 19.368705050402465",
			"id":0,
			"input":"{2,7,1,8,2,8,1,8,2,8,4,5,90,4,5,2,3,5,60,2,8,74,7,1}",
			"note":"",
			"order":5
		},
		{
			"expect":"Returns: 1.718281828459045",
			"id":0,
			"input":"{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"The number of elements in d will be between 1 and 250, inclusive."
		},
		{
			"order":2,
			"val":"Each element of d will be between 1 and 1,000, inclusive."
		}
	]
}