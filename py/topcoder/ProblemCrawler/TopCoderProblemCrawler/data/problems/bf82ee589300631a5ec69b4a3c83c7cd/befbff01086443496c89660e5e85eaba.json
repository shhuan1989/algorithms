{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=59&rd=3002",
	"statement":"<pre>Class name:  Population\nMethod name:  getPop\nparameters:  int,String[]\nreturns: int\n\nImplement a class Population, which contains a method getPop.  getPop simulates\nthe building and abandoning of living quarters in a city.  It takes as\nparameters an int that is the number of years to run the simulation and a\nString[] of coordinates representing the initial locations of living quarters\nwithin the city.  getPop returns the number of living quarters in the city\nafter the specified number of years.\n\nThe city is a 10x10 grid.  Each square in the grid can contain 0 or 1 living\nquarters.  The squares are referred to by coordinates of the form (int,int)\nwhere the first int ranges from 0 to 9 and represents the North/South position\nand the second int ranges from 0 to 9 and represents the East/West position.\nEach square can have up to 8 neighbors (i.e. north, south, east, west,\nnorth-west, north-east, south-west, and south-east).\n\nThe program should simulate the building and abandoning of the living quarters\nbased on the following rules:\n1.   Each living quarter that starts a year with two or three neighboring\nquarters lasts the year.\n2.   Each living quarter that starts a year with four or more neighbors is\nabandoned (disappears) due to over-population during the year.\n3.   Each living quarter that starts a year with one or zero neighbors is\nabandoned (disappears) due to isolation during the year.\n4.   Each empty location that starts a year adjacent to exactly three neighbors\nwill have a living quarter built on it during the year.\n\nThe method signature is:\npublic int getPop(int years, String[] locations);\n\n-years ranges from 0 to 10, inclusive.\n-location consists of strings of the form &quot;int,int&quot; where both ints range from\n0 to 9, inclusive.  &quot;3,2&quot; is an example of a valid element.  &quot;2.3 , 3.1&quot; is not\nvalid because there are spaces and non-integers.  location has from 0 to 100\nelements, inclusive.  Duplicate elements are ignored.\n-Duplicates in locations should be ignored.\n\nNote:\n-If the input year is 0, the method should return the initial population.\n\nExample (the quotes in the String[] below are for clarification, and should not\nbe part of your input):\n-if years=3 and locations={&quot;5,4&quot;,&quot;4,5&quot;,&quot;6,6&quot;,&quot;6,7&quot;,&quot;5,5&quot;,&quot;4,4&quot;}\n After year 1, there are living quarters at: {&quot;4,4&quot;,&quot;4,5&quot;,&quot;5,4&quot;,&quot;6,5&quot;,&quot;6,6&quot;}\n After year 2: {&quot;4,4&quot;,&quot;4,5&quot;,&quot;5,4&quot;,&quot;5,6&quot;,&quot;6,5&quot;}\n After year 3: {&quot;4,4&quot;,&quot;4,5&quot;,&quot;5,4&quot;,&quot;5,6&quot;,&quot;6,5&quot;}\n And the method should return 5.\n-if years=4 and locations={&quot;0,0&quot;,&quot;1,0&quot;,&quot;0,1&quot;}, the method should return 4.\n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Population",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getPop",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getPop(int param0, String[] param1)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}