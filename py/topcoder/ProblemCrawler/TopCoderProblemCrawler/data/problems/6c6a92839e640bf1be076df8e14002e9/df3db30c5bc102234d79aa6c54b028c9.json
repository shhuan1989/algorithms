{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=12496&rd=15495",
	"statement":"John and Brus play a game with a number. The game starts with a positive integer <b>n</b>. The two players take alternating turns, John starts. Each move looks as follows: Let C be the current value of the integer. The current player has to choose a positive divisor of the number C, other than 1 and C. Once he chooses the divisor, he has to subtract it from C. The result is the new number with which the other player now starts his move. If a player cannot make a valid move, he loses the game. <br /><br /><br /><br /> For example, if they start with <b>n</b>=15, one possible gameplay can look as follows: \n <ul> \n  <li>John takes the number 15, chooses its divisor 3, and decreases the number to 15-3 = 12.</li> \n  <li>Brus takes the number 12, chooses its divisor 4, and decreases the number to 12-4 = 8.</li> \n  <li>John takes the number 8, chooses its divisor 2, and decreases the number to 8-2 = 6.</li> \n  <li>Brus takes the number 6, chooses its divisor 3, and decreases the number to 6-3 = 3.</li> \n  <li>John takes the number 3, and as there are no divisors other than 1 and 3, he has no valid move and thus he loses the game.</li> \n </ul> <br /><br /><br /><br /> You are given the long <b>n</b>. Assume that both players use the optimal strategy while playing the game. Return &quot;John&quot; (quotes for clarity) if John wins the game and &quot;Brus&quot; otherwise. ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TheNumberGameDivOne",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"find",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"long",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String find(long n)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: \"John\"",
			"id":0,
			"input":"6",
			"note":"John has two possible moves: either decrease 6 by 2 or decrease 6 by 3. If he chooses the second option, Brus will have no possible moves, hence John will win the game.",
			"order":1
		},
		{
			"expect":"Returns: \"Brus\"",
			"id":0,
			"input":"2",
			"note":"",
			"order":2
		},
		{
			"expect":"Returns: \"Brus\"",
			"id":0,
			"input":"747",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: \"Brus\"",
			"id":0,
			"input":"128",
			"note":"",
			"order":4
		}
	],
	"constraints":[{
		"order":1,
		"val":"n will be between 1 and 10^18, inclusive."
	}]
}