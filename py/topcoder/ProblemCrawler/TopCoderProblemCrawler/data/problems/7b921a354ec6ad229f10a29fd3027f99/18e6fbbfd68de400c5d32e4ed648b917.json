{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13515&rd=16187",
	"statement":"Consider a tree with V vertices labeled 0 through V-1. A bijective function f from {0, ..., V-1} to {0, ..., V-1} is called an automorphism of this tree if for any u and v, vertices u and v are directly connected by an edge if and only if vertices f(u) and f(v) are directly connected by an edge. In other words, an automorphism is any permutation of vertex labels such that after the permutation the tree looks the same as in the beginning. (Note that there is always at least one automorphism: the identity function.) <br /><br /> <br /><br /> Cat Snuke became <b>age</b> years old today. You want to give him a birthday present that has something to do with his age. As he likes trees, you decided to give him a tree with exactly <b>age</b> automorphisms. Due to your budget you can only buy him a tree that contains between 1 and 200 vertices, inclusive. <br /><br /> <br /><br /> You are given the long <b>age</b>. Find a tree that matches the above requirements and return a int[] with its description in the format specified below. If there are many such trees, you may return any of them. If there are no such trees, return an empty int[] instead. <br /><br /> <br /><br /> Given that you want to return a tree with V vertices, you should return a int[] X with exactly 2V-1 elements: the number of vertices, followed by the list of edges. More precisely: X[0] should be V. For each edge in your tree, there must be an i between 0 and V-2, inclusive, such that X[2*i+1] and X[2*i+2] are the endpoints of that edge. Note that V must be between 1 and 200, inclusive.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"AutomorphicTree",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"construct",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"long",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] construct(long age)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {1 }",
			"id":0,
			"input":"1",
			"note":"A tree with only one vertex.",
			"order":1
		},
		{
			"expect":"Returns: {6, 0, 1, 1, 2, 3, 4, 4, 5, 4, 1 }",
			"id":0,
			"input":"8",
			"note":"The return value describes the following tree with 6 vertices:  We can easily verify that it has exactly 8 automorphisms.",
			"order":2
		},
		{
			"expect":"Returns: { }",
			"id":0,
			"input":"1000000000000000000",
			"note":"",
			"order":3
		}
	],
	"constraints":[{
		"order":1,
		"val":"age will be between 1 and 10^18, inclusive."
	}]
}