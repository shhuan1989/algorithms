{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6861&rd=10132",
	"statement":"We are designing an Amazing Race course. Contestants will travel back and forth between various cities. We want to choose the required sequence of cities so that the total effort of a contestant is as close as possible to 1000. <p> The total effort of a contestant is the sum of the effort for each city-to-city trip, but the effort for a trip depends on how tired the contestant is. Let effort(c1,c2) be the effort required to travel from city c1 to city c2 when a contestant is fresh. We estimate that if the contestant has already completed k trips then the effort required for a trip from city c1 to city c2 is</p><pre>\n                 factor<sup>k</sup> *  effort(c1,c2)</pre> where factor is a fixed value &gt;= 1. <p> Create a class Amazing that contains a method totalE that is given <b>factor</b>, <b>numTrips</b>, and a String[] <b>effort</b>. Each element of effort contains a single space separated list of integers. The jth integer in the ith element of effort is effort(ci,cj). Your method should find the race course with exactly <b>numTrips</b> trips that comes closest to requiring a total effort of 1000, and return the absolute difference between that total effort and 1000. </p><p> A trip may go from a city to itself, and effort(ci,ci) is not necessarily 0. </p> ",
	"notes":[{
		"order":1,
		"val":"Your return value must have an absolute or relative error less than 1e-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Amazing",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"totalE",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"double, int, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double totalE(double factor, int numTrips, String[] effort)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"1.0",
			"note":" One course requires contestants to start in city 1, then travel to city 2, and then back to city 1. The total effort would be 1001. The only other equally good course would be to start in city 2, then travel to city 1 and then back to city 2. ",
			"order":1
		},
		{
			"expect":"2",
			"id":0,
			"input":"2.0",
			"note":" Now that the tiredness factor is 2.0, the courses from the previous example would require too much effort (1101 and 1902 respectively). The best course would be to start at city 1, go to city 2 at an effort of 901 and then to city 0 with an additional effort of 2.0*35 giving a total of 971.",
			"order":2
		},
		{
			"expect":"10",
			"id":0,
			"input":"1.3",
			"note":"",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"factor will be between 1.0 and 2.0, inclusive."
		},
		{
			"order":2,
			"val":"numTrips will be between 1 and 10, inclusive."
		},
		{
			"order":3,
			"val":"effort will contain n elements where n is between 1 and 10, inclusive."
		},
		{
			"order":4,
			"val":"Each element of effort will contain exactly n non-negative integers separated by single spaces."
		},
		{
			"order":5,
			"val":"Each element of effort will contain no leading spaces and no trailing spaces."
		},
		{
			"order":6,
			"val":"Each integer in each element of effort will be between 0 and 1000, inclusive, and contain no leading zeroes."
		}
	]
}