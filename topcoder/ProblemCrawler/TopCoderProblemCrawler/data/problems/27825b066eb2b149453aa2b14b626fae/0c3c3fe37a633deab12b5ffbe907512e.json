{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=10486&rd=13751",
	"statement":"I love music and listen to it all the time. I have a huge amount of songs and often it's easy just to listen to them shuffled rather than to choose a song every time. But I listen to different genres of music and some of them are incompatible (for example, it's quite uncomfortable if some calm classic track is succeeded by a loud noisy song). So I wrote a program which performs the shuffled playback according to some rules. <br /><br /><br /><br /> Speaking formally, I have defined several genres and ascribed each of the songs to one specific genre. I have also defined which genres are compatible, i.e. can be listened to in immediate succession and which are not. The j-th character of the i-th element of String[] <b>transitions</b> is 'Y' if a song of genre i can be succeeded by a song of genre j, and is 'N' otherwise. My program works in the following way: it randomly chooses the first song to play. When the track finishes, the next song is chosen from the set of all songs of compatible genre(s), and so on. The same song may be played several times and it might even happen that the same song is played several times in a row. <br /><br /><br /><br /> You're given String[] <b>songs</b>. Concatenate the elements of <b>songs</b> to obtain a list of the songs. The list will be formatted as a comma-separated list of space-separated pairs of integers, the first of them denoting the genre of the song and the second one denoting its length in minutes. Count the number of different song sequences which might be played using my program and are between <b>minLength</b> and <b>maxLength</b> (both inclusive) minutes long, and return it modulo 600,921,647.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ShuffledPlaylist",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"count",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String[], int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int count(String[] songs, String[] transitions, int minLength, int maxLength)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"YY\",\"YY\"}",
			"id":0,
			"input":"{\"0 3,1 2,0 2\"}",
			"note":"If we enumerate the songs from 0 to 2, then the 7 possible song sequences are: {0},{1},{2},{1,1},{1,2},{2,1},{2,2}. ",
			"order":1
		},
		{
			"expect":"{\"YN\",\"NY\"}",
			"id":0,
			"input":"{\"0 3,1 2,0 2\"}",
			"note":"This time, the genres are incompatible, so the sequences {1,2} and {2,1} are not allowed any more. ",
			"order":2
		},
		{
			"expect":"{\"YYY\",\"NYY\",\"NNY\"}",
			"id":0,
			"input":"{\"0 9\",\",1 8,\",\"2 3,2 5\"}",
			"note":"The sequences are: {0},{1},{2,2},{2,2,2},{3},{2,3},{3,2}. ",
			"order":3
		},
		{
			"expect":"{\"YYYYYYY\",\"YYYYYYY\",\"YYYYYYY\",\"YYYYYYY\",\"YYYYYYY\",\"YYYYYYY\",\"YYYYYYY\"} ",
			"id":0,
			"input":"{\"0 8,\",\"5 6,2\",\" 2,2 3,6 8,5 8,5 3,0 6,0 7,6 5,3 2\", \",0 9,2 3,3 4,5 4,3 3,3 3,2 8,2 9,5 7,2 8,0 1,5 9,1\", \" 8,2 9,1 6,3 6,2 6,0 4,6 3,1 5,2 7,4 5,3 3,0\", \" 5,6 1,5 6,4 8,5 9,1 4,2 9,5 6,5 6,0 8,3 5,4 6,0 3\", \",4 2,5 6,6 2,4 3,1 3,6 3,0 8,2 8,3 7,4 2,0 7,0 2,1\", \" 3,4 7,6 3,6 4,3 9,0 2,0 7,0 8,6 4,1 3,2 5,0 6,5 4\", \",3 2,3 2,1 5,2 1,5 2,4 8,0 5,1\",\" \",\"7,2 6,5 7\",\",\", \"6 9,5 5,\",\"4 2\",\",4\",\" 9,0 5,4 8,6 5,5 9,5 8,3 \",\"2\", \",5 \",\"6,2 3,0 7,1 7,\",\"2 1,0 4\",\",2 9\",\",\",\"3\",\" \",\"4\"} ",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"transitions will contain exactly n elements, where n is between 1 and 9, inclusive."
		},
		{
			"order":2,
			"val":"Each element of transitions will contain exactly n characters."
		},
		{
			"order":3,
			"val":"transitions will contain only 'N' and 'Y' characters."
		},
		{
			"order":4,
			"val":"For each i between 0 and n-1, the i-th character of the i-th element of transitions will be 'Y'."
		},
		{
			"order":5,
			"val":"songs will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":6,
			"val":"Each element of songs will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":7,
			"val":"The concatenation of the elements of songs will be a comma-separated list of space-separated pairs of integers."
		},
		{
			"order":8,
			"val":"The first integer of each pair will be between 0 and n-1, inclusive, with no extra leading zeroes."
		},
		{
			"order":9,
			"val":"The second integer of each pair will be between 1 and 9, inclusive, with no leading zeroes."
		},
		{
			"order":10,
			"val":"minLength will be between 1 and 1,000,000,000, inclusive."
		},
		{
			"order":11,
			"val":"maxLength will be between minLength and 1,000,000,000, inclusive."
		}
	]
}