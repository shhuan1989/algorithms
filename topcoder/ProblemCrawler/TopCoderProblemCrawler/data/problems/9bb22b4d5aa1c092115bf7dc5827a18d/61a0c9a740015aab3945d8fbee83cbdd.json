{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=5903&rd=9810",
	"statement":"<p> A musician has composed several melody fragments and wants you to make a program to create a complete melody by appending those fragments. A fragment is described as a sequence of key jumps on a piano keyboard. A piano keyboard looks like this:</p> <p></p>\n <center> \n  <img src=\"http://www.topcoder.com/contest/problem/CMajor/CMajor1.png\" /> \n </center> <p></p> <p> For instance, to go from the leftmost C key to the F key, a jump of 5 keys is needed (note that the black keys are counted), and to go back requires a jump of -5 keys. A fragment does not specify a starting position. It could be &quot;2 3 -1&quot; meaning that after the initial key we should move two keys to the right, then three and finally one to the left.</p> <p> But there is a problem: the musician has set the restriction that the resulting melody must not use (including the starting position) black keys. Then, the fragment shown above could be used either starting on a G key (and then A, C and B) or starting on a C key (and then D, F and E). Each fragment can be used only once in the melody and cannot be used partially.</p> <p>You are given a String[] <b>fragments</b>, the melody fragments, and you must return the number of fragments in the longest melody that can be created by appending those fragments.</p>",
	"notes":[{
		"order":1,
		"val":"Assume that the piano keyboard is infinite."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CMajor",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getLongest",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getLongest(String[] fragments)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"2 2 1 2 2 2 1\",\"2 1 2 2 2 1 2\"}",
			"note":"The first fragment can only be played starting from C and ending on the next C, and the second fragment can only be played starting from D and ending on the next D. Therefore, they cannot be appended.",
			"order":1
		},
		{
			"expect":"Returns: 19",
			"id":0,
			"input":"{\"2\",\"2\",\"1\",\"2\",\"2\",\"2\",\"1\",\"2\",\"2\",\"1\",\"2\",\"2\",\"2\",\"1\",\"2\",\"2\",\"1\",\"2\",\"2\"}",
			"note":"All these fragments can be played in order starting from a C key.",
			"order":2
		},
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"2 2 2 2\",\"1 1\",\"5 -4 12 -11\",\"0 2 -2 5 -1 -4 2 -2 7 -2\"}",
			"note":"The only fragment that can be played, without using black keys, is the last one.",
			"order":3
		},
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"2 0 2 0 -2 -2 -1 5 1 2 2 2 1\"}",
			"order":4
		},
		{
			"expect":"Returns: 4",
			"id":0,
			"input":"{\"5748 -4385 -790 5294 3349\",\"-3279 -1783 3768 -2459 6066 2556 -8138 -4982 1435\", \"2951\",\"-2405 2104 3756\",\"5578 -5040 -9497 -4868 7407 9305 -6701\", \"-3339 9514 -787 7209 7467 -4467\", \"7496 3011 9941 -8340 3012\"}",
			"order":5
		},
		{
			"expect":"Returns: 19",
			"id":0,
			"input":"{\"72\",\"1872\",\"8916\",\"-288\",\"2208\",\"-4716\",\"2328\",\"9516\", \"-5472\",\"9840\",\"6420\",\"3492\",\"-1608\",\"4176\",\"264\",\"-6264\", \"1176\",\"-684\",\"3984\"}",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"fragments will contain between 1 and 19 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of fragments will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of fragments will be a list of integers, each separated by a single space, with no additional leading or trailing spaces."
		},
		{
			"order":4,
			"val":"Each integer in fragments will be between -10000 and 10000, inclusive, with no leading zeros."
		}
	]
}