{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=4834&rd=8098",
	"statement":"On your previous quest you acquired a priceless &quot;infinite sack&quot;. This wondrous piece of luggage will hold an endless number of items but there is a catch. The last item you put in is the first one that comes out. Accounting for this restriction, you plan your next journey.<br /><br /> <br /><br /> You begin at location 0, your home. Element <i>k</i> of <b>dests</b> is a space-separated list of locations that can be reached from location <i>k</i>. For each listed location <i>j</i>, element <i>k</i> of <b>trades</b> contains a 2-letter code NG. N is a character describing which item is needed to make the trip from location <i>k</i> to location <i>j</i>. G is also a character, and describes the item you will acquire by taking the trip. At least one of N or G will be '_', meaning you do not need an item, or do not acquire an item for the trip, respectively. For example, suppose element 3 of <b>dests</b> and <b>trades</b> are as given below. <pre>\n<b>dests</b>[3]  = &quot;0 3 0 4&quot;\n<b>trades</b>[3] = &quot;a_ __ _B D_&quot;\n</pre> One possible way to get from location 3 to location 0 requires item 'a' and earns you nothing. Another requires no item but you find item 'B'. The trip that returns to location 3 requires no item but also earns no item. Lastly, the trip to location 4 requires 'D', but produces nothing.<br /><br /> <br /><br /> You can only take a trip that requires the next item you can pull out of your sack. Trips that require no item can always be taken. For example, to take the &quot;a_&quot; trip mentioned above, the next item that you pull out of your sack would have to be 'a'. This item is removed. You will return a int[] containing the locations that can be reached via 0 or more trips from location 0. It should be sorted in strictly increasing order. Since we allow 0 trips, the first element will always be 0. Your sack is initially empty, so no item can be pulled out. ",
	"notes":[{
		"order":1,
		"val":"The only transactions that can be made with your sack are the ones that correspond to trips."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"SackJourney",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"canReach",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] canReach(String[] dests, String[] trades)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"_A\",\"A_\",\"\"}",
			"id":0,
			"input":"{\"1\",\"2\",\"\"}",
			"note":"We can get to location 1 with 'A' in our sack. Removing this 'A', we can travel to location 2.",
			"order":1
		},
		{
			"expect":"{\"_A\",\"b_\",\"\"}",
			"id":0,
			"input":"{\"1\",\"2\",\"\"}",
			"note":"Unlike the first example, we cannot get to location 2 since we need a 'b'.",
			"order":2
		},
		{
			"expect":"{\"_A _B __\",\"B_\",\"A_\",\"__\",\"C_\",\"\"}",
			"id":0,
			"input":"{\"0 0 1\",\"2\",\"3\",\"4\",\"5\",\"\"}",
			"order":3
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"dests will contain between 2 and 20 elements inclusive."
		},
		{
			"order":2,
			"val":"trades will contain the same number of elements as dests."
		},
		{
			"order":3,
			"val":"Each element of dests will contain between 0 and 50 characters inclusive."
		},
		{
			"order":4,
			"val":"Each element of trades will contain between 0 and 50 characters inclusive."
		},
		{
			"order":5,
			"val":"Each element of dests will be a single-space separated list of integers with no extra leading zeros."
		},
		{
			"order":6,
			"val":"Each integer in dests will be between 0 and N-1, where N is the number of elements in dests."
		},
		{
			"order":7,
			"val":"Each element of trades will be a single-space separated list of 2 character sequences. Each character will be a letter ('A'-'Z','a'-'z') or an underscore ('_'). At least one of the characters in each sequence will be an underscore."
		},
		{
			"order":8,
			"val":"Each element of trades will contain the same number of 2 character sequences as the corresponding element of dests contains integers."
		}
	]
}