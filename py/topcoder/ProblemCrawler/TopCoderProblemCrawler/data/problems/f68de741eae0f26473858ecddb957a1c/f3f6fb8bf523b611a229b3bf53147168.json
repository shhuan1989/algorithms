{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=10335&rd=13759",
	"statement":"<b>M</b> integers are randomly independently chosen from the interval <b>lowerBound</b>...<b>upperBound</b>, inclusive. Return the probability that the <b>K</b>-th smallest element of the generated set is equal to <b>N</b>. <b>K</b>=1 refers to the smallest element, <b>K</b>=2 refers to the second smallest element, and so on. ",
	"notes":[{
		"order":1,
		"val":"The returned value must have an absolute or relative error less than 1e-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"KthProbableElement",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"probability",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double probability(int M, int lowerBound, int upperBound, int N, int K)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"1",
			"id":0,
			"input":"1",
			"note":"The probability that the only chosen number will be equal to 3 is 0.1.",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"3",
			"note":"There are 8 ways to choose 3 numbers from the interval 1..2:  Exactly 4 of the ways have the 2nd smallest element equal to 2.",
			"order":2
		},
		{
			"expect":"1",
			"id":0,
			"input":"3",
			"note":"There are 27 ways to choose 3 numbers from the interval 1..3, 13 of them have the 2nd smallest element equal to 2.",
			"order":3
		},
		{
			"expect":"1",
			"id":0,
			"input":"10",
			"note":"Only one of 10 ways to choose 10 numbers from the interval 1..10 has 1 as the 10th smallest element.",
			"order":4
		},
		{
			"expect":"61",
			"id":0,
			"input":"4",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"M will be between 1 and 100, inclusive."
		},
		{
			"order":2,
			"val":"lowerBound will be between 1 and 1000, inclusive."
		},
		{
			"order":3,
			"val":"upperBound will be between lowerBound and 1000, inclusive."
		},
		{
			"order":4,
			"val":"N will be between lowerBound and upperBound, inclusive."
		},
		{
			"order":5,
			"val":"K will be between 1 and M, inclusive."
		}
	]
}