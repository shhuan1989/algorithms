{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11478&rd=14539",
	"statement":"<p>Magical Girls are girls who have magical powers. They fight against evil witches to protect the Earth.</p> <br /><br /> <p>You, one of the Magical Girls, are now fighting against an evil witch. You want to use ultimate magic to defeat the witch. To use ultimate magic you have to chant a magical spell. The spell is determined with a sequence A.</p> <br /><br /> <p>A is the sequence of strings which is determined with a sequence <b>first</b>. Each element of <b>first</b> is a string which contains only '0' and '1'. Let K be the number of elements of <b>first</b>. Each element of A is defined as follows:</p> <br /><br /> \n <ul> \n  <li>for all i, 0 &lt;= i &lt; K, A[i] = <b>first</b>[i].</li> \n  <li>Otherwise, A[i] = A[i-1] + A[i-K-1] + A[i-2K-1] + ... (while i-m*K-1 is not less than 0). Here operator '+' denotes concatenation of strings.</li> \n </ul> <br /><br /> <p>You are given three integers <b>n</b>, <b>lo</b> and <b>hi</b>. Let S be the substring of A[<b>n</b>] from <b>lo</b> to <b>hi</b>, inclusive. That is, S = A[<b>n</b>][<b>lo</b>..<b>hi</b>] where both <b>lo</b> and <b>hi</b> are 0-based indices into A[<b>n</b>]. The spell you have to chant is S and the power of the magic is equal to the length of the longest contiguous substring of S which contains only '1' characters. If S contains only '0' characters, then the power of the magic is equal to 0. Return the power of the ultimate magic.</p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MagicalGirlLevelThreeDivOne",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"theMaxPower",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int, long, long",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long theMaxPower(String[] first, int n, long lo, long hi)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"4",
			"id":0,
			"input":"{\"111\", \"011\"}",
			"note":"A[2] = \"011\", A[3] = \"011111\", A[4] = \"011111011\" S = A[4][2..7] = \"111101\" ",
			"order":1
		},
		{
			"expect":"123456789",
			"id":0,
			"input":"{\"1\", \"11\", \"111\"}",
			"note":"",
			"order":2
		},
		{
			"expect":"987654321",
			"id":0,
			"input":"{\"0\", \"00\", \"000\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"314159265",
			"id":0,
			"input":"{\"1110\", \"11\", \"11111\", \"111\", \"1\"}",
			"note":"",
			"order":4
		},
		{
			"expect":"1000000000",
			"id":0,
			"input":"{\"10000\", \"011011001011000001101000010100000111000110110\", \"000001010001011000001101110\", \"100100000110100001010000\", \"011011010\", \"01100000010101101110000011100011001000\", \"0001010\", \"010011000\", \"000101001\", \"00\", \"1\"}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"first will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of first will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of first will consist of '0' (zero) and '1' (one)."
		},
		{
			"order":4,
			"val":"n will be between 0 and 1,000,000,000, inclusive."
		},
		{
			"order":5,
			"val":"hi will be between 0 and min{1,000,000,000,000,000 (10^15), (length of A[n])-1}, inclusive."
		},
		{
			"order":6,
			"val":"lo will be between 0 and hi, inclusive."
		}
	]
}