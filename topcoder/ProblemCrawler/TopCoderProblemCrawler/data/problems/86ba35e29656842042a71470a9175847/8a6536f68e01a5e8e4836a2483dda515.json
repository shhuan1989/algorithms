{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6641&rd=10735",
	"statement":"<p> You wish to impress your friends by memorizing several thousand digits of pi. You believe it is easiest to memorize groups of 3 or 4 digits at a time, and decide on the following rules for assigning a complexity value to any group of digits: </p> <pre>\n\n    all digits equal                   (&quot;333&quot; or &quot;0000&quot;, but not &quot;2233&quot;): 1\n    powers of 2, with no leading zeros (&quot;512&quot; or &quot;4096&quot;, but not &quot;0064&quot;): 2\n    consecutive ascending digits       (&quot;012&quot; or &quot;5678&quot;, but not &quot;1357&quot;): 4\n    consecutive descending digits      (&quot;987&quot; or &quot;3210&quot;, but not &quot;1098&quot;): 5\n    first and last digits equal        (&quot;858&quot; or &quot;1761&quot;, but not &quot;8882&quot;): 7\n    any two digits equal               (&quot;655&quot; or &quot;0777&quot;, but not &quot;9753&quot;): 8\n    all other groups                   (&quot;832&quot; or &quot;2049&quot;                ): 10\n</pre> <p> A group of digits should be assigned the lowest complexity value of the rules it matches. For example, the group &quot;777&quot; matches two rules (all digits equal and first and last digit equal), and it is assigned a complexity value of 1. </p> <p> You are to write a method that takes a string of digits and breaks them up into groups of 3 or 4 such that the sum of the complexities for all the groups is minimized. </p> <p> For example, the string of digits &quot;2562222567&quot; could be broken up into either &quot;256 222 2567&quot; with a complexity of 2+1+10=13, &quot;256 2222 567&quot; with a complexity of 2+1+4=7, or &quot;2562 222 567&quot; with a complexity of 7+1+4=12. The lowest of these three values is 7, so the correct answer is &quot;256 2222 567&quot;. </p> <p> The input will be provided as a String[] <b>digits</b>. Each element of <b>digits</b> will contain only digits ('0' - '9', inclusive). Use the concatenation of all elements as the input to your method. You are to return the same digits as a String[], with a single space inserted between adjacent groups in the same element. Each element can contain a maximum of 100 characters. When populating the String[], put as many groups as possible in the current element before starting a new one. A single group may not span multiple elements, and elements must not contain leading or trailing spaces. </p> <p> There may be multiple ways to segment the string of digits that result in the same difficulty. Given two such segmentations, consider the first group at which they differ, and select the segmentation with the three-digit group over the one with the four-digit group. For example, the digits &quot;2222225555555&quot; could be segmented as &quot;222 222 555 5555&quot; or &quot;222 222 5555 555&quot;, each with a difficulty of 4. The first difference is the third group, so we select the first choice because its third group has 3 digits. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MemorizingPi",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"segmentation",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String[] segmentation(String[] digits)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {\"256 2222 567\" }",
			"id":0,
			"input":"{ \"2562222567\" }",
			"note":"This is the first example from the problem statement.",
			"order":1
		},
		{
			"expect":"Returns: {\"222 222 555 5555\" }",
			"id":0,
			"input":"{ \"2222\", \"2\", \"25\", \"555\", \"555\" }",
			"note":"This is the second example from the problem statement.",
			"order":2
		},
		{
			"expect":"Returns: {\"3141 5926 535 8979 3238 4626 433 832 7950 2884 1971 6939 9375 1058 2097 4944 5923 0781 6406 2862\", \"0899 8628 0348 2534 2117 0679 8214 8086 5132 8230 6647 0938 4460 9550 5822 3172 5359 4081 2848 111\", \"7450 2841 0270 1938 5211 0555 9644 6229 4895 4930 3819 6442 8810 9756 6593 3446 128 475 6482 3378\", \"678 3165 2712 0190 914 5648 5669 234 6034 8610 454 3266 4821 3393 6072 6024 9141 2737 2458 7006 6063\", \"1558 8174 8815 2092 0962 8292 5409 1715 3643 678 9259 0360 0113 3053 054 8820 4665 2138 4146 9519\", \"4151 1609\" }",
			"id":0,
			"input":"{ \"31415926535897932384626433832795028841971693993751\", \"05820974944592307816406286208998628034825342117067\", \"98214808651328230664709384460955058223172535940812\", \"84811174502841027019385211055596446229489549303819\", \"64428810975665933446128475648233786783165271201909\", \"14564856692346034861045432664821339360726024914127\", \"37245870066063155881748815209209628292540917153643\", \"67892590360011330530548820466521384146951941511609\" }",
			"note":"The first 400 digits of pi.",
			"order":3
		},
		{
			"expect":"Returns: {\"111 222 333 444 555 111 222 333 444 555 111 222 333 444 555 111 222 333 444 555 111 222 333 444 5555\", \"111 222 333 444 555 111 222 333 444 555 111 222 333 444 555 111 222 333 444 555 111 222 333 4444\", \"5555\" }",
			"id":0,
			"input":"{ \"111222333444555\", \"111222333444555\", \"111222333444555\", \"111222333444555\", \"1112223334445555\", \"111222333444555\", \"111222333444555\", \"111222333444555\", \"111222333444555\", \"11122233344445555\" }",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"digits must contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of digits must contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Every character in digits must be a digit ('0'-'9')."
		},
		{
			"order":4,
			"val":"There will be at least 6 characters total in digits."
		}
	]
}