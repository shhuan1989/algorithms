{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8242&rd=10979",
	"statement":"<p> Fix a coordinate system in the plane. We will now make a random walk according to the following rules: Start at the point (0,0). In each step randomly choose one of the four basic directions, and move by 1 in this direction. You are forbidden to walk along the same line segment twice (regardless of the direction). Should a random choice require you to do this, ignore it and make a new choice. The walk ends as soon as you reach the point (0,0) again. </p> <p> To make our random choices, we will use a generator of pseudorandom numbers. Our generator will work as follows: Given is an int <b>seed</b>. Set x<sub>0</sub>=<b>seed</b>. Now, whenever you need to choose a new direction, follow these steps: </p> \n <ul> \n  <li>Compute a new value x<sub>i+1</sub> = (x<sub>i</sub> * 25173 + 13849) modulo 65536.</li> \n  <li>Let d be the integer part of (x<sub>i+1</sub>/16384). In other words, d is given by the two most significant bits of x<sub>i+1</sub>.</li> \n  <li> The value d=0 corresponds to a move by (0,+1), denoted 'U'.<br /><br /> The value d=1 corresponds to a move by (0,-1), denoted 'D'.<br /><br /> The value d=2 corresponds to a move by (-1,0), denoted 'L'.<br /><br /> The value d=3 corresponds to a move by (+1,0), denoted 'R'. </li> \n </ul> <p> A random walk can be uniquely described by a string of letters 'U', 'D', 'L', and 'R'. The length of the walk is the number of steps made, or equivalently the number of letters in its representation. Write a method that will simulate the random walk and return its representation as a String. </p> <p> If the length of the walk exceeds 40, return only the first 20 and the last 20 characters, separated by three dots. (See Example #2.) <br /><br /> If the length of the walk exceeds 200,000, return an empty string. </p> ",
	"notes":[
		{
			"order":1,
			"val":"You can not get stuck during the random walk."
		},
		{
			"order":2,
			"val":"You are allowed to pass through a vertex twice, only using a previously used line segment is forbidden."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"RandomWalks",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"generateWalk",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String generateWalk(int seed)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: \"LDRU\"",
			"id":0,
			"input":"9",
			"note":" ",
			"order":1
		},
		{
			"expect":"Returns: \"DLUR\"",
			"id":0,
			"input":"21",
			"note":"Again a path with four steps, but this time we have to ignore the third generated direction 'R'. ",
			"order":2
		},
		{
			"expect":"Returns: \"RULUURDLLURULDLDLLLD...RURRUUURULDLDDDDRRRR\"",
			"id":0,
			"input":"124",
			"note":"The generated path for this seed has length 42. Note that we still use three dots in the returned String, even though only two characters are left out.",
			"order":3
		},
		{
			"expect":"Returns: \"DDRRURDDLURRDRRRRDDL...RDRULUURDLLLDDRDLLDD\"",
			"id":0,
			"input":"3",
			"note":"This path has length 6082.",
			"order":4
		},
		{
			"expect":"Returns: \"\"",
			"id":0,
			"input":"2",
			"note":"This path doesn't return to (0,0) soon enough.",
			"order":5
		}
	],
	"constraints":[{
		"order":1,
		"val":"seed will be between 1 and 65,535, inclusive."
	}]
}