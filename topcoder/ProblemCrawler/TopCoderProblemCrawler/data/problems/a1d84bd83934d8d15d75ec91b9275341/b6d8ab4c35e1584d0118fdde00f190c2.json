{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=12244&rd=15181",
	"statement":"The circus is in town. Actually, several different circuses are in town at the same time. This can get confusing for anyone who tries to wait in line for one of the circuses. <br /><br /><br /><br /> All circuses are standing on a large meadow on the edge of the town. Each circus is inside a single big tent. The base of each tent has the shape of a circle. <br /><br /><br /><br /> You were hired by the owner of one of the circuses. The owner wants to place a ticket booth somewhere on the edge of his circus tent. The ticket booth is small, so for the purpose of this problem we will consider it to be a point on the circle that represents the base of the tent. <br /><br /><br /><br /> Often, there is a long queue for the ticket booth. The placement of the queue is completely unpredictable. Sometimes a bad situation may occur: the queue may reach the tent of some other circus. This confuses the people, so the circus owner wants to prevent such bad situations. <br /><br /><br /><br /> <img src=\"http://www.topcoder.com/contest/problem/CircusTents/tents_small2.png\" /> <br /><br /><br /><br /> Given a location of the ticket booth, its <i>remoteness</i> is the shortest walking distance from the ticket booth to some point on the boundary of a different circus tent. (That is, the length of the shortest curve that does not pass through any of the circles and connects the ticket booth point to a point on one of the other circles.) <br /><br /><br /><br /> You are given three int[]s: <b>x</b>, <b>y</b>, and <b>r</b>. For each i, there is a circus tent with center at coordinates (<b>x</b>[i], <b>y</b>[i]) and radius <b>r</b>[i]. All the tents are pairwise disjoint. Element 0 of <b>x</b>, <b>y</b>, and <b>r</b> corresponds to the tent that needs the ticket booth. Find the placement of the ticket booth that maximizes its remoteness and return the maximal possible remoteness.",
	"notes":[{
		"order":1,
		"val":"Your return value must have a relative or an absolute error of less than 1e-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CircusTents",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"findMaximumDistance",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double findMaximumDistance(int[] x, int[] y, int[] r)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{0,0}",
			"id":0,
			"input":"{0,3}",
			"note":"There is only one optimal placement of the ticket booth: (-1,0).",
			"order":1
		},
		{
			"expect":"{0,3,3,-3,-3}",
			"id":0,
			"input":"{0,3,-3,3,-3}",
			"note":"There are four optimal ticket booth locations: (-1,0), (1,0), (0,1), and (0,-1).",
			"order":2
		},
		{
			"expect":"{4,6,1,-3,0}",
			"id":0,
			"input":"{3,7,7,7,3}",
			"note":"",
			"order":3
		},
		{
			"expect":"{0,0}",
			"id":0,
			"input":"{10,-1}",
			"note":"",
			"order":4
		},
		{
			"expect":"{0,4,-4}",
			"id":0,
			"input":"{0,4,-4}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"x will contain between 2 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"y will contain the same number of elements as x."
		},
		{
			"order":3,
			"val":"r will contain the same number of elements as x."
		},
		{
			"order":4,
			"val":"Each element in x will be between -5000 and 5000, inclusive."
		},
		{
			"order":5,
			"val":"Each element in y will be between -5000 and 5000, inclusive."
		},
		{
			"order":6,
			"val":"Each element in r will be between 1 and 5000, inclusive."
		},
		{
			"order":7,
			"val":"No two circus tents will overlap."
		},
		{
			"order":8,
			"val":"No two circus tents will touch."
		}
	]
}