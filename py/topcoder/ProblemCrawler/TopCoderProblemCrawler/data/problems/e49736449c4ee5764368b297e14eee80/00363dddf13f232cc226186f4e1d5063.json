{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7856&rd=10780",
	"statement":"You are given a String[] <b>numbers</b> containing a set of distinct non-negative integers (no leading zeroes). Let m be the smallest integer in <b>numbers</b>, and let M be the largest integer in <b>numbers</b>. An arithmetic progression of integers a+id, a+(i+1)d, ..., a+(j-1)d, a+jd is called <i>proper</i> if it satisfies all of the following conditions: \n <ol>\n  <li>It contains at least 3 distinct integers from <b>numbers</b>.</li> \n  <li>All of the numbers in the progression are integers between m and M, inclusive.</li> \n  <li>If it were extended in either direction, condition 2 would no longer be satisfied. In other words, neither a+(i-1)d nor a+(j+1)d are between m and M, inclusive. (See example 0 for further clarification.)</li>\n </ol> Given a proper arithmetic progression, let <i>a</i> be the number of integers in the progression that are contained in <b>numbers</b>, and let <i>b</i> be the total number of integers in the progression. The aptitude of the progression is defined as <i>a</i> divided by <i>b</i>. Given <b>numbers</b>, return the maximal aptitude of a proper arithmetic progression as a String[] containing exactly 2 elements representing 2 integers (with no leading zeroes), first of which divided by the second equals the maximal aptitude. The first and the second elements of String[] you return must represent non-negative integers which do not have common divisors greater than 1. Return {&quot;0&quot;, &quot;1&quot;} if no proper arithmetic progression exists.",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ArithmeticProgressions",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxAptitude",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String[] maxAptitude(String[] numbers)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {\"3\", \"4\" }",
			"id":0,
			"input":"{\"1\", \"3\", \"5\", \"8\"}",
			"note":"We have two proper arithmetic progressions here: 1, 2, 3, 4, 5, 6, 7, 8 and 1, 3, 5, 7. Both of them can not be extended since neither 0, nor 9 lies in [1; 8] in the first case and neither -1, nor 9 lies in [1; 8] in the second case. 4 elements of the first progression belong to  and so its aptitude is 4/8 = 1/2. 3 elements of the second progression belong to  and so its aptitude is 3/4, which is highest possible in this case.",
			"order":1
		},
		{
			"expect":"Returns: {\"1\", \"1\" }",
			"id":0,
			"input":"{\"1\", \"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\"}",
			"note":"The elements of  form a proper arithmetic progression, hence its aptitude is 1.",
			"order":2
		},
		{
			"expect":"Returns: {\"0\", \"1\" }",
			"id":0,
			"input":"{\"1\", \"999999999999999999\"}",
			"note":"There are not enough elements in  to form a proper arithmetic progression.",
			"order":3
		},
		{
			"expect":"Returns: {\"3\", \"391\" }",
			"id":0,
			"input":"{\"1\", \"7\", \"13\", \"3511\", \"1053\", \"10\", \"5\"}",
			"note":"The elements of  are not necessarily sorted.",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"numbers will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of numbers will contain between 1 and 18 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each character of every element of numbers will be a digit ('0'-'9')."
		},
		{
			"order":4,
			"val":"No element of numbers will contain '0' (zero) as its first character."
		},
		{
			"order":5,
			"val":"All elements of numbers will be distinct."
		}
	]
}