{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13625&rd=16278",
	"statement":"John and Brus have some integers. You are given these integers in a int[] <b>numbers</b>. In one operation they can pick a number and increase/decrease it by 1. They want to have at least <b>k</b> consecutive integers. The order in which those integers appear in <b>numbers</b> does not matter. Return the minimal number of operations required to achieve the goal. ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TheConsecutiveIntegersDivOne",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"find",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int find(int[] numbers, int k)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"{4, 7, 47}",
			"note":"There are three optimal strategies:  ",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"{1, 100}",
			"note":"No operation is needed.",
			"order":2
		},
		{
			"expect":"2",
			"id":0,
			"input":"{-96, -53, 82, -24, 6, -75}",
			"note":"",
			"order":3
		},
		{
			"expect":"2",
			"id":0,
			"input":"{64, -31, -56}",
			"note":"",
			"order":4
		},
		{
			"expect":"4",
			"id":0,
			"input":"{-96, -53, 82, -24, 6, -75}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"numbers will contain between 2 and 47 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of numbers will be between -10,000,000 and 10,000,000, inclusive."
		},
		{
			"order":3,
			"val":"All elements of numbers will be distinct."
		},
		{
			"order":4,
			"val":"k will be between 1 and the number of elements in numbers, inclusive."
		}
	]
}