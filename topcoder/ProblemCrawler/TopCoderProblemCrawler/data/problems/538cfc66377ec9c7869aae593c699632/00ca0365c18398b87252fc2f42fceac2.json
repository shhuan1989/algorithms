{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11155&rd=14552",
	"statement":"<p>The currency system in the Exponential Kingdom consists of various types of coins. The coin denominations follow these simple rules:</p> \n <ul> \n  <li>Each denomination is a positive integer.</li> \n  <li>There is a coin type with denomination 1.</li> \n  <li>For each pair of different coin types, the denomination of one coin type divides the denomination of the other one.</li> \n </ul> <p>You are given a long[] <b>values</b> containing all the available denominations in ascending order. You are also given a long <b>coins_sum</b>. You want to pick a set of coins such that the sum of their values is exactly equal to <b>coins_sum</b>. Your method must count the number of ways in which such a set can be chosen. Since the answer may be very big, return it modulo 1,000,003 (10^6 + 3).</p>",
	"notes":[{
		"order":1,
		"val":"Let A and B be two sets of coins. They are considered different if and only if there exists a denomination X such that the numbers of coins worth X in A and in B differ."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"P8XCoinChange",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"solve",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"long, long[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int solve(long coins_sum, long[] values)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1, 3}",
			"id":0,
			"input":"4",
			"note":"The two sets of coins with sum 4 are: ",
			"order":1
		},
		{
			"expect":"{1, 2, 4}",
			"id":0,
			"input":"4",
			"note":"The only possible set of coins that sums to 4 are: ",
			"order":2
		},
		{
			"expect":"{1, 5}",
			"id":0,
			"input":"3",
			"note":"",
			"order":3
		},
		{
			"expect":"{1, 2, 6}",
			"id":0,
			"input":"11",
			"note":"",
			"order":4
		},
		{
			"expect":"{1, 1000000000, 1000000000000000000}",
			"id":0,
			"input":"1000000000000000000",
			"note":"There are exactly 1,000,000,002 possible sets, hence you should return 1,000,000,002 modulo 1,000,003 which is equal to 997,005.",
			"order":5
		},
		{
			"expect":"{1,2,10,30,150,300,1200,2400,4800,14400, 28800,57600,288000,576000,2304000,9216000, 18432000,73728000,221184000,663552000, 1327104000,5308416000,31850496000, 95551488000,191102976000,764411904000, 1528823808000,6115295232000,18345885696000, 36691771392000,73383542784000,220150628352000, 440301256704000,1320903770112000,3962711310336000, 15850845241344000,31701690482688000,95105071448064000, 475525357240320000,951050714480640000}",
			"id":0,
			"input":"961320341778342848",
			"note":"",
			"order":6
		},
		{
			"expect":"{1, 2}",
			"id":0,
			"input":"1000000000000000000",
			"note":"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"coins_sum will be between 1 and 10^18, inclusive."
		},
		{
			"order":2,
			"val":"values will contain between 1 and 40 elements, inclusive."
		},
		{
			"order":3,
			"val":"Each element of values will be between 1 and 10^18, inclusive."
		},
		{
			"order":4,
			"val":"values will be sorted in strictly ascending order. Note that this also implies that all the elements of values will be distinct."
		},
		{
			"order":5,
			"val":"For each pair of different elements in values, the smaller one will be a divisor of the larger one."
		},
		{
			"order":6,
			"val":"values[0] will be 1."
		}
	]
}