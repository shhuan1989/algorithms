{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6175&rd=10012",
	"statement":"<p> You have n distinct integers between 1 and n, inclusive. A permutation of these integers is called an (m,k)-ladder permutation if its longest increasing subsequence has length m and its longest decreasing subsequence has length k. A subsequence is a sequence created by removing zero or more elements from an original sequence. The relative order of the remaining elements must be preserved. For example, {1, 3} is a subsequence of {1, 2, 3}, but {3, 2} is not. An increasing sequence is one in which each element is greater than the previous element, and a decreasing sequence is one in which each element is less than the previous element. </p> <p> You are given ints <b>n</b>, <b>m</b> and <b>k</b>. Return a int[] containing the (<b>m</b>,<b>k</b>)-ladder permutation of size <b>n</b>. If there are multiple possibilities, return the one that comes first lexicographically. If there is no such permutation, return an empty int[]. Sequence A comes before sequence B lexicographically if A contains a lower value at the first position where they differ. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"LadderPermutation",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"createLadder",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] createLadder(int n, int m, int k)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"4",
			"note":"In this case, all longest increasing subsequences have length 2 (for example, {1, 3}), and all longest decreasing subsequences have length 2 (for example, {2, 1}). ",
			"order":1
		},
		{
			"expect":"2",
			"id":0,
			"input":"3",
			"order":2
		},
		{
			"expect":"1",
			"id":0,
			"input":"2",
			"note":"In this case, the two numbers will always form an increasing or decreasing sequence of length 2. There is no permutation where the longest increasing/decreasing subsequence only has length 1. ",
			"order":3
		},
		{
			"expect":"3",
			"id":0,
			"input":"6",
			"order":4
		},
		{
			"expect":"2",
			"id":0,
			"input":"6",
			"order":5
		},
		{
			"expect":"4",
			"id":0,
			"input":"7",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"n will be between 1 and 50, inclusive."
		},
		{
			"order":2,
			"val":"m will be between 1 and n, inclusive."
		},
		{
			"order":3,
			"val":"k will be between 1 and n, inclusive."
		}
	]
}