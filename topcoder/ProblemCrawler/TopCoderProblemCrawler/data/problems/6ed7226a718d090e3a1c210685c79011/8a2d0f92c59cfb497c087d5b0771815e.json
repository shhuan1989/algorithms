{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=9991&rd=14655",
	"statement":"<p><i>NOTE: This problem statement contains subscripts that may not display properly if viewed outside of the applet.</i></p> <br /><br /> <p>A <i>number grid</i> is a rectangular matrix where each cell is a digit between 0 and 9, inclusive.</p> <p>Given a number grid G, an <i>encrypted grid</i> E with the same dimensions can be generated using the following procedure (using zero-based indexing):</p> <pre>\nfor(i=0;i&lt;rows;++i){\n  for(j=0;j&lt;cols;++j){\n    E<sub>i,j</sub> = 0\n    for(r=0;r&lt;rows;++r){\n      for(c=0;c&lt;cols;++c){\n        if( (r equals i) or (c equals j))\n        {E<sub>i,j</sub> = E<sub>i,j</sub> + G<sub>r,c</sub>}\n      }\n    }\n  }\n}\n</pre> <p>Note that this means each cell in E is the sum of all the cells in G that positionally share the same row or column. (The cell in G with both the same row and same column is only counted once.)</p> <p>An example number grid G is given below:</p> <pre>\n-------------\n| 0 | 1 | 3 |\n-------------\n| 2 | 5 | 7 |\n-------------\n</pre> Performing the above procedure yields the encrypted grid below: <pre>\n----------------\n| 6  | 9  | 11 |\n----------------\n| 14 | 15 | 17 |\n----------------\n</pre> <p>The cell in row 0, column 1 of E, for example, is calculated by taking the sum of all cells in G with either row 0 or column 1 (0 + 1 + 3 + 5 = 9). Note that the '1' cell is counted only once.</p> <br /><br /> <p>Given an encrypted grid E, reconstruct the original number grid G if possible.</p> <br /><br /> <p>The encrypted grid is given in three separate String[]s. <b>hundreds</b> gives the digit in the hundreds place of each cell in the encrypted grid, <b>tens</b> gives the digit in the tens place, and <b>ones</b> gives the digit in the ones place. In each of these String[]s, the j-th character of the i-th element represents the cell in row i, column j.</p> <br /><br /> <p>For example, if the encrypted grid appeared as follows:</p> <pre>\n------------------\n| 106 | 72  | 5  |\n------------------\n| 14  | 135 | 17 |\n------------------\n</pre> <p>The input would appear like this:</p> <br /><br /> <b>hundreds</b> <pre>\n{&quot;100&quot;,\n &quot;010&quot;}\n</pre> <br /><br /> <b>tens</b> <pre>\n{&quot;070&quot;,\n &quot;131&quot;}\n</pre> <br /><br /> <b>ones</b> <pre>\n{&quot;625&quot;,\n &quot;457&quot;}\n</pre> <br /><br /> <p>If there is exactly one valid number grid G that yields the given encrypted grid, return a String[] representing G, where the j-th character of the i-th element is the digit in row i, column j. If there are no possible number grids, return a String[] containing exactly one element: &quot;NO SOLUTIONS&quot; (quotes for clarity only). If there are multiple distinct solutions, return a String[] containing exactly one element, formatted as &quot;<i>n</i> SOLUTIONS&quot; (quotes for clarity only), where <i>n</i> is the number of solutions modulo 1000000007 (10^9 + 7), with no extra leading zeroes.</p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"NumberGrid",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"decrypt",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String[], String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String[] decrypt(String[] hundreds, String[] tens, String[] ones)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"001\", \"111\"}",
			"id":0,
			"input":"{\"000\", \"000\"}",
			"note":"The example given in the problem statement.",
			"order":1
		},
		{
			"expect":"{\"0\"}",
			"id":0,
			"input":"{\"0\"}",
			"note":"A single cell means that the solution is equal to the input...",
			"order":2
		},
		{
			"expect":"{\"4\"}",
			"id":0,
			"input":"{\"0\"}",
			"note":"...unless the input would not be a valid number grid.",
			"order":3
		},
		{
			"expect":"{\"81221116682299220134442330000331447555001226795438\", \"14554449915522553457764553333554770777335559027651\", \"81221116682299229123331330011221336334111226783318\", \"60110004461188118901120119999119225223990115672106\", \"60110004461188118901120119999119225223990115672106\", \"60110004461188118901120119999119225223990115672106\", \"60110004461188118901120119999119225223990115572116\", \"14554448805522552356663663333553660667334558916651\", \"93333337793311331235542331111442558666112337806539\", \"70110005571188118912220229999229226334990115683217\", \"70110005571188118912220229999229226334990115683217\", \"15554449916633663356665663344663660888445659028761\", \"03443338803311431246653452233542558667333338806640\", \"92332227782200220134442331111331337556111236795439\", \"48998883348866896790008996677997993111778992351094\", \"60119994461188018912220119999119115333990114573216\", \"69999994460077997901119008899119114223999003462106\", \"68999994460077096801108008888008004112888993461096\", \"03443338804422552345554553333553559667333448916540\", \"70110005571188118912220229999229226334990115683217\", \"70110005571188118912220229999229226334990115683217\", \"70110005571188118912220229999229226334990115683217\"}",
			"id":0,
			"input":"{\"23333333333322333333333333333333333333333333333332\", \"33333333343333333333333333333333334333333333443333\", \"12222222222211221222222222222222222222222222222221\", \"12222222222211221122222221111221222222112222222221\", \"12222222222211221122222221111221222222112222222221\", \"12222222222211221122222221111221222222112222222221\", \"12222222222211221122222221111221222222112222222221\", \"22222222232222222222222222222222223222222222232222\", \"12222222222222222222222222222222222222222222232221\", \"01111111111100110011111110000110111111001111111110\", \"01111111111100110011111110000110111111001111111110\", \"22222222232222222222222222222222223222222222332222\", \"22222222232222222222222222222222222222222222232222\", \"12222222222222222222222222222222222222222222222221\", \"11111112221111111112221111111111112222111112222211\", \"12221112222211221122222221111221222222112222222221\", \"11111112222211111122221221111221222222111222222221\", \"22222223333322322233332332222332333333222223333322\", \"33333333343333333333333333333333333333333333343333\", \"01111111111100110011111110000110111111001111111110\", \"01111111111100110011111110000110111111001111111110\", \"01111111111100110011111110000110111111001111111110\"}",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"hundreds will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of hundreds will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of hundreds will have the same number of characters."
		},
		{
			"order":4,
			"val":"Each element of hundreds will contain only digits ('0' - '9')."
		},
		{
			"order":5,
			"val":"tens and ones will have the same number of elements as hundreds."
		},
		{
			"order":6,
			"val":"Each element of tens and ones will have the same number of characters as each element of hundreds."
		},
		{
			"order":7,
			"val":"Each element of tens and ones will contain only digits ('0' - '9')."
		}
	]
}