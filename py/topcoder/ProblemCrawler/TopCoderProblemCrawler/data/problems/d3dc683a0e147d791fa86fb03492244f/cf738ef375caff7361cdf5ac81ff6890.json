{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=4446&rd=9900",
	"statement":"Synchronize your watches to 12:00 ....... now! <p> We have a collection of watches whose hands move continuously. Create a class Synchro that contains a method resynch that is given a int[] <b>watch</b> telling how many minutes the hand of each watch advances in an hour and that returns the position of the minute hands (in minutes past the hour) at the first time when the minute hands all exactly agree again. </p><p> Each element of <b>watch</b> describes a different watch. The returned value should be a non-negative double less than 60. Ignore (or rip off!) the hour hands. </p> ",
	"notes":[{
		"order":1,
		"val":"The returned value must be accurate to within a relative or absolute value of 1E-9."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Synchro",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"resynch",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double resynch(int[] watch)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 0.0",
			"id":0,
			"input":"{59,59,59}",
			"note":" These watches are a little slow but they stay synchronized. So the first time that the minute hands are resynchronized is arbitrarily close to 0. ",
			"order":1
		},
		{
			"expect":"Returns: 34.28571428571427",
			"id":0,
			"input":"{60,53}",
			"note":" After 8 hours the first watch has its minute hand at 0 and the other watch has circled 7 times and has its minute hand at 4 minutes. The faster watch then catches up in 4/7 of an additional hour, and at that point both minute hands are at 34.285.",
			"order":2
		},
		{
			"expect":"Returns: 30.0",
			"id":0,
			"input":"{120,40}",
			"note":" The faster watch catches the slower one in 3/4 of an hour at which point they are both at the half hour position. ",
			"order":3
		},
		{
			"expect":"Returns: 0.0",
			"id":0,
			"input":"{1, 2, 4, 8, 16, 32, 64, 128}",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"watch will contain between 2 and 10 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of watch will be between 1 and 200, inclusive."
		}
	]
}