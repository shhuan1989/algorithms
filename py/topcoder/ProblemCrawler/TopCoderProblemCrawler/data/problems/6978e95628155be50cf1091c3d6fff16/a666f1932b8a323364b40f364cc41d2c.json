{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13275&rd=16008",
	"statement":"<p>You are given a connected undirected graph with N vertices. The vertices are numbered 0 through N-1. The graph is special: the number of edges is exactly equal to the number of vertices. You are given the description of the graph as three int[]s: <b>A</b>, <b>B</b>, and <b>V</b>. Each of these int[]s has N elements. For each valid i, there's an edge between vertices <b>A</b>[i] and <b>B</b>[i]. There are no self-loops and no duplicate edges. For each valid i, we associate the value <b>V</b>[i] with the vertex i.</p> <p>We will be interested in some simple paths in this graph. A simple path is a sequence of vertices such that no vertex is used twice, and each pair of consecutive vertices is connected by an edge. For any simple path, we can write down a sequence of integers: the values associated with the vertices on the path, in order of appearance. We will call such a sequence the <i>value list</i> of the given simple path.</p> <p>An inversion in a sequence S is a pair of valid indices (i,j) into the sequence S such that i &lt; j but S[i] &gt; S[j]. For example, the sequence S = {10, 30, 20, 20} has two inversions: (1,2) and (1,3). (The indices are 0-based.)</p> <p>You are given a graph G in the format described above, and an int <b>K</b>. In the graph G, consider all simple paths with <b>K</b> or more vertices. If there is no such simple path, return -1. Otherwise, return the smallest number of inversions in the value list of such path.</p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"GraphInversions",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getMinimumInversions",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getMinimumInversions(int[] A, int[] B, int[] V, int K)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1,2,0}",
			"id":0,
			"input":"{0,1,2}",
			"note":"The best path is the path {0, 1, 2}. Its value list is the sequence {40, 50, 60}, and there are 0 inversions in this sequence. ",
			"order":1
		},
		{
			"expect":"{1,2,3,0}",
			"id":0,
			"input":"{0,1,2,3}",
			"note":"As =3, we are interested in simple paths of lengths 3 or more. Each simple path of length 3 or more gives us at least one inversion. The path {3, 2, 1} is an example of an optimal path. Its value list is {30, 50, 40}. There is 1 inversion: the 50 occurring before the 40. ",
			"order":2
		},
		{
			"expect":"{1,2,3,0,4}",
			"id":0,
			"input":"{0,1,2,3,0}",
			"note":"Two or more nodes can have the same associated value. ",
			"order":3
		},
		{
			"expect":"{1,2,3,0,4,5}",
			"id":0,
			"input":"{0,1,2,3,0,2}",
			"note":"There are no simple paths with length 6. ",
			"order":4
		},
		{
			"expect":"{2,0,2,0,1,4,7,3}",
			"id":0,
			"input":"{5,7,7,5,5,7,6,4}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"N will be between 3 and 1000, inclusive."
		},
		{
			"order":2,
			"val":"A, B, and V will each have N elements."
		},
		{
			"order":3,
			"val":"Each element of A and B will be between 0 and N-1, inclusive."
		},
		{
			"order":4,
			"val":"For all valid i, A[i] will not be equal to B[i]. (I.e., there are no self loops.)"
		},
		{
			"order":5,
			"val":"No two edges will connect the same pair of vertices."
		},
		{
			"order":6,
			"val":"The graph described by A and B will be connected."
		},
		{
			"order":7,
			"val":"Each element of V will be between 1 and 1000, inclusive."
		},
		{
			"order":8,
			"val":"K will be between 1 and N, inclusive."
		}
	]
}