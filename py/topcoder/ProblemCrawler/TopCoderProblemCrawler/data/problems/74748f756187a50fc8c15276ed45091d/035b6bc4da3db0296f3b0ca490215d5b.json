{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11705&rd=15491",
	"statement":"Fox Ciel is learning magical physics. Currently, she studies Magic Molecules. Each Magic Molecule consists of some Magic Atoms. Each Magic Atom stores some Magic Power, with different atoms possibly storing different amounts of power. Within the molecule, some pairs of atoms are connected by bidirectional Magic Bonds. <br /><br /><br /><br /> Ciel now has a Magic Molecule formed by n Magic Atoms. The atoms are numbered 0 through n-1, inclusive. You are given a int[] <b>magicPower</b> with n elements: For each i, the amount of power stored in the Magic Atom number i is <b>magicPower</b>[i]. You are also given a String[] <b>magicBond</b> with n elements, each containing n characters. Character j of element i of <b>magicBond</b> is 'Y' if the Magic Atoms i and j are connected by a Magic Bond. Otherwise, character j of element i of <b>magicBond</b> is 'N'. <br /><br /><br /><br /> Your task is to improve Ciel's Magic Molecule. You have to choose a subset of the n Magic Atoms so that the following two conditions are met: \n <ol> \n  <li>The number m of chosen atoms satisfies the inequality 3*m &gt;= 2*n.</li> \n  <li>Each of the m*(m-1)/2 pairs of chosen atoms is connected by a Magic Bond.</li> \n </ol><br /><br /> Your goal is to maximize the total Magic Power stored in the chosen atoms. Compute and return the maximum total amount of power. If it is impossible to choose a subset of atoms that satisfies the above criteria, return -1 instead.",
	"notes":[
		{
			"order":1,
			"val":"The chosen subset is allowed to contain all n Magic Atoms."
		},
		{
			"order":2,
			"val":"You are not supposed to maximize m; only the total amount of Magic Power matters."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MagicMolecule",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxMagicPower",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maxMagicPower(int[] magicPower, String[] magicBond)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"NYY\",\"YNN\",\"YNN\"}",
			"id":0,
			"input":"{1,2,3}",
			"note":"There are three Magic Atoms. There are two Magic Bonds: one connects atoms 0 and 1, the other connects atoms 0 and 2. The first condition requires us to choose at least 2*3/3 = 2 atoms. We cannot choose all three of them, because atoms 1 and 2 are not connected by a Magic Bond. The optimal solution is to choose Magic Atoms 0 and 2. Their total power is 1+3 = 4.",
			"order":1
		},
		{
			"expect":"{\"NNYY\",\"NNYY\",\"YYNN\",\"YYNN\"}",
			"id":0,
			"input":"{1,1,1,1}",
			"note":"This time we must choose at least 3 Magic Atoms, but there is no valid solution.",
			"order":2
		},
		{
			"expect":"{\"NYYYYN\",\"YNNNNY\",\"YNNYYN\",\"YNYNYN\",\"YNYYNY\",\"NYNNYN\"}",
			"id":0,
			"input":"{86,15,100,93,53,50}",
			"note":"",
			"order":3
		},
		{
			"expect":"{\"NYYYYYYYY\",\"YNYYYYYYY\",\"YYNYYYYYY\",\"YYYNYYYYY\",\"YYYYNYYYY\",\"YYYYYNYYY\",\"YYYYYYNNY\",\"YYYYYYNNY\",\"YYYYYYYYN\"}",
			"id":0,
			"input":"{3969,9430,7242,8549,8190,8368,3704,9740,1691}",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"magicPower will contain between 2 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element in magicPower will be between 1 and 100,000, inclusive."
		},
		{
			"order":3,
			"val":"magicBond and magicPower will contain the same number of elements."
		},
		{
			"order":4,
			"val":"Each element of magicBound will contain exactly n characters, where n is the number of elements in magicPower."
		},
		{
			"order":5,
			"val":"Each element of magicBound will only contain the characters 'Y' and 'N'."
		},
		{
			"order":6,
			"val":"For each valid i, magicBound[i][i] will be 'N'."
		},
		{
			"order":7,
			"val":"For each valid i and j, magicBound[i][j] will be equal to magicBound[j][i]."
		}
	]
}