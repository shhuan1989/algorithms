{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13124&rd=15849",
	"statement":"Alex is sleeping soundly. At any minute T, his sleepiness can be characterized by an integer. Initially, at minute 0, Alex's sleepiness is some unknown integer S. <br /><br /><br /><br /> Unfortunately, there are several repeatedly ringing alarms disturbing him. <br /><br /><br /><br /> Starting from minute 1, the following happens each minute. First, Alex's sleepiness increases by <b>D</b>. Then some of the alarms ring, decreasing Alex's sleepiness. <br /><br /><br /><br /> Formally, alarms' characteristics are given in three int[]s <b>period</b>, <b>start</b> and <b>volume</b>. The i-th alarm rings at minutes <b>start</b>[i], <b>start</b>[i] + <b>period</b>[i], <b>start</b>[i] + 2 * <b>period</b>[i], etc., and each time it rings, Alex's sleepiness instantly decreases by <b>volume</b>[i]. If several alarms ring at the same minute, their effects are added up, so each of them decreases Alex's sleepiness by its volume. <br /><br /><br /><br /> While Alex's sleepiness is positive, he's still sleeping. Once it becomes less than or equal to zero, Alex immediately wakes up. Note that Alex's initial sleepiness can be non-positive. In that case he just wakes up at minute 0. <br /><br /><br /><br /> You are given the int[]s <b>period</b>, <b>start</b>, <b>volume</b>, and the int <b>D</b>. Return the largest possible value of S (Alex's initial sleepiness) such that he will wake up at some moment. If he is guaranteed to wake up for all possible values of S, return -1 instead. ",
	"notes":[{
		"order":1,
		"val":"It is possible to prove that the answer for any test case fits into a 32-bit signed integer type."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"WakingUp",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxSleepiness",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maxSleepiness(int[] period, int[] start, int[] volume, int D)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1, 2}",
			"id":0,
			"input":"{2, 3}",
			"note":"There are two alarms. The first alarm rings every 2 minutes, starting from minute 1, and has volume 3. The second alarm rings every 3 minutes, starting from minute 2, and has volume 4.  Here is what would happen for S = 2:  It can be proven that for any larger S, Alex will never wake up. ",
			"order":1
		},
		{
			"expect":"{1}",
			"id":0,
			"input":"{1}",
			"note":"For any positive S, Alex will never wake up. It's better not to fall asleep.",
			"order":2
		},
		{
			"expect":"{1}",
			"id":0,
			"input":"{1}",
			"note":"Each minute Alex's sleepiness decreases by 6. That means he will wake up at some moment, regardless of the initial sleepiness.",
			"order":3
		},
		{
			"expect":"{6, 1, 4, 1, 6}",
			"id":0,
			"input":"{9, 2, 5, 5, 7}",
			"note":"",
			"order":4
		},
		{
			"expect":"{1, 1, 3, 2, 6, 3, 3}",
			"id":0,
			"input":"{5, 6, 5, 3, 8, 3, 4}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"period will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"period, start and volume will contain the same number of elements."
		},
		{
			"order":3,
			"val":"Each element of period will be between 1 and 10, inclusive."
		},
		{
			"order":4,
			"val":"start[i] will be between 1 and period[i], inclusive."
		},
		{
			"order":5,
			"val":"Each element of volume will be between 1 and 1000, inclusive."
		},
		{
			"order":6,
			"val":"D will be between 1 and 100, inclusive."
		}
	]
}