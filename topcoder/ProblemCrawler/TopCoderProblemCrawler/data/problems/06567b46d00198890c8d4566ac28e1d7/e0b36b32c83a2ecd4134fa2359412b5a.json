{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8741&rd=14426",
	"statement":" <p> You are given four longs <b>K</b>, <b>N</b>, <b>A</b> and <b>B</b>. Generate an integer list X of length <b>B-A+1</b> using the following recursive definition: </p> <pre>\n        X[0]=(<b>K</b>*<b>A</b>) MOD <b>N</b>\n\t(note that <b>K</b>*<b>A</b> may overflow a 64-bit integer variable)\n\n        X[i]=(X[i-1]+<b>K</b>) MOD <b>N</b>\n</pre> <p> Given another two longs <b>lower</b> and <b>upper</b>, return the number of elements in the list which are between <b>lower</b> and <b>upper</b>, inclusive. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ModuleSequence",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"countElements",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"long, long, long, long, long, long",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long countElements(long K, long N, long A, long B, long lower, long upper)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"7",
			"id":0,
			"input":"2",
			"note":"The generated list is: 2, 4, 6, 1, 3.",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"9",
			"order":2
		},
		{
			"expect":"12",
			"id":0,
			"input":"20",
			"note":"Note that ,  and  may be greater than .",
			"order":3
		},
		{
			"expect":"89",
			"id":0,
			"input":"30",
			"order":4
		},
		{
			"expect":"1000",
			"id":0,
			"input":"890",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"K will be between 0 and 10,000,000,000, inclusive."
		},
		{
			"order":2,
			"val":"N will be between 1 and 10,000,000,000, inclusive."
		},
		{
			"order":3,
			"val":"A will be between 0 and 10,000,000,000, inclusive."
		},
		{
			"order":4,
			"val":"B will be between A and 10,000,000,000, inclusive."
		},
		{
			"order":5,
			"val":"lower will be between 0 and N-1, inclusive."
		},
		{
			"order":6,
			"val":"upper will be between lower and N-1, inclusive."
		}
	]
}