{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11369&rd=14566",
	"statement":"<p> A given circuit part is made of two rows of cells with a space in between them. Some of the cells of the top row need to be connected with some other cells of the bottom row with wires. A connection can be described as a pair of integers (x,y), which means that cell x of the top row needs to be connected with cell y of the bottom row. </p><p> The following picture illustrates an arrangement with the connections (1,1) (1,2) (2,2) (4,2) (4,3). </p><pre>\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n  |\\  |    __/|\n  | \\ | __/ _/\n  |  \\|/   /\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n</pre><p> Wires have to be printed in a 2-dimensional space and cannot cross each other, so if cell x1 of the top row needs to be connected to cell y1 of the bottom row and cell x2 of the top row needs to be connected with cell y2 of the bottom row, the following must hold:</p>\n <ul>\n  <li> (x1&lt;=x2 and y1&lt;=y2) or (x1&gt;=x2 and y1&gt;=y2). </li>\n </ul><p> Fortunately, the scientists noted that they may exchange cells placed on the same row. For instance, the following list of connections would not be valid according to the above rule: (1,2) (2,1). But, if they place the top row in the regular order [1,2] and the bottom row in reverse order [2,1], then no wires cross and the arrangement is valid. Moreover, they could also achieve that by placing the top row in reverse order and the bottom row in regular order. The following picture illustrates the situation: </p><pre>\n+---+---+            +---+---+            +---+---+\n| 1 | 2 |            | 1 | 2 |            | 2 | 1 |\n+---+---+            +---+---+            +---+---+\n  \\  /                 |   |                |   |\n   \\/      _____\\      |   |                |   |\n   /\\           /      |   |       or       |   |\n  /  \\                 |   |                |   |\n+---+---+            +---+---+            +---+---+\n| 1 | 2 |            | 2 | 1 |            | 1 | 2 |\n+---+---+            +---+---+            +---+---+\n</pre><p> You will be given an int <b>n</b> that represents the number of cells in each row, and the list of connections as two int[]s <b>top</b> and <b>bottom</b>. For each i, the pair (<b>top</b>[i],<b>bottom</b>[i]) is a required connection. Return the number of possible arrangements of the cells in each row that result in no wires crossing, modulo 1000000007. Two arrangements are different if any cell in any row has a different placement. See examples for further clarification. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CircuitDesign",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"countPerms",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int countPerms(int n, int[] top, int[] bottom)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1,1,2,4,4}",
			"id":0,
			"input":"4",
			"note":"This is the first example drawn in the problem statement.",
			"order":1
		},
		{
			"expect":"{1,2}",
			"id":0,
			"input":"2",
			"note":"The second example drawn in the problem statement.",
			"order":2
		},
		{
			"expect":"{1,1,1,2,2,2,3,3,3}",
			"id":0,
			"input":"3",
			"note":"There are too many wires to avoid crossing.",
			"order":3
		},
		{
			"expect":"{5,5,5,5,5,5,5,5,5, 5,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}",
			"id":0,
			"input":"30",
			"note":"",
			"order":4
		},
		{
			"expect":"{1,2,3,4,5,1,2,3,4}",
			"id":0,
			"input":"5",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"n will be between 1 and 50, inclusive."
		},
		{
			"order":2,
			"val":"top will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":3,
			"val":"top and bottom will contain the same number of elements."
		},
		{
			"order":4,
			"val":"Each element of top and bottom will be between 1 and n, inclusive."
		},
		{
			"order":5,
			"val":"Each pair (top[i] , bottom[i]) will be different."
		}
	]
}