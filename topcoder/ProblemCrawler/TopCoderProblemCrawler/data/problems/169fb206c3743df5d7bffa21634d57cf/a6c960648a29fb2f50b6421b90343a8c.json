{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=10054&rd=13510",
	"statement":"<p> You are writing a simple text editor that supports only the following two commands: </p>\n <ul> \n  <li>&quot;type c&quot; where c is a character: Append character c to the end of the current text.</li> \n  <li>&quot;undo t&quot; where t is an integer: Undo all operations that were performed in the previous t seconds in reverse order.</li> \n </ul> <p></p> <p> All quotes are for clarity only. The text in the editor is initially empty. </p> <p> For example, consider the following sequence of commands: </p> <pre>\nSecond 1: type a\nSecond 2: type b\nSecond 3: type c\nSecond 5: undo 3\n</pre> <p> At the end of second 3, the text is &quot;abc&quot;. At second 5, all commands performed in the previous 3 seconds are undone in reverse order. This means 'c' is removed, and then 'b' is removed. The text becomes just &quot;a&quot;. </p> <p> Note that &quot;undo&quot; commands can also be undone. For example: </p> <pre>\nSecond 1: type a\nSecond 2: type b\nSecond 3: undo 2\nSecond 4: undo 2\n</pre> <p> After second 2, the text is &quot;ab&quot;. After second 3, everything is undone, and the text becomes empty. At second 4, the previous &quot;undo&quot; is undone, so the text becomes &quot;ab&quot; again. Then, the &quot;type b&quot; is also undone and the text becomes just &quot;a&quot;. </p> <p> You are given a String[] <b>commands</b> and a int[] <b>time</b>. Each element of <b>commands</b> is a single command, and <b>commands</b>[i] is performed at <b>time</b>[i]. The commands are given in chronological order. Return the text after all the commands are executed. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Undo",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getText",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String getText(String[] commands, int[] time)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1, 2, 3, 5}",
			"id":0,
			"input":"{\"type a\", \"type b\", \"type c\", \"undo 3\"}",
			"note":"The first example from the problem statement.",
			"order":1
		},
		{
			"expect":"{1,2,3,4}",
			"id":0,
			"input":"{\"type a\", \"type b\", \"undo 2\", \"undo 2\"}",
			"note":"The second example from the problem statement.",
			"order":2
		},
		{
			"expect":"{1,2,3}",
			"id":0,
			"input":"{\"type a\", \"undo 1\", \"undo 1\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"{1, 2, 3, 1000}",
			"id":0,
			"input":"{\"type a\", \"type b\", \"type c\", \"undo 10\"}",
			"note":"Note that \"undo\" can undo nothing if it is too late.",
			"order":4
		},
		{
			"expect":"{1}",
			"id":0,
			"input":"{\"undo 1\"}",
			"note":"",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"commands will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of commands will be either &quot;type c&quot; where c is a lowercase letter ('a'-'z') or &quot;undo t&quot; where t is an integer between 1 and 10^9, inclusive, with no leading zeroes (quotes for clarity only)."
		},
		{
			"order":3,
			"val":"time will contain the same number of elements as commands."
		},
		{
			"order":4,
			"val":"Each element of time will be between 1 and 10^9, inclusive."
		},
		{
			"order":5,
			"val":"The elements of time will be in strictly ascending order."
		}
	]
}