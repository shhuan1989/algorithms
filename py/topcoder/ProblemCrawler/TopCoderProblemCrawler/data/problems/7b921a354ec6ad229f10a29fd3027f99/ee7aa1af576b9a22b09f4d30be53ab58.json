{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13268&rd=16187",
	"statement":"<i>This problem has a non-standard time limit: 4 seconds.</i> <p> </p> <p> There are some animals standing in a line in the Zoo of Lviv. They are numbered from the left to the right, starting from 0. Each of the animals has a label with some positive integer written on it. For each valid i, animal number i has the integer <b>label</b>[i] written on its label. </p> <p> </p> <p> The director of the zoo wants to choose some non-empty subset of the animals and send them as a gift to another zoo. The following two requirements should be fulfilled: </p>\n <ul> \n  <li> Each of the chosen animals must have a label that is between <b>lower</b> and <b>upper</b>, inclusive. </li> \n  <li> For each integer x from <b>lower</b> to <b>upper</b>, inclusive, there must be at least one animal in the set with label equal to x. </li> \n </ul> <p></p> <p> </p> <p> Suppose that we have already chosen the animals we want to send. If we look at the original line, some of these animals might stand right next to each other. More precisely, there will be one or more groups, where a group is a consecutive segment of animals we want to send away. If there are multiple ways to choose the set of animals we'll send to the other zoo, the director prefers the one with the smaller number of groups. (This is because when there are fewer groups, we can pack the animals into transport cages faster.) </p> <p> </p> <p> You are given the int[] <b>label</b> and the two ints <b>lower</b> and <b>upper</b>. If it is impossible to choose the set in the way described above, return -1. Otherwise, return the minimum number of groups that the set may contain. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"ZooExchangeProgram",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getNumber",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getNumber(int[] label, int lower, int upper)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"1",
			"id":0,
			"input":"{2, 1, 3}",
			"note":"The only way to choose the subset is to choose all animals.",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"{3, 4, 1, 3, 4, 2}",
			"note":"In the optimal solution we send away animals #2, #3, and #5 (0-based indices). Animals #2 and #3 form one group, animal #5 forms the other.",
			"order":2
		},
		{
			"expect":"2",
			"id":0,
			"input":"{3, 4, 3, 1, 6, 2, 5, 7, 5, 2}",
			"note":"",
			"order":3
		},
		{
			"expect":"2",
			"id":0,
			"input":"{3, 1, 4}",
			"note":"",
			"order":4
		},
		{
			"expect":"1",
			"id":0,
			"input":"{2, 1, 3, 1, 4}",
			"note":"Note that we are not required to minimize the number of animals we send. Here, we could select just four of these five animals but that would create two groups. A better solution is to select all five animals, then they all form a single group.",
			"order":5
		},
		{
			"expect":"2",
			"id":0,
			"input":"{7, 12, 2, 12, 10, 13, 6, 5, 3, 3, 4, 11, 12, 4, 3, 1, 8, 11, 4, 7, 6, 5, 47}",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"label will contain between 1 and 44 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of label will be between 1 and 47, inclusive."
		},
		{
			"order":3,
			"val":"lower will be between 1 and 47, inclusive."
		},
		{
			"order":4,
			"val":"upper will be between lower and 47, inclusive."
		}
	]
}