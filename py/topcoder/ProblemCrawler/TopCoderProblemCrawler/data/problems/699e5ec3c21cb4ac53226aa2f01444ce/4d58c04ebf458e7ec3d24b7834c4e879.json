{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11847&rd=15156",
	"statement":"Circular Island is a small undeveloped island with a circular shape. The circle is divided into N sectors. The sectors are numbered 0 through N-1 in clockwise order. Each sector has some constant altitude. <p></p> The inhabitants of the island have some desired altitude. This altitude will be given in the input as 0. Negative altitudes are lower, positive ones are higher. <p></p> The people on the island decided to spend <b>T</b> days on flattening their island to the desired altitude. Each day looked as follows: The people formed N teams, one on each segment. If the altitude of the segment was negative, the team did nothing that day. If the altitude was positive, the team took shovels and removed enough dirt to decrease the altitude by 1. Also, that dirt was then moved into the next sector clockwise. In other words, if the altitude of sector i was positive, the team on sector i decreased the altitude of sector i by 1, and increased the altitude of sector ((i+1) modulo N) by 1. Note that all teams always worked at the same time, so it is possible that the altitude of some sectors was decreased and increased on the same day. <p></p> You are given a long[] <b>height</b> containing N elements. The i-th element of <b>height</b> represents the altitude of sector i at the beginning. You are also given a long <b>T</b> specifying the number of days of flattening. Return a long[] containing exactly N elements. The i-th element of the return value should be the height of sector i after the entire flattening is done. ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"FlattenOut",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"simulateIt",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"long[], long",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"long[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"long[] simulateIt(long[] height, long T)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"1",
			"id":0,
			"input":"{1, 3, -4, -4, 2, 0}",
			"note":"In this case there is only one day of flattening. The teams on sectors 2, 3, and 5 do nothing. The teams on sectors 0, 1, and 4 shovel dirt to the next sector (i.e., sectors 1, 2, and 5). The resulting sector altitudes are shown in the output above.",
			"order":1
		},
		{
			"expect":"2",
			"id":0,
			"input":"{1, 3, -4, -4, 2, 0}",
			"note":"The initial altitudes are the same as in Example 0, but this time there are two days. We already know that the altitudes after the first day will be {0, 3, -3, -4, 1, 1}. On the second day, teams on sectors 1, 4, and 5 will be the ones working.",
			"order":2
		},
		{
			"expect":"9999999999999999",
			"id":0,
			"input":"{9999999999999999, -9999999999999999, 9999999999999999, -9999999999999999}",
			"note":"Watch out for overflow, the input values may be huge.",
			"order":3
		},
		{
			"expect":"4",
			"id":0,
			"input":"{0, 0, 0}",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"height will contain between 2 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of height will be between -10^16 and 10^16, inclusive."
		},
		{
			"order":3,
			"val":"T will be between 1 and 10^16, inclusive."
		}
	]
}