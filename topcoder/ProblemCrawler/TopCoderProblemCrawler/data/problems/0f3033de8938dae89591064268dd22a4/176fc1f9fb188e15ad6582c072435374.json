{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=8508&rd=12174",
	"statement":"<p>Given a String[] <b>board</b>, concatenate all its elements, in order, to get a single string representing a circular board consisting of uppercase 'X' and '.' characters. &quot;Circular&quot; means that the first and the last characters on the board are consecutive. Maximal consecutive groups of 'X' characters form blocks and maximal consecutive groups of '.' characters form gaps. The size of the gap is the number of '.' characters in it. </p> <p>You want to remove exactly one block from the board, getting a circular board of smaller size. For each possible block to be removed consider the board after its removal, construct an array of all gaps' sizes on the board and sort this array in non-ascending order. Choose the block for which the described array is lexicographically maximal (see notes for the description of lexicographical array comparison). Return the smallest 0-based index among all characters in this block (indices are taken in the concatenated string). In case of a tie choose the block which results in the smallest return value.</p>",
	"notes":[{
		"order":1,
		"val":"Let int[]s A and B contain the same number of elements. Then A is lexicographically larger than B if A contains a larger value at the first position where A and B differ."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"LargestGap",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getLargest",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int getLargest(String[] board)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{\".....X.X.......\"}",
			"note":"Remove the first block.",
			"order":1
		},
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{\"XXXX\",\"....\",\"XXXX\",\"....\",\"XXXX\",\"....\"}",
			"note":"   ",
			"order":2
		},
		{
			"expect":"Returns: 12",
			"id":0,
			"input":"{\"XXX.........XX...........XX..X\"}",
			"note":"There are three gaps and three blocks (recall that the board is circular).",
			"order":3
		},
		{
			"expect":"Returns: 32",
			"id":0,
			"input":"{\"XXX\",\"X.....\",\"....XX..XXXXXX\",\"X........X..\",\".XXX.\"}",
			"note":"There are 5 blocks and 5 gaps. There are two ways to maximize the largest gap, but only one of them also maxmizes the second largest one.",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"board will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of board will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"board will contain only uppercase 'X' and '.' characters."
		},
		{
			"order":4,
			"val":"board will contain at least two blocks."
		}
	]
}