{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=63&rd=3003",
	"statement":"<pre>Class Name: PegJump\nMethod Name: maxJump\nParameters: int[]\nReturns: int\n\nImplement a class PegJump, which contains a method maxJump.  maxJump is passed\nan int[] of peg locations (Integers) on a peg jumping game board and returns an\nint that is the maximum possible number of successive jumps.\n\nThe peg jumping game board is a triangle with 10 holes, numbered 0 through 9:\n      0\n     /  \\\n    1 - 2\n   /  \\  /  \\\n  3 - 4 - 5\n  /  \\  /  \\  /  \\\n6 - 7 - 8 - 9\nPeg Jumping Game Rules:\n1. A peg can only move by jumping another peg.\n2. A peg can jump another peg (call the pegs &quot;jumper peg&quot; and &quot;jumpee peg&quot;,\nrespectively) if there is a single line connecting the jumper and jumpee peg\nlocations and there is a single line of identical direction connecting the\njumpee peg location to an empty location.\n3. The jumper peg is removed from its original location, and the original\nlocation is left empty.  \n4. The jumper peg ends up in the empty location immediately beyond the jumpee\npeg along the line of identical direction as the line connecting the original\njumper hole to jumpee hole.\n5. The jumpee peg is removed and its location is left empty.  \n6. The game ends when no more pegs can be jumped.\n\nFor example, if there is a peg in 0, a peg in 1 and no peg in 3, the 0 peg can\njump the 1 peg.  The peg in 1 is removed, the peg in 0 ends up in 3, and 0 and\n1 are left empty.  However, if there are pegs in 0, 1, &amp; 3, and no peg in 4,\nthe 0 peg cannot jump the 1 peg and end up in 4, because the line from 1 to 4\nis not of the same direction as the line from 0 to 1.\n\nThe method simulates the game and performs jumps in an order that results in\nthe maximum possible number of jumps before the game is over, and returns this\nmaximum number of jumps.\n\nThe method signature is:\npublic int maxJump(int[] pegLoc);\n\npegLoc is an int[] of size at most 10.  It contains Integers (between 0 and 9,\ninclusive) representing initial locations of pegs.  Duplicates are ignored.\nFor example, if there are initially pegs in locations 1, 2, 3, and 7, pegLoc\nmay equal {7,2,3,1}.\n\nNote: Any correct solution must execute in fewer than 6 seconds on our tester.\nExamples:\n-If the initial peg locations are {0,2,4,7}, the sequence that results in the\nmaximum number of jumps is:\n  0 jumps 2, ends in 5.  \n  7 jumps 4, ends up in 2.\n  5 jumps 2, ends up in 0.\n  There are three jumps, and the method should return 3.\n-if pegLoc={0,2,3,4,5,8}, the method should return 4.\n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"PegJump",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxJump",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maxJump(int[] param0)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}