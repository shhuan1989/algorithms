{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=209&rd=57",
	"statement":"<pre>THIS PROBLEM WAS TAKEN FROM THE FINALS OF THE TOPCODER INVITATIONAL TOURNAMENT\n\nPROBLEM STATEMENT\nA network consists of a system of numNodes nodes, numbered from 0 to\nnumNodes-1, and connections between those nodes.  A connection has a chance of\nbeing up and a chance of being down. Implement a class Networking that contains\na method getProbability which calculates the chance that there will be a path\nfrom node 0 to node numNodes-1 such that each connection in the path is up.\n(See the examples to see how probabilities can be calculated)\n\nDEFINITION\nClass Name: Networking\nMethod Name: getProbability\nParameters: int, String[]\nReturns: double\nMethod signature (be sure your method is public):  double getProbability(int\nnumNodes, String[] connections);\n\nnumNodes is an int representing the number of nodes.\nconnections is a String[] representing the connections.  The elements will be\nof the form &quot;N1 N2 P&quot; where N1 and N2 represent the numbers of the two nodes\nthe connection connects, and P is the probability the connection will be up.\nThere will be precisely one space between N1 and N2 and one space between N2\nand P.  The nodes are numbered from 0 to numNodes-1. Every connection connects\ntwo nodes (or possibly a node to itself).\n\nOUTPUT\nA double representing the probability there exists a path from node 0 to node\nnumNode-1 such that every connection in the path is up. Your result must be\nwithin 10^-6 of our solution's result (tolerance for double inaccuracies).\n\nNOTES\n* A &quot;path&quot; is a series of one or more connections such that each successive\nconnection starts at the node where the previous connection ended.\n* The connections are bi-directional.\n* There can be multiple (parallel) connections connecting two nodes.\n\nTopCoder will ensure the validity of the inputs.  Inputs are valid if all of\nthe following criteria are met:\n* numNodes is an integer between 2 and 10, inclusive.\n* Elements of connections are of the form described in the input above.\n* connections has between 0 and 20 elements, inclusive.\n* P is a decimal value between 0 and 1 inclusive with exactly one digit before\nthe decimal point and two digits after the decimal point.\n* N1 and N2 are single integer digits between 0 and numNodes-1, inclusive.\n\nEXAMPLES\n* Nodes are in series. For example, if numNodes = 3 and connections = {&quot;0 1\n0.20&quot;, &quot;1 2 0.10&quot;}, the network looks as follows (letters are added for\nclarity):\n ___             ___              ___\n|   |   0.20    |   |    0.10    |   |   \n| 0 |-----------| 1 |------------| 2 |\n|___|     a     |___|      b     |___|\n\nIn this case, the probability of a connection from 0 to 2 is the probability\nthat a AND b are up. The AND relationship corresponds to multiplication.\nTherefore, to calculate this all you need to do is mutliply the probability of\n0-&gt;1 by the probability of 1-&gt;2. \n                (0.20 * 0.10) = 0.02\nSo the method should return 0.02.\n\n\n* Nodes are in parallel. If numNodes = 4 and connections = {&quot;0 1 0.10&quot;, &quot;1 3\n0.20&quot;, &quot;0 2 0.30&quot;, &quot;2 3 0.40&quot;}, the network looks as follows:\n                 ___\n                |   |\n     0.10 /-----| 1 |-----\\  0.20\n         /      |___|      \\\n ___    / a               b \\  ___\n|   |  /                     \\|   |\n| 0 | /                       | 3 |\n|___| \\                      /|___|\n       \\         ___        /\n        \\ c     |   |    d /\n         \\------| 2 |-----/\n       0.30     |___|       0.40\n\nIn order for this to happen, either a and b have to be up, or c and d have to\nbe up. The probability a connection exists from 0 to 3 now becomes the\nprobability that (a AND b are up) OR (c AND d are up). \n\nThis equals P(a AND b up) OR P(c AND d up) = P(a up)*P(b up) + P(c up)*P(d up)\n- P(a and b and c and d up) = 0.1 * 0.2 + 0.3 * 0.4 - 0.1 * 0.2 * 0.3 * 0.4 =\n0.1376.\n\n(The probability that they are all up is subtracted out at the end because it\nis added as both P(a AND b up) and P(c AND d up)).\n\n* If numNodes=2 and connections = {&quot;0 1 0.80&quot;}, there is a path from node 0 to\nnode 1 when the connection is up, so the method should return 0.8.\n\n\n* If numNodes=3 and connections = {&quot;0 2 0.50&quot;, &quot;0 2 0.50&quot;, &quot;0 1 0.10&quot;, &quot;1 2\n0.20&quot;,&quot;1 1 0.60&quot;}, there is a path from node 0 from node 2 if either of the\nfirst two connections are up or if both the 3rd and 4th connection are up, so\nthe method should return 0.755.  Note the connection from node 1 to node 1 does\nnot affect the result.\n\n\n* If numNodes=4 and connections = {&quot;0 2 0.06&quot;, &quot;3 1 1.00&quot;, &quot;1 3 0.50&quot;, &quot;1 2\n0.00&quot;}, the method should return 0.0.\n\n\n* If numNodes=4 and connections = {&quot;0 1 0.10&quot;, &quot;1 3 0.20&quot;, &quot;0 2 0.30&quot;, &quot;2 3\n0.40&quot;, &quot;1 2 0.60&quot;}, the method should return 0.17048.\nThis can be calculated by reducing the network as follows:\n\nThe original network looks like:\n                ___\n          _____|   |_____     \n    0.10 /     | 1 |     \\  0.20\n        /      |___|      \\\n ___   / a       |       b \\  ___\n|   | /          |e         \\|   |\n| 0 |/           |0.60       | 3 |\n|___|\\           |          /|___|\n      \\         _|_        /\n       \\ c     |   |    d /\n        \\______| 2 |_____/\n      0.30     |___|       0.40\n\nThis solution can be found by reducing the network.  \nThe chance the network is up is P(e up)*P(Network up, given e up) + P(e\ndown)*P(Network up, given e down).\n\nP(Network up, given e up):\n\nGiven e up, the network becomes:\n\n         0.10           0.20\n       ______         ________\n ___  /  a   \\  ___  /    b   \\  ___\n|   |/        \\|   |/          \\|   |\n| 0 |\\   c    /|1,2|\\     d    /| 3 |\n|___| \\______/ |___| \\________/ |___|\n         0.30           0.40\n\nThe probability this is up is :\n\nP((a OR c up) AND (b OR d up)) =\nP(a OR c up) * P(b OR d up) =\n(0.1+ 0.3- 0.1 * 0.3) * (0.2 + 0.4-0.2 * 0.4) = 0.1924\n\nGiven e down, the network becomes:\n                 ___\n                |   |\n     0.10 /-----| 1 |-----\\  0.20\n         /      |___|      \\\n ___    / a               b \\  ___\n|   |  /                     \\|   |\n| 0 | /                       | 3 |\n|___| \\                      /|___|\n       \\         ___        /\n        \\ c     |   |    d /\n         \\------| 2 |-----/\n       0.30     |___|       0.40\n\nAnd low and behold, this is the network from the last example, and the\nprobability of it being up is: 0.1376\n\nTherefore, the probability of the entire network being up is:\nP(e up)*P(Network up, given e up) + P(e down)*P(Network up, given e down) =\n0.6 * 0.1924 + 0.4 * 0.1376 = 0.17048\nThe method should return 0.17048.\n</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Networking",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getProbability",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double getProbability(int param0, String[] param1)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}