{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=12083&rd=15096",
	"statement":"Farmer Brus noticed that his N cows are mooing according to their own patterns. You are given a String[] <b>patterns</b>. The i-th cow's mooing pattern is described by <b>patterns</b>[i]. The cow reads its pattern from left to right. When it reads character 'M', it moos for one second, and when it reads character '-', it becomes quiet for one second. If it reaches the end of its pattern, it will repeat reading from the beginning and continue infinitely. More formally, during the time interval between t seconds from the beginning and t+1 seconds from the beginning, the i-th cow reads the character (t modulo length(<b>patterns</b>[i])) of <b>patterns</b>[i]. The i-th cow moos if and only if this character is 'M'. <br /><br /> <br /><br /> Let's define <i>loudness</i> as the number of mooing cows. Farmer Brus wants to calculate the distribution of <i>loudness</i> during the first 50! (= 1 x 2 x ... x 49 x 50) seconds. Return a int[] containing exactly N+1 elements. Let T[i] be the total number of seconds in the considered range when the <i>loudness</i> was exactly i. For all i, the i-th element of the return value must be the value (T[i] modulo 10,007).",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CowsMooing",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getDistribution",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] getDistribution(String[] patterns)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {0, 3235 }",
			"id":0,
			"input":"{\"M\"}",
			"note":"The only cow is always mooing. The return value should be {0, 50! mod 10,007}.",
			"order":1
		},
		{
			"expect":"Returns: {1294, 1294, 647 }",
			"id":0,
			"input":"{\"M--M-\", \"-M-M-\"}",
			"note":"Cow 0 will be mooing during the intervals (0,1), (3,4), (5,6), (8,9), (10,11), (13,14), ... and so on.  Cow 1 will be mooing during the intervals (1,2), (3,4), (6,7), (8,9), (11,12), (13,14), ... and so on.",
			"order":2
		},
		{
			"expect":"Returns: {6621, 514, 6107 }",
			"id":0,
			"input":"{\"M--\", \"-M--\"}",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: {7907, 7504, 964, 9034, 7847 }",
			"id":0,
			"input":"{\"MM-M---M-MM--\", \"-MM-MMM----M-M-\", \"MM-\", \"M--M-M--\"}",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: {0, 0, 0, 9523, 1842, 4448, 752, 9392, 9394, 7124, 193, 2222, 1873, 1875, 5758, 5429, 1847, 9481, 7496, 108, 7880, 4988, 2656, 4783, 4261, 9987, 0, 0, 0, 0, 0 }",
			"id":0,
			"input":"{\"-\", \"-M\", \"-MM\", \"-M--\", \"--M--\", \"M---MM\", \"MM-MM--\", \"M-M--M--\", \"M-M-MM-M-\", \"-MMMM-M-M-\", \"M-M-M-M-MMM\", \"--MMM--M--MM\", \"M--MM--MMM-M-\", \"M-MM----MM----\", \"MM----M-MMMM--M\", \"-MMMMM--M-M--M-M\", \"----M-M----MMMMMM\", \"MM-----M-MMM-MMMMM\", \"--M-MMMMMM-MMM-M--M\", \"M-M--M--M-MMM--MM---\", \"--MMMM--MM-MMM-M----M\", \"-MMM-M-MM-MMM-M-M-----\", \"-M-MMMM-MMMM--M--M--M--\", \"-M--MMM--MM---MMMM---MMM\", \"MMMM-MMMMM-M-MMMM-MM--M-M\", \"MMM-MMM-MM--M----M----MM-M\", \"MM---M-MMMMMMM----MM----MM-\", \"M----MMMMMMM-MM--MMM---M----\", \"-M-MMM-MMMM-MM--M-MMM---M----\", \"M--M-M-MM-MMM--M---MMMMMM-M-MM\"}",
			"note":"",
			"order":5
		},
		{
			"expect":"Returns: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3235 }",
			"id":0,
			"input":"{} ",
			"note":"A lot of very loud cows.",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"patterns will contain between 1 and 30 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of patterns will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each character in each element of patterns will be either 'M' or '-'."
		}
	]
}