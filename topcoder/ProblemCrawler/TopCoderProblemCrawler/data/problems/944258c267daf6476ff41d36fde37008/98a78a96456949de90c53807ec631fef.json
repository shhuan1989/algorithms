{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=979&rd=4335",
	"statement":"<p>Tim and Tom are playing a game called Super-Doorknobs. From a starting position inside Tim's house, they each have to try to be the first one to touch a given number of doorknobs in any order. Tom, being aware of his disadvantage of not knowing Tim's house, decides to code up a quick algorithm to tell him which doorknobs to go after.</p> <p>Given the configuration of the house and the number of doorknobs they need to hit, return the length of the shortest path that includes touching the necessary number of doorknobs.</p> <p>The house configuration will be a String[] birds-eye view. The game will start in the top-left corner. The following characters will represent the house:</p> <p>'.' - empty square.</p> <p>'o' - square with a doorknob (they touch the doorknob the moment they enter this square).</p> <p>'#' - a wall that neither of them can run through.</p> <p>For example, if Tim and Tom were racing to touch 3 doorknobs in the following house configuration (quotes added for clarity):</p> <pre>\n{&quot;.....&quot;,\n &quot;o....&quot;,\n &quot;o....&quot;,\n &quot;o....&quot;,\n &quot;...o.&quot;}</pre> <p>The shortest path is straight down, and has a total length of 3. Therefore the method would return 3.</p> ",
	"notes":[
		{
			"order":1,
			"val":"If there is no way to reach <doorknobs> doorknobs from the starting location at the top-left of the house, return -1."
		},
		{
			"order":2,
			"val":"Tim and Tom can only move up, down, left, or right. Diagonals are not allowed."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Doorknobs",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"shortest",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int shortest(String[] house, int doorknobs)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"3",
			"id":0,
			"input":"{\".....\" ,\"o....\" ,\"o....\" ,\"o....\" ,\"...o.\"}",
			"order":1
		},
		{
			"expect":"4",
			"id":0,
			"input":"{\".....\" ,\"o....\" ,\"o....\" ,\"o....\" ,\"...o.\"}",
			"order":2
		},
		{
			"expect":"1",
			"id":0,
			"input":"{\".#...\" ,\"#....\" ,\"...oo\" ,\"...oo\" ,\"...oo\"}",
			"note":"Tim and Tom can't move from the starting location (what an odd house). ",
			"order":3
		},
		{
			"expect":"4",
			"id":0,
			"input":"{\"...o.\" ,\"o..o.\" ,\".....\" ,\"..oo.\" ,\".....\"}",
			"order":4
		},
		{
			"expect":"4",
			"id":0,
			"input":"{\"....#\" ,\".##o#\" ,\".##oo\" ,\"o##.#\" ,\"....#\"}",
			"order":5
		},
		{
			"expect":"4",
			"id":0,
			"input":"{\"....#\" ,\"o##o#\" ,\".##oo\" ,\".##.#\" ,\"....#\"}",
			"order":6
		},
		{
			"expect":"4",
			"id":0,
			"input":"{o..............................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"........................................o.........\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..........o.......................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\".....................................o............\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\" ,\"..................................................\"}",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"house will contain between 5 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"each element of house will be of length 5 to 50, inclusive."
		},
		{
			"order":3,
			"val":"each element of house will be the same length as every other element of house."
		},
		{
			"order":4,
			"val":"each element of house will contain only the characters '.', '#', and/or 'o'."
		},
		{
			"order":5,
			"val":"the first character of the first element of house (the top-left square) will be a '.'."
		},
		{
			"order":6,
			"val":"doorknobs will be between 1 and 4, inclusive."
		},
		{
			"order":7,
			"val":"the number of 'o' characters in house is between &lt;doorknobs&gt; and 6, inclusive."
		}
	]
}