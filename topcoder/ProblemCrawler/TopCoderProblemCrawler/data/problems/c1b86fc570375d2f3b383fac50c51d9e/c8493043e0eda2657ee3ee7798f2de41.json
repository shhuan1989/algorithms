{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=3517&rd=6517",
	"statement":"We have a program segment and want to analyze the control flow through it. We have already replaced the actual code with simpler code that captures just the control logic. The code we want to analyze consists of a sequence of statements in which each statement is one of the following two types:\n <ul>\n  <li> IF target1 ELSE target2</li>\n  <li> RETURN</li>\n </ul> Execution of an IF statement is followed by execution of one of its two targets. Each target is an integer referring to a zero-based position in the code sequence. The two targets may be identical. Execution of a RETURN statement ends the execution. <p> Execution of the program segment starts at the first statement (statement 0) and concludes when it reaches a RETURN statement. We call such a sequence an &quot;execution path.&quot; </p><p> In order to optimize the code, we want to find the smallest loop in the program segment that can be executed. A loop is defined to be a set of statements such that</p>\n <ol>\n  <li> Only one statement in the loop (the entry point) may be immediately preceded in an execution path by a statement that is not in the loop. </li>\n  <li> If a loop contains statement 0, then statement 0 must be the entry point for that loop.</li>\n  <li> If a statement S is in the loop, then there is an execution path that executes S and then, without executing any statement outside the loop, executes every statement (including S) in the loop at least once.</li> \n </ol> Create a class Loopy that contains a method minLoop that is given a String[] <b>code</b> containing the sequence of statements and that returns the smallest number of statements in <b>code</b> that form a loop. If <b>code</b> contains no loop, return 0. ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Loopy",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"minLoop",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int minLoop(String[] code)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{\"RETURN\", \"IF 0 ELSE 1\"}",
			"note":" Execution immediately returns, so there is no loop. ",
			"order":1
		},
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{\"IF 1 ELSE 2\",\"IF 1 ELSE 2\",\"RETURN\"}",
			"note":" Statement 1 forms a loop. ",
			"order":2
		},
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{\"IF 1 ELSE 2\",\"RETURN\", \"IF 3 ELSE 2\", \"IF 2 ELSE 3\"}",
			"note":" No execution path that includes either statement 2 or 3 can ever reach a RETURN statement. The only legal execution path is statement 0 followed by statement 1 so there is no loop.",
			"order":3
		},
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{\"IF 1 ELSE 2\",\"IF 3 ELSE 3\",\"IF 4 ELSE 1\", \"IF 4 ELSE 5\",\"RETURN\",\"IF 0 ELSE 6\", \"IF 6 ELSE 6\",\"IF 7 ELSE 2\"}",
			"note":" Statements 0, 1, 2, 3, and 5 form a loop whose entry point is statement 0. Note that no execution path contains statement 7, so statement 2 is never preceded by a non-loop statement. ",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"code will contain between 1 and 50 elements inclusive."
		},
		{
			"order":2,
			"val":"Each element of code will be one of the two forms above."
		},
		{
			"order":3,
			"val":"Each RETURN statement has no spaces."
		},
		{
			"order":4,
			"val":"Each IF statement has exactly 3 spaces."
		},
		{
			"order":5,
			"val":"Each target1 and target2 will be an integer with no extraneous leading zeroes."
		},
		{
			"order":6,
			"val":"Each target1 and target2 will be between 0 and n-1 inclusive, where n is the number of elements in code."
		}
	]
}