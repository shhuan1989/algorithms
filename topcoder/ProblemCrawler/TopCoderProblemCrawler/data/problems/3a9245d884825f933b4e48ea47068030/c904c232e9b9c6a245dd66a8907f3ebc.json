{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1882&rd=4701",
	"statement":"Graphs are relatively common data structures in computer science. To visualize a graph, we often display it as a bitmap like this one:<br /><br /> <img src=\"http://www.topcoder.com/contest/problem/BitmapToGraph/graph.gif\" /> <br /><br /><br /><br /> However, an image is not very easy to work with for most purposes. It is usually much easier to perform common tasks (like finding a shortest path) if the graph is represented as a set of nodes and edges. In this problem, you will be given a graph as a bitmap, and are to convert it to a set of nodes and edges. <br /><br /><br /><br /> You have some information about the bitmap to make this task easier. First, you know that all nodes in the graph are represented by a single pixel of a certain color, which will be represented by an 'N' in the input. Furthermore, each edge will be a single color, represented by an 'E' in the input. The rest of the pixels will be represented by '.'s. After examining the images, you've come up with the following sketch for an algorithm to find and follow edges: \n <ol>\n  <li>First, find an 'N' that is adjacent to an 'E' (either orthogonally, or diagonally).</li> \n  <li>Start following the edge in the same direction as you went to get from the 'N' to the 'E'.</li> \n  <li>Then, as long as the edge has not terminated at an 'N', follow the edge ('E' pixels) by either continuing in the same direction, or if you cannot continue straight, by turning 45 degrees and continuing. You should always go straight when possible, but if you cannot go straight, you will be able to go either 45 degrees left, or 45 degrees right, though not both. In other words, if you cannot go straight, it will be unambiguous which way to turn (this is ensured by the constraints).</li> \n  <li>If, at any point, there is an 'N' straight ahead, or there is not an edge straight ahead and there is an 'N' 45 degrees off from straight ahead, then the edge you are following terminates at that node. Again, this will not be ambiguous, so if there is neither an 'E' nor an 'N' straight ahead, then exactly one of the pixels 45 degrees off from straight will be 'N' or 'E'.</li> \n </ol> Your task is to write a method parse, which takes a String[], <b>bitmap</b>, each of whose elements represents a row in the bitmap, and returns a String[], each of whose elements represents a single node. To do this, you should first number all of the nodes, starting with the most upper most nodes, and breaking ties by doing the left most first. Your numbering should start at 0. Then, the i<sup>th</sup> element of the return should be a comma delimited list of all the &lt;edge&gt;s coming out of the i<sup>th</sup> node. Each &lt;edge&gt; should be formatted as &lt;dest&gt;:&lt;length&gt;, where &lt;dest&gt; is the number of the node to which this edge connects, and &lt;length&gt; is the number of 'E's in the edge. The list of edges in each element should be sorted in ascending order by the index of the element they connect to. Ties should be broken by sorting the edges in ascending order by length.",
	"notes":[{
		"order":1,
		"val":"Only list individual loops (edges from a node to itself) once. See example 4."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"BitmapToGraph",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"parse",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String[] parse(String[] bitmap)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: { \"1:8\", \"0:8\" }",
			"id":0,
			"input":" {\"NEEE.....N\", \"....EEEEE.\", \"..........\"}",
			"note":"The upper left 'N' is node 0, and the upper right 'N' is node 1. There is an edge with 8 'E's connecting them, so element 0 of the return is \"1:8\" since the edge from 0 to 1 is of length 8. Similarly, element 1 of the return is \"0:8\"",
			"order":1
		},
		{
			"expect":"Returns: { \"3:1\", \"2:1\", \"1:1\", \"0:1\" }",
			"id":0,
			"input":" {\"N.N\", \".E.\", \"N.N\"}",
			"note":"The numbers of the nodes are as follows:  Thus, 0 is connected to 3, and 1 is connected to 2.",
			"order":2
		},
		{
			"expect":"Returns: { \"7:5\", \"6:5\", \"5:5\", \"4:5\", \"3:5\", \"2:5\", \"1:5\", \"0:5\" }",
			"id":0,
			"input":" {\"N..N..N\", \".E.E.E.\", \"..EEE..\", \"NEEEEEN\", \"..EEE..\", \".E.E.E.\", \"N..N..N\"}",
			"order":3
		},
		{
			"expect":"Returns: { \"0:7\", \"3:2,3:4\", \"\", \"1:2,1:4\" }",
			"id":0,
			"input":" {\".NE....NE..N\", \"E..E...E.E..\", \"E..E...E.E.E\", \".EE....NE..E\"} ",
			"note":"Notice that the loop from node 0 to itself is only listed once. Also note that when there are multiple edges from one node to another, they are sorted by length. Finally, note that there may be edge pixels that are not part of any edge.",
			"order":4
		},
		{
			"expect":"Returns: { \"0:20\" }",
			"id":0,
			"input":"{\".EE....\", \"E..E...\", \"E..E...\", \"NEEEEE.\", \"...E..E\", \"...E..E\", \"...E..E\", \"....EE.\"}",
			"order":5
		},
		{
			"expect":"Returns: { \"1:2,1:2\", \"0:2,0:2\" }",
			"id":0,
			"input":"{\".EE.\", \"N..N\", \".EE.\"}",
			"order":6
		},
		{
			"expect":"Returns: { \"6:4\", \"4:3\", \"6:3\", \"6:1,7:3,8:4\", \"1:3,5:5,9:3\", \"4:5\", \"0:4,2:3,3:1\", \"3:3\", \"3:4\", \"4:3\" }",
			"id":0,
			"input":" {\"N..N.........\", \".E.E.........\", \"..EE....EN...\", \"...E.N.E.....\", \"...NEEEEEN...\", \"...E.N.E.....\", \"..EE....EN...\", \".E.E.........\", \"N..N.........\"}",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"bitmap will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of bitmap will contain the same number of characters."
		},
		{
			"order":3,
			"val":"Each element of bitmap will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":4,
			"val":"Each character of bitmap will be an 'E', an 'N', or a '.'."
		},
		{
			"order":5,
			"val":"If you follow each edge as described in the problem statement, each edge will terminate at a node."
		},
		{
			"order":6,
			"val":"There will not be two adjacent 'N's."
		},
		{
			"order":7,
			"val":"All of the edges will be traversed in the same manner in both directions. In other words, if there is an edge from node i to node j, there will also be an edge from node j to node i which uses all of the same pixels."
		},
		{
			"order":8,
			"val":"There will be no ambiguity as to which way to go when a 45 turn must be made."
		}
	]
}