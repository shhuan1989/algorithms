{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11543&rd=14655",
	"statement":"<p> John is playing a solitaire computer game. There are n cards numbered from 1 to n and <b>m</b> slots numbered form 1 to <b>m</b> from the left to the right. He has to place each card into some slot using the following rules. </p> <p> Basic rules: </p>\n <ul> \n  <li>The first card (card number 1) may be placed in any slot.</li> \n  <li>The second card (card number 2) must be placed exactly <b>dist</b>[0] slots to the left or exactly <b>dist</b>[0] slots to the right of the first card.</li> \n  <li>Similarly, each card number <i>i</i> (<i>i</i> &gt; 1) must be placed exactly <b>dist</b>[<i>i</i>-2] slots to the left or exactly <b>dist</b>[<i>i</i>-2] slots to the right of the previous card (card number <i>i</i>-1).</li> \n  <li>Finally, if the last card (card number n) is exactly <b>dist</b>[n-1] slots to the left or exactly <b>dist</b>[n-1] slots to the right of the first card (card number 1) then John wins the game.</li> \n </ul> <p></p> <p> Special cases: </p>\n <ul> \n  <li>If an element of <b>dist</b> is equal to 0, then the corresponding card should be placed into the same slot as previous card.</li> \n  <li>If an element of <b>dist</b> is equal to -1, then the distance between the corresponding card and the previous card can be arbitrary.</li> \n </ul> <p></p> <p> You are given int[] <b>dist</b> that contains exactly n elements and the int <b>m</b>. Return the number (modulo 1234567891) of ways to place the cards into the slots so that John wins. </p> ",
	"notes":[
		{
			"order":1,
			"val":"More than one card can be placed into a single slot."
		},
		{
			"order":2,
			"val":"Slots do not wrap. There are no slots to the left of slot number 1 and no slots to the right of slot number ."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"TheCards",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"find",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int find(int[] dist, int m)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"5",
			"id":0,
			"input":"{3, 1, 2, 1, 1}",
			"note":"Several possible solutions are shown below (in order from card 1 to card 5): ",
			"order":1
		},
		{
			"expect":"47",
			"id":0,
			"input":"{4, 7}",
			"note":"There is no way to win for John in this case.",
			"order":2
		},
		{
			"expect":"7",
			"id":0,
			"input":"{1, 1, 1, 1}",
			"order":3
		},
		{
			"expect":"11",
			"id":0,
			"input":"{5, -1, -1, 4, 0, 2, -1, 8, 1, 2}",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"dist will contain between 2 and 36 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of dist will be between -1 and 10,000, inclusive."
		},
		{
			"order":3,
			"val":"m will be between 1 and 1,000,000, inclusive."
		}
	]
}