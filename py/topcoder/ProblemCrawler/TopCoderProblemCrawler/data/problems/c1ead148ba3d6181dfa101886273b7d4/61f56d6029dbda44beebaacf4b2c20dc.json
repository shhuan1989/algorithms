{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7881&rd=10839",
	"statement":"<p> An airline company has flights to all major cities in some country. From any major city it is possible to reach any other major city either by a direct flight, or by two or more flights. The company has provided a matrix containing the cheapest cost when taking a trip between any pair of major cities. When several flights are needed for a trip, the cost for that trip is the sum of the costs of the direct flights. The cost for a direct flight is a positive integer. </p> <p> Given this matrix, you want to find the least possible total cost of all direct flights. You can assume that if a flight exists from A to B, another flight with the same cost exists from B to A (and you should only count one of these direct flights), and that no other flights between the same pair of cities exist with a different cost. </p> <p> Create a class CostMatrix containing the method leastTotalCost which takes as input a String[] <b>matrix</b>, describing the cost matrix as a symmetric table. Each row <i>i</i> (0-indexed) will contain a single space separated list of integers, where the <i>j</i>th integer (0-indexed) in row <i>i</i> is the cheapest cost to take a trip between cities <i>i</i> and <i>j</i>. The diagonal entries will all be 0. The method should return an int, the least possible total cost for all direct flights. If the cost matrix is inconsistent, return -1. </p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CostMatrix",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"leastTotalCost",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int leastTotalCost(String[] matrix)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 6",
			"id":0,
			"input":"{\"0 2 2\", \"2 0 2\", \"2 2 0\"}",
			"note":"The only possible network of flight routes consists of three direct flights, each with cost 2, connecting every pair of cities, for a total cost of 6.",
			"order":1
		},
		{
			"expect":"Returns: 55",
			"id":0,
			"input":"{\"0 6 15 2 6\", \"6 0 9 8 12\", \"15 9 0 16 18\", \"2 8 16 0 4\", \"6 12 18 4 0\"}",
			"note":" ",
			"order":2
		},
		{
			"expect":"Returns: 69",
			"id":0,
			"input":"{\"0 1 6 17 26 13 7 16\", \"1 0 5 16 25 12 7 15\", \"6 5 0 21 21 8 12 11\", \"17 16 21 0 41 28 23 31\", \"26 25 21 41 0 13 32 10\", \"13 12 8 28 13 0 19 3\", \"7 7 12 23 32 19 0 22\", \"16 15 11 31 10 3 22 0\"} ",
			"note":"",
			"order":3
		},
		{
			"expect":"Returns: -1",
			"id":0,
			"input":"{\"0 1 3\", \"1 0 1\", \"3 1 0\"}",
			"note":"The cost matrix is inconsistent since it says the cheapest cost to travel between city 0 and 2 is 3, even though it obviously can be done at cost 2 by making an intermediate landing at city 1.",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"matrix will contain between 2 and 20 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element in matrix will be a single-space separated list of non-negative integers without leading or trailing spaces."
		},
		{
			"order":3,
			"val":"The number of integers in each element in matrix will be the same as the number of elements in matrix."
		},
		{
			"order":4,
			"val":"The ith integer in element j, where i != j, will be between 1 and 2500, inclusive, without leading zeros."
		},
		{
			"order":5,
			"val":"The ith integer in element i will be 0."
		},
		{
			"order":6,
			"val":"The ith integer in element j will be equal to the jth integer in element i."
		}
	]
}