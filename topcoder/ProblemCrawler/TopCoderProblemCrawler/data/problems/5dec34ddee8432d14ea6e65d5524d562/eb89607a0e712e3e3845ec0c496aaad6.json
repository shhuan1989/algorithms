{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6505&rd=10093",
	"statement":"<p>You want to arrange a group of students so that their heights are in non-descending order, and boys and girls alternate with each other.</p> <p>You will be given a String[] <b>students</b>. Each element of <b>students</b> will be in the format &quot;name height sex&quot; (quotes for clarity only), where height is an integer in centimeters and sex is either &quot;boy&quot; or &quot;girl&quot; (quotes for clarity only). Return a String containing a dash-separated list of the students' names in the desired order. If multiple return values are possible, return the one that comes first lexicographically. If there is no possible ordering, return &quot;&quot; (empty String). Note that dashes ('-') come earlier lexicographically than letters.</p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"StudentsOrdering",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"findOrder",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String findOrder(String[] students)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: \"An-Ted-Mary-Alex-Tanya-Josh\"",
			"id":0,
			"input":"{\"Alex 180 boy\", \"Josh 181 boy\", \"Mary 158 girl\", \"An 158 girl\", \"Tanya 180 girl\", \"Ted 158 boy\"}",
			"note":"",
			"order":1
		},
		{
			"expect":"Returns: \"Josh-An-Ted-Mary-Alex-Mary\"",
			"id":0,
			"input":"{\"Alex 180 boy\", \"Josh 158 boy\", \"Mary 180 girl\", \"An 158 girl\", \"Mary 180 girl\", \"Ted 158 boy\"}",
			"note":"Student names can repeat. ",
			"order":2
		},
		{
			"expect":"Returns: \"\"",
			"id":0,
			"input":"{\"Alex 180 boy\", \"Josh 170 boy\", \"An 158 girl\", \"Mary 180 girl\", \"Ted 175 boy\"}",
			"note":"There is no girl to place between Josh and Ted.",
			"order":3
		},
		{
			"expect":"Returns: \"Mary\"",
			"id":0,
			"input":"{\"Mary 175 girl\"}",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"students will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of students will be contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each element of students will be formatted as described in the problem statement."
		},
		{
			"order":4,
			"val":"The name of each student will consist of letters ('A'-'Z', 'a'-'z') only."
		},
		{
			"order":5,
			"val":"The height of each student will be between 100 and 250, inclusive."
		},
		{
			"order":6,
			"val":"The height of each student will contain no leading zeroes."
		}
	]
}