{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1124&rd=4324",
	"statement":"In a wireless network, the distance between nodes determines connectivity and latency. The further apart two nodes are the slower the connection. If two nodes are further apart than the maximum allowable range they cannot directly communicate. In our network, there will be 2 kinds of nodes: stationary and roaming. When a roaming node wants to communicate with another roaming node it must first communicate with one of the stationary nodes in its range. The stationary node it connects to will then send the transmission through as many stationary nodes as are necessary before finally sending to the destination roaming node. In other words, the transmission always starts at a roaming node, goes through one or more stationary nodes, and finally arrives at the destination roaming node. For example:<pre>\nR = roaming, S = stationary\n.......--R......\n....../.........\n.....S--........\n........\\.......\n.........S......\n.........|......\n..R--.../.......\n.....\\-S........\nAbove is one possible route between the two depicted roaming nodes.</pre> In this problem you will be given the initial positions of the roaming nodes and their initial velocities. Each roaming node will either be moving upward, leftward, rightward, or downward at the rate of one square per second. For example:<pre>\nroamNodes Input Format: Direction X Y\nroamNodes = {&quot;UP 9 0&quot;,&quot;DOWN 2 6&quot;}\nstatNodes Input Format: X Y\nstatNodes = {&quot;5 2&quot;,&quot;9 4&quot;,&quot;7 7&quot;}\n      Time 0                  Time 1                  Time 2\n 0123456789012345        0123456789012345        0123456789012345\n0.......--R......       0................       0................\n1....../.........       1....../--R......       1................\n2.....S--........       2.....S..........       2.....S...R......\n3........\\.......       3..../...........       3.........|......\n4.........S......       4.../.....S......       4..R------S......\n5.........|......       5..R.............       5................\n6..R--.../.......       6................       6................\n7.....\\-S........       7.......S........       7.......S........\nAbove are the positions of the nodes, and some possible routes.</pre> We are going to assume that the routing protocol will always choose the shortest possible end-to-end (roaming node-to-roaming node) route when connecting two roaming nodes. You will be given the wireless range of all nodes, the positions and velocities of the roaming nodes, and the positions of the stationary nodes. You will determine the length of the shortest route that will ever occur between the two roaming nodes in the system at any non-negative integral time. The distance between two nodes is always measured using the cartesian distance formula: sqrt((x2-x1)^2 + (y2-y1)^2). The length of a route is the sum of the distances when travelling from node to node along the route. If two nodes share the same location, their distance is 0. Two nodes (Roaming to Static or Static to Static) can communicate if their distance is less than or equal to the given maximum range. Round final answers to the nearest integer. If the two roaming nodes could never communicate return -1. See examples for further clarification.<br /><br /> <br /><br /> Create a class Wireless that contains the method bestRoute, which takes an int range, a String[] roamNodes, and a String[] statNodes and returns an int representing the length of the shortest route between the two roaming nodes in the system at any integral time greater than or equal to 0. If the two nodes could never communicate return -1. ",
	"notes":[
		{
			"order":1,
			"val":"Two nodes (Roaming to Static or Static to Static) can communicate if their distance if less than or equal to the given maximum range."
		},
		{
			"order":2,
			"val":"Final answers must be rounded to the nearest integer (i.e. .5 and greater rounds up, below .5 rounds down)"
		},
		{
			"order":3,
			"val":"All routes must start at a roaming node, pass through 1 or more static nodes, and complete at a roaming node."
		},
		{
			"order":4,
			"val":"UP means INCREASING Y coordinate whereas DOWN means DECREASING Y coordinate"
		},
		{
			"order":5,
			"val":"RIGHT measn INCREASING X coordinate whereas LEFT means DECREASING X coordinate"
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Wireless",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"bestRoute",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, String[], String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int bestRoute(int range, String[] roamNodes, String[] statNodes)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"DOWN 100 200\",\"DOWN 100 200\"}",
			"id":0,
			"input":"1",
			"note":"The roaming nodes will never be close enough to the static node to communicate.",
			"order":1
		},
		{
			"expect":"{\"DOWN 10000 10000\",\"RIGHT -10000 -10000\"}",
			"id":0,
			"input":"30000",
			"note":"They keep getting closer and closer until finally they all meet at the stationary node at (10000,-10000)",
			"order":2
		},
		{
			"expect":"{\"DOWN 0 10000\",\"LEFT 10000 0\"}",
			"id":0,
			"input":"3000",
			"order":3
		},
		{
			"expect":"{\"DOWN 0 0\",\"DOWN 0 0\"}",
			"id":0,
			"input":"30000",
			"order":4
		},
		{
			"expect":"{\"DOWN -20 0\",\"DOWN 80 1\"}",
			"id":0,
			"input":"20",
			"order":5
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"range will be between 1 and 30000 inclusive"
		},
		{
			"order":2,
			"val":"roamNodes will contain exactly 2 elements"
		},
		{
			"order":3,
			"val":"Each element of roamNodes will be of the form: Direction X Y where Direction is one of UP, DOWN, LEFT, or RIGHTX is an integer with no leading zeros between -10000 and 10000 inclusiveY is an integer with no leading zeros between -10000 and 10000 inclusive"
		},
		{
			"order":4,
			"val":"statNodes will contain between 1 and 30 elements inclusive"
		},
		{
			"order":5,
			"val":"Each element of statNodes will be of the form: X Y where X is an integer with no leading zeros between -10000 and 10000 inclusiveY is an integer with no leading zeros between -10000 and 10000 inclusive"
		},
		{
			"order":6,
			"val":"The final answer will be within .4999 of the nearest integer."
		}
	]
}