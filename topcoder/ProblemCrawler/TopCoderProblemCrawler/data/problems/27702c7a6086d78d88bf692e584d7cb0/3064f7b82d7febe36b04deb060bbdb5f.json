{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7289&rd=10662",
	"statement":"<p> Suppose that we have an array with <b>arrayLength</b> distinct elements. A quite common task in programming is to randomly permute this array. Novices who encounter this situation often implement the following algorithm: </p> \n <ul> \n  <li>Choose a positive integer <b>swapCount</b>.</li> \n  <li><b>swapCount</b> times randomly choose two distinct indices and swap the corresponding elements.</li> \n </ul> <p> This method of permuting an array is bad, because some permutations of the array will be more likely than others. In this problem, you shall compute <i>how</i> bad this method is for a given situation. </p> <p> You will be given four ints: <b>arrayLength</b>, <b>swapCount</b>, <b>a</b> and <b>b</b>. Consider the element of the array that initially had the index <b>a</b>. Write a method that will compute the probability that this element will have the index <b>b</b> at the end of the process described above. </p> ",
	"notes":[
		{
			"order":1,
			"val":"The indices of elements that are going to be swapped are generated with a uniform probability distribution, i.e., each pair of indices has got the same probability of being chosen."
		},
		{
			"order":2,
			"val":"The indices are zero-based, i.e., the array contains elements with indices 0 to -1, inclusive."
		},
		{
			"order":3,
			"val":"The returned value must have an absolute or relative error less than 1e-9."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"RandomSwaps",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"getProbability",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int, int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"double",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"double getProbability(int arrayLength, int swapCount, int a, int b)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"1",
			"id":0,
			"input":"5",
			"note":"There are ten possible pairs of indices to swap: (0,1), (0,2), (0,3), (0,4), (1,2), (1,3), (1,4), (2,3), (2,4), and (3,4). Out of these ten, the last six leave the element 0 untouched. Thus the probability is 6/10.",
			"order":1
		},
		{
			"expect":"1",
			"id":0,
			"input":"5",
			"note":"Only the swap (0,3) will move the element from position 0 to position 3. The probability of choosing this swap is 1/10.",
			"order":2
		},
		{
			"expect":"2",
			"id":0,
			"input":"5",
			"note":"Now there are two possibilities: Either the 0-th element stays in its place for the whole time, or it is swapped away and back again. The probability of the first possibility is (6/10)^2, for the second possibility it is (4/10)*(1/10).",
			"order":3
		},
		{
			"expect":"500",
			"id":0,
			"input":"100",
			"note":"For 100 elements, even after 500 swaps, the permutation won't be random enough.",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"arrayLength will be between 2 and 1,000, inclusive."
		},
		{
			"order":2,
			"val":"swapCount will be between 1 and 100,000, inclusive."
		},
		{
			"order":3,
			"val":"a and b will be between 0 and arrayLength-1, inclusive."
		}
	]
}