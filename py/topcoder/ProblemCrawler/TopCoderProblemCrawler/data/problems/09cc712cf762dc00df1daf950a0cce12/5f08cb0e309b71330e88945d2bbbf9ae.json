{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1019&rd=4703",
	"statement":"You must write a class Calculate, with a method calc, which takes a String <b>expression</b>, where <b>expression</b> is a mathematical expression. You should calculate the value of the expression, using the standard order of operations: \n <ul>\n  <li>Always evaluate expressions in parentheses first.</li> \n  <li>Exponentiation next.</li> \n  <li>Multiplication and division next.</li> \n  <li>Addition and subtraction last.</li> \n </ul> Operators with the same precedence should be evaluated from left to right. So 2^3^2 = (2^3)^2 = 64, and 3-2+1 = (3-2)+1 = 2<br /><br /><br /><br /> Thus, if <b>expression</b> = &quot;1+2*3^(1+1)-2&quot;, we first calculate (1+1), and get &quot;1+2*3^2-2&quot;. Next we apply exponentiation and get &quot;1+2*9-2&quot;. Then multiplication and division gives us &quot;1+18-2&quot;. Last, addition and subtraction, left to right, gives 17. <br /><br /><br /><br /> Furthermore, you will be given a String[] <b>variables</b> each of whose elements represents a variable which may be used in <b>expression</b>. Each element of <b>variables</b> will be formatted as &quot;&lt;variable&gt; &lt;value&gt;&quot;, where &lt;variable&gt; is a sequence of 1 or more letters ('a'-'z' and 'A'-'Z'), and &lt;value&gt; is an integer. For example, if <b>variables</b> = {&quot;x 1&quot;, &quot;y 11&quot;}, and <b>expression</b> = &quot;x*y+3*x&quot;, we substitute the values for the variables to get 1*11+3*1 = 14. <br /><br /><br /><br /> The <b>expression</b> will conform to the following grammar: \n <ul>\n  <li>&lt;expression&gt; ::= (&lt;expression&gt;) | &lt;expression&gt;&lt;op&gt;&lt;expression&gt; | &lt;val&gt;</li>\n  <li>&lt;op&gt;::= '+'|'-'|'/'|'*'|'^'</li>\n  <li>&lt;val&gt;::= a sequence of 1 or more digits or a &lt;variable&gt; from <b>variables</b></li>\n </ul>",
	"notes":[
		{
			"order":1,
			"val":"All of the intermediate and final results of both division and exponentiation will be integers between -2^31 and 2^31 - 1, inclusive. (see constraints)"
		},
		{
			"order":2,
			"val":"Variable names are case sensitive."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Calculate",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"calc",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String, String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int calc(String expression, String[] variables)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"x 1\", \"y 11\"}",
			"id":0,
			"input":"\"x*y+3*x\"",
			"note":"The example from the problem statement.",
			"order":1
		},
		{
			"expect":"{\"x 53\", \"xx 32\", \"p 3\",\"t 2\",\"n -1\",\"v -21\"}",
			"id":0,
			"input":"\"x^p*2^(2^p)/t^p^t+xx*n^v\"",
			"order":2
		},
		{
			"expect":"{\"t 00000000000002\",\"a 999999999\"}",
			"id":0,
			"input":"\"t^003^t\"",
			"note":"Substituting, we get 2^3^2 = 8^2 = 64.",
			"order":3
		},
		{
			"expect":"{\"aA 01234\",\"Aa 98\"}",
			"id":0,
			"input":"\"(8*(Aa^(aA-1230))-aA^2+((00)))*(0-1)\"",
			"order":4
		},
		{
			"expect":"{\"t 2\"}",
			"id":0,
			"input":"\"0-2+t^30+t^30+1\"",
			"note":"The largest possible result.",
			"order":5
		},
		{
			"expect":"{\"t 2\"}",
			"id":0,
			"input":"\"1+(0-t)^31-1\"",
			"note":"The smallest possible result.",
			"order":6
		},
		{
			"expect":"{\"x -100\"}",
			"id":0,
			"input":"\"((5-x+1^x))\"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"expression will include only the characters '0' to '9', '+', '-', '*', '/', '^', '(', and ')' and letters ('a'-'z' and 'A'-'Z')."
		},
		{
			"order":2,
			"val":"expression will be well-formed, conforming to the grammar in the problem statement."
		},
		{
			"order":3,
			"val":"The final result, and all intermediate results will be integers in the range -2^31 to 2^31-1, inclusive. This includes all numbers and variables, so &quot;0*10000000000&quot; is not allowed, nor is &quot;0*a&quot;, {&quot;a 10000000000&quot;}."
		},
		{
			"order":4,
			"val":"expression will not result in division by 0 or 0^x, for x less than or equal to 0."
		},
		{
			"order":5,
			"val":"variables will have between 0 and 50 elements, inclusive."
		},
		{
			"order":6,
			"val":"Each element of variables will be formatted as &quot;&lt;variable&gt; &lt;value&gt;&quot;, where &lt;variable&gt; is a sequence of 1 or more letters ('a'-'z' and 'A'-'Z'), and &lt;value&gt; is an integer between -2^32 and 2^32-1, inclusive (possibly with leading zeros)."
		},
		{
			"order":7,
			"val":"No two elements of variables will have the same &lt;variable&gt;."
		},
		{
			"order":8,
			"val":"Each variable in expression will be found in variables."
		},
		{
			"order":9,
			"val":"expression will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":10,
			"val":"Each element of variables will contain between 3 and 50 characters, inclusive."
		}
	]
}