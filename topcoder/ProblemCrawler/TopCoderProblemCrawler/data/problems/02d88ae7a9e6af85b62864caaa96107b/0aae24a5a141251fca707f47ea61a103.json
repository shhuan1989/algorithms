{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11779&rd=14726",
	"statement":"Pikachu is a well-known character in the Pokemon anime series. Pikachu can speak, but only 3 syllables: &quot;pi&quot;, &quot;ka&quot;, and &quot;chu&quot;. Therefore Pikachu can only pronounce strings that can be created as a concatenation of one or more syllables he can pronounce. For example, he can pronounce the words &quot;pikapi&quot; and &quot;pikachu&quot;. <br /><br /> <br /><br /> <br /><br /> We need to teach our Pikachu to use N different words, conveniently numbered 0 through N-1. To do this, we need to encode the words into N distinct strings Pikachu will be able to pronounce. For example, we may encode &quot;electric&quot; as &quot;pikapi&quot; and &quot;mouse&quot; as &quot;pikachu&quot;. As Pikachu sometimes omits pauses between the words he says, the encoding we will use must be prefix-free. More formally, we need to choose strings code[0], code[1], ..., code[N-1] such that: \n <ol> \n  <li>For any i, code[i] must be a string that is generated by concatenating one or more copies of the strings &quot;pi&quot;, &quot;ka&quot; and &quot;chu&quot;.</li> \n  <li>For any distinct i and j, code[i] is not a prefix of code[j].</li> \n </ol> Of course, there are infinitely many such codes. We want you to find all the most efficient codes. The N words we need to encode may have distinct frequencies. You are given the relative frequences of all words as a int[] <b>freq</b>. (I.e., the actual frequency of the i-th word is <b>freq</b>[i]/S, where S is the sum of all elements of <b>freq</b>.) For a given code, its total cost can be computed as the sum of (<b>freq</b>[i]*length(code[i])) over all i. <br /><br /> <br /><br /> <br /><br /> Let A be the minimal total cost that can be achieved, and let B be the number of distinct codes that have the total cost equal to A. Your method must return a int[] with two elements: element 0 should be the value A, and element 1 should be the value (B modulo 1,000,000,009).",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"Pikachu",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"bestEncoding",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] bestEncoding(int[] freq)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: {4, 2 }",
			"id":0,
			"input":"{1,1}",
			"note":"We have two words with the same frequency. One of the two optimal codes is (\"pi\", \"ka\"), i.e., word 0 is encoded as \"pi\" and word 1 is encoded as \"ka\". The total cost of this code is 1*length(\"pi\") + 1*length(\"ka\") = 1*2 + 1*2 = 4. The other optimal code is (\"ka\", \"pi\").",
			"order":1
		},
		{
			"expect":"Returns: {9, 4 }",
			"id":0,
			"input":"{1,1,2}",
			"note":"There are 4 solutions:  (\"chu\", \"ka\", \"pi\"), (\"ka\", \"chu\", \"pi\"), (\"pi\", \"chu\", \"ka\") and (\"chu\", \"pi\", \"ka\").  Note that solutions that encode word 2 as \"chu\" are not optimal.",
			"order":2
		},
		{
			"expect":"Returns: {13, 48 }",
			"id":0,
			"input":"{1,1,1,1}",
			"note":"One of the 48 optimal codes is (\"pi\", \"chu\", \"kapi\", \"kaka\").",
			"order":3
		},
		{
			"expect":"Returns: {309, 96 }",
			"id":0,
			"input":"{2,3,5,7,11,13,17,19}",
			"note":"",
			"order":4
		},
		{
			"expect":"Returns: {10290, 288 }",
			"id":0,
			"input":"{533,533,533,353,335,335}",
			"note":"",
			"order":5
		},
		{
			"expect":"Returns: {72, 362124467 }",
			"id":0,
			"input":"{1,1,1,1,1,1,1,1,1,1,1,1,1}",
			"note":"Don't forget to use modular arithmetics when computing B.",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"freq will contain between 2 and 30 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of freq will be between 1 and 1000, inclusive."
		}
	]
}