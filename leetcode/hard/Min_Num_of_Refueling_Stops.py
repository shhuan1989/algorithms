# -*- coding: utf-8 -*-

"""
created by shhuan at 2019/7/11 23:12

"""

import math
import collections
import bisect
import heapq
import time
import itertools
import sys
from typing import List


class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        fuel = startFuel
        stations.sort()
        stock = []
        heapq.heapify(stock)
        current = 0
        ans = 0
        for i, s in enumerate(stations):
            if s[0] >= target:
                break

            fuel -= s[0] if i == 0 else s[0]-stations[i-1][0]
            if fuel < 0:
                while stock:
                    v = abs(heapq.heappop(stock))
                    fuel += v
                    ans += 1
                    if fuel >= 0:
                        break
            if fuel < 0:
                return -1

            heapq.heappush(stock, -s[1])
            current = s[0]

        fuel -= target - current
        if fuel < 0:
            while stock:
                v = abs(heapq.heappop(stock))
                fuel += v
                ans += 1
                if fuel >= 0:
                    break
        return -1 if fuel < 0 else ans

    def minRefuelStops2(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        stations = [s for s in stations if s[0] <= target]
        stations.sort()
        n = len(stations)
        if n <= 0:
            return 0 if target <= startFuel else -1

        if startFuel >= target:
            return 0

        dp = [[float('-inf') for _ in range(n + 1)] for _ in range(n + 1)]
        dp[0][0] = startFuel
        for i in range(1, n + 1):
            dp[i][0] = startFuel - stations[i - 1][0] if startFuel - stations[i - 1][0] >= 0 else float('-inf')
        for i in range(1, n + 1):
            s, t = stations[i - 2] if i > 1 else [0, 0], stations[i - 1]
            d = t[0] - s[0]
            for j in range(1, i+1):
                f1 = dp[i - 1][j - 1] + t[1] - d if dp[i - 1][j - 1] - d >= 0 else float('-inf')
                f2 = dp[i - 1][j] - d if dp[i - 1][j] - d >= 0 else float('-inf')
                dp[i][j] = max(dp[i][j], f1)
                dp[i][j] = max(dp[i][j], f2)

        for i in range(1, n + 1):
            if dp[n][i] >= target - stations[-1][0]:
                return i

        return -1


s = Solution()
# print(s.minRefuelStops(100, 50, [[50, 50]]))
# print(s.minRefuelStops(100, 1, [[10, 100]]))
# print(s.minRefuelStops(100, 10, [[10,60],[20,30],[30,30],[60,40]]))
print(s.minRefuelStops(1000000, 8900, [[4122,2854],[7324,5795],[8239,6109],[10197,5660],[10849,7261],[13034,5605],[13520,8047],[13980,8026],[14877,2307],[15034,7640],[18511,4308],[19643,7727],[21805,7937],[22679,3492],[24400,4643],[26322,6534],[27952,8761],[28593,3485],[29291,7258],[35965,388],[39843,2788],[40710,3110],[42718,3722],[43567,3486],[43896,8633],[46931,893],[48208,6934],[48571,4774],[49252,2752],[49377,160],[51838,8651],[52272,7726],[55349,3281],[55521,2254],[56186,6914],[56722,7576],[59642,2634],[60599,8657],[63650,1861],[69036,8579],[69145,142],[70157,8223],[72579,8089],[74782,4686],[76273,5392],[76535,6992],[81119,7642],[82196,8545],[82309,5160],[83951,7834],[84192,309],[85244,7750],[88715,2400],[92552,1767],[94761,6392],[101819,6299],[102573,2572],[104257,1342],[106401,8800],[107567,1682],[109142,1505],[114294,6805],[114597,1121],[116495,1160],[121696,4677],[123100,3059],[128271,3622],[130023,452],[130319,4119],[130762,2039],[130764,1588],[134836,3199],[136311,3066],[136643,8593],[140742,4448],[147520,917],[149224,4970],[149261,8338],[149893,4163],[150681,5403],[154032,7514],[154136,8770],[159190,7939],[159211,3892],[161998,5064],[162232,1533],[164935,8475],[165741,7671],[173391,1614],[173570,1167],[174084,779],[175900,6358],[177636,3384],[179378,5510],[179815,3370],[181115,2300],[184746,8523],[186609,2312],[195509,2605],[195560,4879],[198784,1851],[199018,7505],[199995,3550],[201011,8682],[202878,4124],[205958,2710],[208281,6528],[208350,7127],[209858,8798],[210936,7090],[211063,7364],[212049,8342],[213520,6292],[219921,447],[220001,4108],[220776,2243],[223261,8435],[229002,583],[229875,1431],[231530,513],[236103,2566],[238825,7304],[239022,6125],[240445,5143],[240797,2236],[241998,7451],[243662,7770],[248980,7573],[249629,2046],[255757,2591],[257347,8887],[262377,8347],[263740,2264],[264533,6980],[266829,248],[266986,1772],[267662,6950],[268730,2750],[268851,8012],[270237,694],[271028,24],[271907,7603],[272656,7840],[278098,1616],[279496,2805],[280914,1068],[284451,611],[288732,133],[289283,1379],[289904,3461],[291158,329],[294220,608],[294798,5498],[298045,8101],[298428,2500],[302363,3790],[302767,7698],[304008,8110],[312236,4376],[313357,1466],[314247,3713],[314724,21],[314767,6319],[318553,538],[318712,1248],[321137,8205],[323289,1564],[328072,4481],[330242,1015],[331779,8036],[334950,8698],[343209,1480],[345377,3612],[345642,8507],[357574,1587],[358135,2689],[359014,1807],[361769,8733],[367213,3292],[370239,7086],[375240,4894],[380972,860],[383581,3108],[384272,3588],[387933,3283],[391026,5077],[392472,133],[393871,385],[396559,4621],[397874,7026],[398270,8527],[402361,6397],[403067,7916],[404257,2715],[404871,1246],[405579,5945],[411140,1878],[412034,7503],[413034,7801],[416014,2361],[419488,5629],[424909,2326],[426186,7325],[426632,828],[428302,8130],[430375,3894],[430923,1457],[431458,1126],[431930,6738],[432345,4210],[432510,3529],[433316,5885],[433723,7010],[435819,6679],[437633,7082],[439020,1685],[440782,1777],[441830,7452],[443931,1218],[444568,2996],[446908,5789],[447221,8743],[447398,310],[453805,1929],[456294,2920],[458250,7171],[462572,4069],[469766,7104],[471450,4217],[472150,6672],[473520,4019],[475181,8499],[477992,7514],[480686,1954],[482641,8170],[483084,7953],[483575,2068],[484110,7979],[484366,405],[484371,3641],[485240,1064],[485778,6013],[486896,5814],[486970,7802],[488570,5390],[489680,4010],[490141,7100],[492071,1760],[492275,7191],[492327,1462],[492602,4510],[496925,1190],[497800,6756],[497842,8167],[497965,4412],[498842,4717],[506466,21],[508133,3496],[509253,3668],[509871,2550],[510444,3205],[516944,7458],[521005,477],[524176,3233],[525284,2107],[527573,4702],[527684,2724],[527821,4825],[530047,6279],[532437,1754],[539215,3746],[544351,2469],[546884,8879],[548454,6305],[550716,8771],[551189,3320],[556871,6607],[557797,879],[561681,6163],[563027,7775],[563379,1497],[563628,2335],[567954,5840],[568361,5048],[569703,5503],[573892,8135],[577498,6691],[579741,3275],[580447,8082],[583267,8334],[587464,8081],[590965,7249],[593658,728],[595205,4313],[597518,901],[599924,2257],[602049,5800],[602234,8485],[604169,4273],[607116,711],[607930,3797],[608699,7704],[610646,449],[611747,6466],[612214,6711],[612468,7926],[616042,3040],[616247,1512],[621235,7142],[622072,215],[624824,3298],[625130,3550],[633487,5073],[634842,4711],[634993,7965],[641076,5680],[643786,8417],[644248,4676],[646666,8090],[647104,448],[649358,7159],[655057,6670],[661576,8060],[661611,480],[662171,6871],[662348,3638],[668210,4231],[669473,227],[670449,4773],[670622,5738],[677430,6026],[680985,7544],[681521,6800],[685512,2155],[690008,5505],[690438,594],[692515,2025],[695465,3243],[700218,3765],[700662,547],[702274,453],[702685,2012],[703842,2194],[711738,772],[712137,1716],[712220,7910],[713226,3883],[715974,1087],[717713,7926],[717961,5383],[719474,1257],[719835,1449],[720789,813],[722759,1484],[722876,8117],[729113,2808],[729873,1239],[730586,6297],[731871,1189],[732274,2765],[733511,7135],[735839,2801],[735952,5584],[738165,8832],[738326,4531],[743189,2562],[744198,1309],[744244,2258],[750560,5393],[752382,635],[753398,1585],[755108,7476],[756665,4215],[757175,736],[759541,6798],[761701,7543],[765476,714],[770868,4480],[774241,658],[776179,1105],[777596,3734],[777842,6592],[782766,919],[785035,1621],[786273,2455],[787331,1610],[788509,3989],[790262,4732],[793539,5447],[793917,218],[797392,926],[797936,6029],[799701,5488],[801532,4359],[803344,6420],[804110,2146],[804867,4819],[805471,2316],[809791,4648],[810200,30],[810305,1451],[814918,3054],[815331,5150],[821927,2420],[826124,347],[827097,7129],[827778,8672],[827917,5432],[828067,4999],[831706,7759],[832325,580],[833073,5374],[834495,7948],[836948,1656],[837992,3109],[842416,7724],[848112,3627],[848788,5048],[851887,4954],[854201,6033],[854758,3239],[858113,2380],[859201,8381],[860503,3612],[861887,6242],[865499,2072],[867324,2063],[867796,897],[868941,1376],[874592,2583],[876021,8458],[876043,3398],[883120,6904],[887075,3903],[890536,6892],[893624,2402],[894986,7679],[896448,5498],[896639,806],[898398,7446],[899437,6772],[900092,6249],[900112,4311],[900524,6080],[902910,4823],[904359,8289],[905088,3243],[905665,7855],[905713,3230],[905758,6501],[905937,8085],[911945,6638],[912047,3346],[916132,6014],[918524,1629],[919031,900],[919178,7027],[924036,3243],[924696,5862],[925623,1322],[929472,3290],[929874,7570],[930099,7087],[931806,6850],[934067,4538],[935606,592],[936759,7286],[937598,6900],[938018,428],[940803,1874],[943917,7106],[944675,5824],[945741,2989],[946766,4493],[952338,7096],[954818,2767],[956458,8346],[956474,1342],[960028,1122],[962490,412],[963343,1419],[971368,1201],[973618,8572],[974457,4639],[976109,3367],[976346,5378],[976736,421],[978859,838],[980802,2565],[983056,2732],[986320,1206],[988373,1818],[988808,8557],[989973,2356],[990464,4413],[992859,4694],[993977,4038],[995664,738],[998063,6333],[999043,448]]))