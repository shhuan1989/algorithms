//
// Created by shhuan on 2017/11/14.
//

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <set>
#include <queue>
#include <ostream>
#include <istream>
#include <typeinfo>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <limits>
#include <fstream>
#include <array>
#include <list>
#include <bitset>
#include <functional>
#include <random>
using namespace std;


#define pb push_back
#define pp pop_back
#define pf push_front
#define ppf pop_front
#define _ inline
#define x first
#define y second
#define ins insert
#define ers erase
#define mp make_pair
#define mt make_tuple
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define sz size
#define rsz resize
#define pw2(x) (1<<(x))
#define chcpy(Vec) copy(Vec.begin(), Vec.end(), ostream_iterator<char>(cout))
#define intcpy(Vec) copy(Vec.begin(), Vec.end(), ostream_iterator<int>(cout, " "))
#define elif else if
#define uset unordered_set
#define umap uorderd_map
#define rep(i, l, r) for(int i=l; i<r; i++)
#define rep2(i, l, r) for(int i=l; i<=r; i++)
#define rrep(i, l, r) for(int i=l; i>r; i--)
#define rrep2(i, l, r) for(int i=l; i>=r; i--)


typedef long L;
typedef long long LL;
typedef pair<int, int> PII;
typedef pair<long, long> PLL;
typedef double LD;
typedef unsigned int UINT;
typedef unsigned long long ULL;
typedef unsigned long UL;
typedef vector<vector<int>> VVI;
typedef vector<vector<UINT>> VVUINT;
typedef vector<vector<L>> VVL;
typedef vector<vector<LL>> VVLL;
typedef vector<int> VI;
typedef vector<long> VL;
typedef vector<LL> VLL;
typedef vector<PII> VPII;
typedef vector<PLL> VPLL;
typedef vector<LD> VLD;
typedef vector<bool> VB;
typedef tuple<LL, LL, LL> TLLL;
typedef tuple<int, int, int> TIII;
typedef set<int> SI;
typedef set<long> SL;
typedef set<LL> SLL;
typedef multiset<int> MSI;
typedef multiset<long> MSL;
typedef multiset<LL> MSLL;

struct pt {
	LD x, y;
	pt() {}
	pt(LD x1, LD y1) { x = x1, y = y1; }
	pt operator- (pt nxt) const { return pt(x - nxt.x, y - nxt.y); }
	pt operator+ (pt nxt) const { return pt(x + nxt.x, y + nxt.y); }
	pt operator/ (LD val) const { return pt(x / val, y / val); }
	pt operator* (LD val) const { return pt(x * val, y * val); }
	LD len() { return sqrt(x * x + y * y); }
	LD squareLen() { return x * x + y * y; }
	pt norm(LD val) const { LD tmp = pt(x, y).len(); return pt(x * val / tmp, y * val / tmp); }

	// cross product, a X b
	LD operator% (pt nxt) const { return x * nxt.y - y * nxt.x; }
};


const int INF = 1000000007;
const double eps = 0.000001;

bool cross(pt a, LD r1, pt b, LD r2) {
	if (r1 < r2) swap(r1, r2);
	if ((a - b).squareLen() < r1 * r1) {
		//in
		if ((a - b).squareLen() > (r1 - r2) * (r1 - r2)) return 1;
	}
	else {
		//out
		if ((a - b).squareLen() < (r1 + r2) * (r1 + r2)) return 1;
	}
	return 0;
}

bool in(pt a, LD r1, pt b, LD r2) {
	if (r1 > r2) return 0;
	return (a - b).len() + r1 <= r2;
}

int sign(LD val) {
	if (val < 0) return -1;
	return 1;
}

pt a, b;
int n;
pair<pt, int> q[500007];

LD solve(pt v) {
	vector<pair<LD, int> > t;
	pt center = a + (b - a) / 2;

	bool crossStart = 0;

	for (int i = 0; i < n; i++) {
		LD l, r;
		LD minl = ((a - b) / 2).len();
		// q[i] and v are in same side of vector b-a
		if (sign((b - a) % (q[i].x - a)) == sign((b - a) % ((center + v) - a))) {
			if (in(q[i].x, q[i].y, center, ((b - a) / 2).len())) continue;
			if (cross(center, minl, q[i].x, q[i].y)) crossStart = 1, l = 0;
			else {
				// q[i] is out of circle (center, minl)
				LD vl = 0, vr = 1e12;
				for (int it = 0; it < 100; it++) {
					LD vm = (vl + vr) / (LD)2;
					pt s2 = a + (b - a) / 2 + v.norm(vm);
					
					// triangle, center is s2, vm**2 + minl**2 == r**2
					LD r2 = sqrt(vm * vm + ((a - b) / 2).squareLen());
					if (cross(q[i].x, q[i].y, s2, r2) || in(q[i].x, q[i].y, s2, r2))
						vr = vm;
					else
						vl = vm;
				}
				// vl is minimus r of circle which doesn't cross circle q[i]
				l = vl;
			}
			LD vl = 0, vr = 1e12;
			for (int it = 0; it < 100; it++) {
				LD vm = (vl + vr) / (LD)2;
				pt s2 = a + (b - a) / 2 + v.norm(vm);
				LD r2 = sqrt(vm * vm + ((a - b) / 2).squareLen());
				if (in(q[i].x, q[i].y, s2, r2))
					vr = vm;
				else
					vl = vm;
			}

			// vr is the maximum r for circle which doesn't cross circle q[i], etc, q[i] in this circle
			r = vr;
		}
		else {
			// q[i] and v are in different side of line AB
			bool c = cross(center, ((a - b) / 2).len(), q[i].x, q[i].y);
			if (!in(q[i].x, q[i].y, center, ((b - a) / 2).len()) && !c) continue;
			if (c) crossStart = 1, l = 0;
			else {
				LD vl = 0, vr = 1e12;
				for (int it = 0; it < 100; it++) {
					LD vm = (vl + vr) / (LD)2;
					pt s2 = a + (b - a) / 2 + v.norm(vm);
					LD r2 = sqrt(vm * vm + ((a - b) / 2).squareLen());
					if (in(q[i].x, q[i].y, s2, r2))
						vl = vm;
					else
						vr = vm;
				}
				l = vl;
			}
			LD vl = 0, vr = 1e12;
			for (int it = 0; it < 100; it++) {
				LD vm = (vl + vr) / (LD)2;
				pt s2 = a + (b - a) / 2 + v.norm(vm);
				LD r2 = sqrt(vm * vm + ((a - b) / 2).squareLen());
				if (cross(q[i].x, q[i].y, s2, r2) || in(q[i].x, q[i].y, s2, r2))
					vl = vm;
				else
					vr = vm;
			}
			r = vr;
		}
		t.pb(mp(l, -1));
		t.pb(mp(r, 1));
		//pt s2 = a + (b - a) / 2 + v.norm(r);
		//cout << i << ' ' << l << ' ' << r << ' ' << s2.x << ' ' << s2.y << ' ' << sqrt(r * r + ((a - b) / 2).squareLen()) << endl;
	}
	//cout << v.x << ' ' << v.y << endl;

	sort(all(t));
	LD val = 0;

	// some circle crosses with the minimus circle whose diameter is AB
	if (crossStart) {
		int bal = 0;
		for (int i = 0; i < t.size(); i++) {
			bal += t[i].y;
			if (bal == 0) {
				val = t[i].x;
				break;
			}
		}
	}

	return sqrt(val * val + ((a - b) / 2).squareLen());
}


//O(nlog(n));
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> a.x >> a.y >> b.x >> b.y >> n;
	for (int i = 0; i < n; i++) cin >> q[i].x.x >> q[i].x.y >> q[i].y;

	// perpendicular to the middle of the segment AB
	pt w = pt(-(a - b).y, (a - b).x);

	cout.precision(10);
	cout << fixed << (double)min(solve(w), solve(pt(0, 0) - w));
}