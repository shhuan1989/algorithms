{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11362&rd=14524",
	"statement":"Taro and Brus are playing a new game called Square Series. The game involves placing a non-empty sequence of black and white squares following a couple of rules:<br /><br /> <br /><br /> \n <ul>\n  <li>The first square has side length 1.</li> \n  <li>For i &gt; 1, if the color of square i (1-indexed) is different than the color of square i-1, its side length will be equal to the side length of the previous square plus 1. If the colors are the same, then the side length will be equal to the previous side length minus 1. Note that a side length of 0 would make the shape not a square, so it is not legal to repeat the color after a length 1 square.</li>\n </ul> <br /><br /> Taro wants to prepare new challenges for Brus and would like you to make a program that will generate valid square series such that it matches String <b>pattern</b> and the length of the last square is equal to <b>lastLength</b>. The <b>pattern</b> contains 'W' and 'B' representing white and black squares respectively and exactly one '?' character. To generate a sequence of strings that matches the <b>pattern</b>, replace the '?' character with a (possibly empty) sequence of white and black squares.<br /><br /> <br /><br /> Given the <b>pattern</b> and <b>lastLength</b>, if there is no valid sequence of squares that follows the aforementioned rules, matches the <b>pattern</b> and finishes with a square of side length equal to <b>lastLength</b>, then return &quot;...&quot; (quotes for clarity). Otherwise, return the shortest possible sequence that matches the pattern and finishes with a square of the appropriate side length. In case there is more than one sequence with a length equal to the shortest possible, return the lexicographically first of them.",
	"notes":[{
		"order":1,
		"val":"The lexicographically earlier of two Strings of the same length is the one that has the earlier character (using ASCII ordering) at the first position at which they differ."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"SquareSeries",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"completeIt",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String completeIt(String pattern, int lastLength)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"2",
			"id":0,
			"input":"\"W?B\"",
			"note":"It is possible to replace the '?' character with an empty sequence. The sequence \"WB\" is the shortest one that matches the pattern and ends with a square of length 2.",
			"order":1
		},
		{
			"expect":"5",
			"id":0,
			"input":"\"?\"",
			"note":"Any sequence can match the \"?\" pattern. \"BWBWB\" and \"WBWBW\" are the shortest sequences possible that end with a square of size 5. \"BWBWB\" is the lexicographically earlier of the two. ",
			"order":2
		},
		{
			"expect":"10",
			"id":0,
			"input":"\"BWBBBBW?WB\"",
			"note":"Every sequence that begins with BWBBBB is invalid because it will require an invalid square of size 0 at position 6 (1-based).",
			"order":3
		},
		{
			"expect":"15",
			"id":0,
			"input":"\"BWBWBW?WBWBWBW\"",
			"note":"",
			"order":4
		},
		{
			"expect":"1",
			"id":0,
			"input":"\"WBWBWBWBWBWWBB?W\"",
			"note":"",
			"order":5
		},
		{
			"expect":"3",
			"id":0,
			"input":"\"?WBWBWBBB\"",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"lastLength will be between 1 and 100, inclusive."
		},
		{
			"order":2,
			"val":"pattern will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each character in pattern will be 'W', 'B' or '?'."
		},
		{
			"order":4,
			"val":"pattern will contain exactly one '?' character."
		}
	]
}