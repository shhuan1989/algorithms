{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=5874&rd=8076",
	"statement":"<p>The <i>organization</i> of an array A is computed as follows: Create an array B containing the exact same elements as A, but sorted in non-descending order. Count the number of distinct values for i such that A[i] is equal to B[i]. This value is the <i>organization</i> of the array A. For example, the <i>organization</i> of { 2, 1, 1, 3 } is 2 because the second and fourth elements are not changed after sorting.</p> <p>Two elements may be swapped only if the <i>organization</i> of the array would increase as a result of the swap.</p> <p>You will be given a int[] <b>arrayData</b>. Return the maximal number of the swap operations that can be performed.</p> ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"SwapSorter",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maximizeSwaps",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maximizeSwaps(int[] arrayData)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"Returns: 1",
			"id":0,
			"input":"{2, 1, 1, 3}",
			"note":"The only possible swap is {2, 1, 1, 3} -> {1, 1, 2, 3}",
			"order":1
		},
		{
			"expect":"Returns: 3",
			"id":0,
			"input":"{7, 5, 3, 4}",
			"note":"{7, 5, 3, 4} -> {3, 5, 7, 4} -> {3, 4, 7, 5} -> {3, 4, 5, 7}",
			"order":2
		},
		{
			"expect":"Returns: 2",
			"id":0,
			"input":"{2, 1, 4, 3}",
			"note":"{2, 1, 4, 3} -> {1, 2, 4, 3} -> {1, 2, 3, 4}",
			"order":3
		},
		{
			"expect":"Returns: 0",
			"id":0,
			"input":"{1, 7, 8, 12, 17, 19, 21, 23, 24, 25, 26, 27, 35}",
			"note":"The array is already sorted.",
			"order":4
		},
		{
			"expect":"Returns: 5",
			"id":0,
			"input":"{2, 3, 3, 1, 1, 2}",
			"order":5
		},
		{
			"expect":"Returns: 11",
			"id":0,
			"input":"{2, 3, 4, 1, 7, 7, 5, 5, 8, 7, 10, 10, 10, 9, 9, 9}",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"arrayData will have between 1 and 50 elements, inclusive. "
		},
		{
			"order":2,
			"val":"Each element of arrayData will be between 1 and 1000, inclusive. "
		}
	]
}