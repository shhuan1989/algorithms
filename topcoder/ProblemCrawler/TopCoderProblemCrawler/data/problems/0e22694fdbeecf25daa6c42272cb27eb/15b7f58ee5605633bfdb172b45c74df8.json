{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=87&rd=3007",
	"statement":"<pre>Class Name:  AlienTakeover\nMethod Name: takeOverTime\nParameters:  String[]\nReturns:     int\n\nZorono is the King of an alien tribe planning to take over Earth.  Taking over\nEarth consists of many tasks, some tasks cannot occur until other tasks are\ncomplete.  Each task has a specified duration - the time it takes the task to\ncomplete.  Conveniently, Zorono's alien kingdom has infinite labor and\nresources, so as many tasks as necessary can be done simultaneously.\n\nZorono wants a timetable for how long it will take the alien tribe to\ncompletely takeover the Earth and has hired you to write a program to give him\nhis timetable.\n\nImplement a class AlienTakeover, which contains a method takeOverTime.  The\nmethod takes a String[] as a parameter.  The String[] contains information on\nall the tasks that must be performed, the length of the tasks, and which tasks\nmust be completed before other tasks.  The method returns the minimum length of\ntime, in hours, the takeover will take (all tasks are completed).\n\nArrayList elements are of the form:\n&quot;TASKNAME LENGTH D1,D2,...&quot;\nWhere:\n*TASKNAME is the name of the task containing between 1 and 20 letters and\n*LENGTH is the integer length of time the task takes, in hours between 1 and\n100 and\n*D1,D2,... is the dependency list - a list of task names seperated by commas\nthat must be performed before the task can begin. Repeat task names in the same\nlist should be ignored.\nIf the task depends on no other tasks, LENGTH is the last item in the String[]\nelement.\nThere is exactly 1 space between TASKNAME and LENGTH and between LENGTH and\nD1,D2,... If there are no dependencies, there are no characters after LENGTH.\n\nIf there are any contradictions in the String[], the method returns -1.  There\nis a contradiction if:\n*there is no way to order the tasks such that all dependencies are resolved.\n*dependency lists refers to jobs that are not defined (don't have their own\nelement) in the String[].\n*the tasks are not uniquely named - more than one element in the String[] has\nthe same TASKNAME.\n\nThe method signature is:\npublic int takeOverTime(String[] tasks);\n\ntasks is an String[] of elements defining between 1 and 20 tasks, inclusive.\nElements in the String[] are of the syntax described above(TopCoder will check\nthis).\n\nExamples:\nIf the String[] is:\n{&quot;KILLPEOPLE 50&quot;,\n &quot;BUILDHOUSES 10 LAND&quot;,\n &quot;LAND 2 KILLPEOPLE&quot;,\n &quot;CLEANUPBODIES 5 KILLPEOPLE,LAND&quot;,\n &quot;PLANTNEWLAWN 10 CLEANUPBODIES,LAND&quot;}\nFirst KILLPEOPLE must be done, then LAND, then BUILDHOUSES and CLEANUPBODIES\ncan be worked on simultaneously. When CLEANUPBODIES is done, PLANTNEWLAWN can\nstart (BUILDHOUSES will still be going on).\nAt Time=0,  KILLPEOPLE starts.\nAt Time=50, KILLPEOPLE is done and LAND starts.\nAt Time=52, LAND is done and CLEANUPBODIES and BUILDHOUSES starts.\nAt Time=57, CLEANUPBODIES is done and PLANTNEWLAWN starts.\nAt Time=62, BUILDHOUSES is done.\nAt Time=67, PLANTNEWLAWN is done.\nThe method returns the time for everything to be completed: 67.</pre>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"AlienTakeover",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"takeOverTime",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int takeOverTime(String[] param0)",
			"order":5
		}
	],
	"examples":[],
	"constraints":[]
}