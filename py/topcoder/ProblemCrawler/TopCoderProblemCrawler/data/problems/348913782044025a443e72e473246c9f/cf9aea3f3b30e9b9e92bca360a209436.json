{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=11536&rd=14542",
	"statement":"There are N blades of grass in Fox Ciel's garden numbered 0 to N-1. Since she doesn't like tall grass, she wants to make it so that the sum of heights of all grass blades is at most <b>H</b>. <br /><br /> <br /><br /> At time 0, the height of the i-th grass blade is <b>init</b>[i]. At each positive integer time t, the following activities happen (in the specified relative order): <br /><br /> <br /><br /> 1. First, for each i, 0 &amp;le i &lt; N, the i-th grass blade becomes higher by <b>grow</b>[i]. <br /><br /> 2. Then, Ciel chooses a single grass blade and cuts it. The height of this grass blade becomes zero. <br /><br /> 3. Finally, Ciel calculates the sum of heights of all grass blades. If it is at most <b>H</b>, then she considers her goal achieved. <br /><br /> <br /><br /> Return the earliest possible time she can achieve her goal. If the sum of heights of all grass blades doesn't exceed <b>H</b> at time 0, return 0. If it's impossible to achieve the goal, return -1. ",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CuttingGrass",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"theMin",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int theMin(int[] init, int[] grow, int H)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{2, 1, 1}",
			"id":0,
			"input":"{5, 8, 58}",
			"note":"At time 1: ",
			"order":1
		},
		{
			"expect":"{2, 1}",
			"id":0,
			"input":"{5, 8}",
			"note":"At time 0, the sum of heights of all grass blades is 13 and doesn't exceed .",
			"order":2
		},
		{
			"expect":"{2, 1}",
			"id":0,
			"input":"{5, 8}",
			"note":"It's impossible to achieve the goal.",
			"order":3
		},
		{
			"expect":"{2, 1, 1, 1, 4, 3, 2}",
			"id":0,
			"input":"{5, 1, 6, 5, 8, 4, 7}",
			"note":"One of the optimal strategies is to cut grass blade 2, 0, 6, 5, 4 (0-indexed) at time 1, 2, 3, 4, 5 respectively.",
			"order":4
		},
		{
			"expect":"{7, 2, 4, 3, 6, 5, 7, 6, 5, 4, 7, 7, 4}",
			"id":0,
			"input":"{49, 13, 62, 95, 69, 75, 62, 96, 97, 22, 69, 69, 52}",
			"note":"",
			"order":5
		},
		{
			"expect":"{86, 55, 2, 86, 96, 71, 81, 53, 79, 22, 23, 8, 69, 32, 35, 39, 30, 18, 92, 64, 88, 1, 48, 81, 91, 75, 44, 77, 3, 33, 9, 52, 56, 4, 19, 73, 52, 18, 8, 77, 91, 59, 50, 62, 42, 87, 89, 24, 71, 67}",
			"id":0,
			"input":"{1231, 1536, 1519, 1940, 1539, 1385, 1599, 1613, 1394, 1803, 1763, 1706, 1863, 1452, 1818, 1914, 1386, 1954, 1496, 1722, 1616, 1862, 1755, 1215, 1233, 1078, 1448, 1241, 1732, 1561, 1633, 1307, 1844, 1911, 1371, 1338, 1989, 1789, 1656, 1413, 1929, 1182, 1815, 1474, 1540, 1797, 1586, 1427, 1996, 1202}",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"init will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"init and grow will contain the same number of elements."
		},
		{
			"order":3,
			"val":"Each element of init will be between 0 and 100,000, inclusive."
		},
		{
			"order":4,
			"val":"Each element of grow will be between 1 and 100,000, inclusive."
		},
		{
			"order":5,
			"val":"H will be between 0 and 1,000,000, inclusive."
		}
	]
}