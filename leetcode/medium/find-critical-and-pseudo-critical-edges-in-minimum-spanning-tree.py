# -*- coding:utf-8 -*-

"""

created by shuangquan.huang at 2020/6/29

"""

import collections
import time
import os
import sys
import bisect
import heapq
from typing import List


class Solution:
    def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        INF = 1000000
        
        def find(us, u):
            if us[u] == u:
                return u
        
            return find(us, us[u])
    
        def union(us, u, v):
            pu, pv = find(us, u), find(us, v)
            us[pu] = pv
        
        
        def kruskal(edges, fix=-1):
            path = []
            cost = 0
            us = [i for i in range(n)]
            
            if fix >= 0:
                # mere u, v to a single point v
                w, u, v, i = edges[fix]
                cost = w
                path.append(i)
                us[u] = v
                nedges = []
                for cw, cu, cv, ci in edges:
                    if cu == u:
                        nedges.append((cw, v, cv, ci))
                    elif cv == u:
                        nedges.append((cw, cu, v, ci))
                    else:
                        nedges.append((cw, cu, cv, ci))
                edges = nedges

            for w, u, v, i in edges:
                if find(us, u) == find(us, v):
                    continue
                union(us, u, v)
                path.append(i)
                cost += w
                
            return (cost, path) if len(path) == n-1 else (INF, [])
        
        E = [(w, u, v, i) for i, (u, v, w) in enumerate(edges)]
        E.sort()
        NE = len(E)
        
        cost, path = kruskal(E)
        a, b = [], []
        for i in range(NE):
            c, p = kruskal(E[:i] + E[i+1:])
            # print(c, cost)
            if c > cost:
                a.append(E[i][3])
        
        a.sort()
        
        
        for index in range(NE):
            w, u, v, i = E[index]
            if i in a:
                continue
            
            c, p = kruskal(E, index)
            if c == cost:
                b.append(i)
        
        b.sort()
        
        return [a, b]
                
        
        
        

     
s = Solution()
print(s.findCriticalAndPseudoCriticalEdges(n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]))
print(s.findCriticalAndPseudoCriticalEdges(n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]))
print(s.findCriticalAndPseudoCriticalEdges(14, [[0,1,13],[0,2,6],[2,3,13],[3,4,4],[0,5,11],[4,6,14],[4,7,8],[2,8,6],[4,9,6],[7,10,4],[5,11,3],[6,12,7],[12,13,9],[7,13,2],[5,13,10],[0,6,4],[2,7,3],[0,7,8],[1,12,9],[10,12,11],[1,2,7],[1,3,10],[3,10,6],[6,10,4],[4,8,5],[1,13,4],[11,13,8],[2,12,10],[5,8,1],[3,7,6],[7,12,12],[1,7,9],[5,9,1],[2,13,10],[10,11,4],[3,5,10],[6,11,14],[5,12,3],[0,8,13],[8,9,1],[3,6,8],[0,3,4],[2,9,6],[0,11,4],[2,5,14],[4,11,2],[7,11,11],[1,11,6],[2,10,12],[0,13,4],[3,9,9],[4,12,3],[6,7,10],[6,8,13],[9,11,3],[1,6,2],[2,4,12],[0,10,3],[3,12,1],[3,8,12],[1,8,6],[8,13,2],[10,13,12],[9,13,11],[2,11,14],[5,10,9],[5,6,10],[2,6,9],[4,10,7],[3,13,10],[4,13,3],[3,11,9],[7,9,14],[6,9,5],[1,5,12],[4,5,3],[11,12,3],[0,4,8],[5,7,8],[9,12,13],[8,12,12],[1,10,6],[1,9,9],[7,8,9],[9,10,13],[8,11,3],[6,13,7],[0,12,10],[1,4,8],[8,10,2]]))
print(s.findCriticalAndPseudoCriticalEdges(97, [[0,1,5],[1,2,6],[0,3,3],[0,4,4],[4,5,2],[2,6,5],[0,7,9],[2,8,6],[1,9,2],[8,10,8],[3,11,9],[2,12,9],[12,13,9],[0,14,4],[3,15,9],[6,16,7],[7,17,7],[12,18,1],[10,19,3],[7,20,8],[10,21,10],[15,22,4],[5,23,2],[10,24,6],[19,25,10],[4,26,1],[19,27,6],[10,28,5],[9,29,3],[27,30,6],[17,31,9],[30,32,2],[5,33,6],[8,34,3],[17,35,5],[34,36,3],[30,37,5],[25,38,10],[28,39,3],[15,40,2],[15,41,4],[16,42,4],[7,43,4],[42,44,8],[43,45,3],[0,46,5],[45,47,8],[13,48,10],[9,49,3],[25,50,5],[12,51,7],[43,52,6],[33,53,7],[20,54,7],[15,55,1],[13,56,4],[42,57,6],[44,58,7],[3,59,1],[55,60,4],[4,61,10],[8,62,2],[32,63,10],[5,64,7],[50,65,6],[49,66,10],[15,67,4],[9,68,5],[25,69,5],[42,70,4],[31,71,10],[44,72,3],[13,73,5],[51,74,8],[44,75,10],[10,76,6],[48,77,1],[51,78,4],[10,79,6],[71,80,1],[46,81,5],[58,82,2],[82,83,7],[77,84,6],[12,85,10],[36,86,4],[4,87,9],[41,88,3],[71,89,10],[81,90,3],[60,91,1],[7,92,7],[29,93,1],[17,94,10],[70,95,10],[27,96,6],[28,53,3],[3,30,9],[28,29,7],[30,78,1],[2,79,7],[26,40,4],[38,94,9],[23,89,5],[37,64,7],[8,54,3],[46,88,2],[44,46,9],[6,78,5],[56,95,4],[57,65,4],[51,84,9],[79,94,4],[20,57,3],[34,53,9],[55,73,4],[21,43,10],[5,43,10],[42,88,5],[61,80,7],[16,61,1],[33,65,1],[53,95,9],[19,65,4],[4,84,6],[75,96,3],[47,90,5],[60,66,8],[39,64,2],[9,28,10],[39,45,7],[40,53,8],[68,87,4],[36,81,1],[28,68,1],[2,86,8],[12,14,9],[31,89,9],[42,66,4],[20,40,8],[57,81,1],[38,68,5],[30,85,7],[37,74,7],[24,90,4],[63,73,3],[61,65,4],[19,71,2],[36,41,9],[13,76,9],[24,73,8],[64,95,1],[86,95,5],[21,85,2],[23,64,1],[14,55,5],[30,73,5],[76,95,10],[7,24,10],[2,58,6],[92,93,8],[8,39,4],[13,94,5],[33,76,2],[32,82,6],[29,94,4],[1,75,2],[72,77,1],[78,90,4],[39,89,8],[12,70,4],[37,95,10],[16,92,6],[14,26,10],[47,54,9],[30,45,4],[0,72,5],[45,50,4],[79,81,7],[8,26,7],[34,66,1],[1,51,10],[27,56,6],[51,55,6],[16,48,9],[11,51,3],[25,89,10],[66,89,4],[38,70,3],[45,61,1],[18,67,5]]))