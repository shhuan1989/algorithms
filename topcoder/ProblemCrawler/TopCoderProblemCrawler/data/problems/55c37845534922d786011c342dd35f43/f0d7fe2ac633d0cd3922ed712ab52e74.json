{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=1138&rd=4466",
	"statement":"A fortress has been built to protect the queen. It consists of a collection of walls built in circular arcs around the queen's throne. Each arc is described by the directions from the throne to its two ends. Directions are specified using N,E,W,S to indicate the four compass points. NE, NW, SE, SW indicate the directions half way between. Every other direction is specified by preceding one of these four 2-letter directions with a sequence of letters, each of which matches one of the direction's final 2 letters. For example, ENE is the direction halfway between NE and E. NENE is the direction halfway between ENE and the next more northern direction which can be expressed in 3 or fewer letters (NE). SWWWSSW is halfway between WWWSSW and the next more southerly direction that can be expressed in 6 or fewer letters (WSSW). <p> No more than 10 letters are ever used to name a direction. That means that there are exactly 2048 directions. This diagram shows all of the directions in the Northeast quadrant that can be expressed in 4 or fewer letters. </p><pre>\n               N\n               |  NNNE\n               |      NNE\n               |        ENNE\n               |          NE\n               |           NENE\n               |             ENE\n               |              EENE\n    -----------+-----------------E\n               |\n               |\n               |\n               |\n               |\n\n</pre><p> Create a class NENE that contains the method vulnerable that takes the ends of the circular arcs as inputs, and returns the first direction counterclockwise from East which is not protected. Return the String &quot;SAFE&quot; if all legal directions are protected. A wall <b>does</b> protect the directions at its endpoints. </p><p> The ends are input as String[] <b>cw</b> and String[] <b>ccw</b>. Corresponding elements of <b>cw</b> and <b>ccw</b> give the directions of the clockwise and counterclockwise ends of a wall. The wall extends less than 360 degrees, going counterclockwise from its cw end to its ccw end. </p> ",
	"notes":[
		{
			"order":1,
			"val":"E is the last direction to check and return. See Example 4)"
		},
		{
			"order":2,
			"val":"the returned direction must be a legal one, so it must have no more than 10 characters"
		},
		{
			"order":3,
			"val":"every legal direction other than the compass points must end in either NE, SW, SE, or NW so, for example, EN or NEN would not be legal directions "
		},
		{
			"order":4,
			"val":"a wall protects its own endpoints."
		}
	],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"NENE",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"vulnerable",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String vulnerable(String[] cw, String[] ccw)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{\"W\"}",
			"id":0,
			"input":"{\"E\"}",
			"note":" The one wall has an end to the east, and extends from there counterclockwise until its other end is to the west. The answer is the first legal direction counterclockwise from W. ",
			"order":1
		},
		{
			"expect":"{\"W\",\"N\",\"S\"}",
			"id":0,
			"input":"{\"E\",\"E\",\"SE\"}",
			"note":"The first wall is the same as in the preceding example. The second wall protects nothing new. The third wall covers everything except the section from S to SE. The answer is the first direction counterclockwise from S. ",
			"order":2
		},
		{
			"expect":"{\"W\",\"NE\"}",
			"id":0,
			"input":"{\"E\",\"WWWWWWWWSW\"}",
			"note":"Even though there is a small gap, all the legal directions are covered.",
			"order":3
		},
		{
			"expect":"{\"NNNNENEENE\",\"WWNW\",\"EEENE\"}",
			"id":0,
			"input":"{\"EEEENE\",\"WNW\",\"SSWWSW\"}",
			"order":4
		},
		{
			"expect":"{\"WWWWWWWWNW\",\"EEEEEEEESE\"}",
			"id":0,
			"input":"{\"EEEEEEEENE\",\"W\"} ",
			"order":5
		},
		{
			"expect":"{\"S\"}",
			"id":0,
			"input":"{\"W\"}",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"cw has between 1 and 50 elements"
		},
		{
			"order":2,
			"val":"ccw has the same number of elements as cw"
		},
		{
			"order":3,
			"val":"each element of cw and ccw contains between 1 and 10 characters inclusive"
		},
		{
			"order":4,
			"val":"each element of cw and ccw is a legal direction"
		},
		{
			"order":5,
			"val":"no element of cw is equal to the corresponding element of ccw"
		}
	]
}