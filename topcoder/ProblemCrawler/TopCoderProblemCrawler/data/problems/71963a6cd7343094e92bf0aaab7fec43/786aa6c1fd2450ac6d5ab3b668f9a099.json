{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=13359&rd=16076",
	"statement":"You have two trees with the same number of nodes. The nodes in each tree are labeled 0 through n-1. <br /><br /> <br /><br /> <br /><br /> You are given four int[]s with n-1 elements each: <b>a</b>, <b>b</b>, <b>c</b>, and <b>d</b>. The int[]s <b>a</b> and <b>b</b> describe the first tree: for each valid i, the first tree contains an edge between nodes labeled <b>a</b>[i] and <b>b</b>[i]. The int[]s <b>c</b> and <b>d</b> describe the second tree in the same way. <br /><br /> <br /><br /> <br /><br /> Each of the values 0 through n-1 has an assigned integer score. These scores are given in an int[] <b>score</b>. Note that some of the scores may be negative. <br /><br /> <br /><br /> <br /><br /> Your goal is to select a subset S of the set {0, 1, ..., n-1} with the following properties: \n <ul> \n  <li>In the first tree, the nodes with the labels in S induce a connected subgraph (a subtree of the original tree).</li> \n  <li>In the second tree, the nodes with the labels in S also induce a connected subgraph.</li> \n </ul> <br /><br /> <br /><br /> <br /><br /> Return the largest possible sum of scores assigned to the elements of such a subset S.",
	"notes":[{
		"order":1,
		"val":"As there are only finitely many possible subsets S and the empty subset always has the desired properties, the return value is always correctly defined."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"DoubleTree",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maximalScore",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int[], int[], int[], int[]",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int maximalScore(int[] a, int[] b, int[] c, int[] d, int[] score)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"{1,3,2}",
			"id":0,
			"input":"{0,0,1}",
			"note":"The best subset we can choose is {0,1}. The nodes labeled 0 and 1 are connected by an edge in each of the trees. Note that we cannot choose {0,1,2} as in the second tree we cannot get from 0 to 2 without going through 3.",
			"order":1
		},
		{
			"expect":"{1,3,2}",
			"id":0,
			"input":"{0,0,1}",
			"note":"As in this case all scores are positive, the best solution is to select all labels.",
			"order":2
		},
		{
			"expect":"{1,3,2}",
			"id":0,
			"input":"{0,0,1}",
			"note":"As in this case all scores are negative, the best solution is to select no labels at all.",
			"order":3
		},
		{
			"expect":"{1,3,2}",
			"id":0,
			"input":"{0,0,1}",
			"note":"The optimal solution is to choose the subset {3} - a single node is connected.",
			"order":4
		},
		{
			"expect":"{1,2,3,4,5,6}",
			"id":0,
			"input":"{0,0,1,1,2,2}",
			"note":"In this test case the two trees are identical. The answer is the maximum score of a subtree of this tree.",
			"order":5
		},
		{
			"expect":"{1,2,3,4,5,6}",
			"id":0,
			"input":"{0,0,1,1,2,2}",
			"note":"",
			"order":6
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"n will be between 2 and 50, inclusive."
		},
		{
			"order":2,
			"val":"a and b will describe a tree with exactly n ndoes."
		},
		{
			"order":3,
			"val":"c and d will describe a tree with exactly n ndoes."
		},
		{
			"order":4,
			"val":"score will contain exactly n elements."
		},
		{
			"order":5,
			"val":"Each element in score will be between -1,000 and 1,000, inclusive."
		}
	]
}