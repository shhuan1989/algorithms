{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=6591&rd=9991",
	"statement":"<p> Each digit can be represented using a certain number of matches. Your goal is to create the largest possible number using the matches that you have. For example, if you need 6 matches for zero, 7 matches for one, and 8 matches for two, and you have 21 matches, the largest number you can create is 210 (8 + 7 + 6 = 21 matches). </p> <p> You are given a String[] <b>matches</b> and a String <b>n</b>. The <i>i</i><sup>th</sup> element (zero-indexed) of <b>matches</b> is the number of matches needed to represent the digit <i>i</i>. <b>n</b> is the number of matches you have. Return a String[] such that the first element is the number of digits of x (where x is the largest number that can be created), the second element contains the first 50 digits of x, and the third element contains the last 50 digits of x. If x has fewer than 50 digits, the second and third elements should each be all of x. No extra leading zeros should be added to any returned value. If <b>n</b> is too small to create any number, return a single zero as the number of digits and empty strings (&quot;&quot;) as the second and third elements. </p> ",
	"notes":[{
		"order":1,
		"val":"It is not necessary to use all given matches. Some matches may be left unused."
	}],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"MatchNumbersHard",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"maxNumber",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], String",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"String[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"String[] maxNumber(String[] matches, String n)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"\"21\"",
			"id":0,
			"input":"{\"6\",\"7\",\"8\"}",
			"note":"Example from the problem statement. ",
			"order":1
		},
		{
			"expect":"\"21\"",
			"id":0,
			"input":"{\"1\",\"7\",\"8\"}",
			"note":"",
			"order":2
		},
		{
			"expect":"\"923372036854775807\"",
			"id":0,
			"input":"{\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"}",
			"note":"A lot of nines. ",
			"order":3
		},
		{
			"expect":"\"923372036854775807\"",
			"id":0,
			"input":"{\"1\",\"923372036854775807\"}",
			"note":" ",
			"order":4
		},
		{
			"expect":"\"923372036854775807\"",
			"id":0,
			"input":"{\"1\",\"923372036854775806\"}",
			"note":"",
			"order":5
		},
		{
			"expect":"\"10\"",
			"id":0,
			"input":"{\"1\",\"5\",\"10\"}",
			"note":"",
			"order":6
		},
		{
			"expect":"\"923372036854775806\"",
			"id":0,
			"input":"{\"1\",\"923372036854775807\"}",
			"note":"Zero is the only digit that can be created. Note that no extra leading zeros should be added to any returned value. ",
			"order":7
		},
		{
			"expect":"\"1000000\"",
			"id":0,
			"input":"{\"1\", \"10\"}",
			"note":"There are 999990 zeros in the created number, so its last 50 digits are all zeros.",
			"order":8
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"matches will contain between 1 and 10 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of matches will be an integer between 1 and 10 ^ 18 (fits in a long), inclusive, with no leading zeros."
		},
		{
			"order":3,
			"val":"n will be an integer between 0 and 10 ^ 18 (fits in a long), inclusive, with no extra leading zeros."
		}
	]
}