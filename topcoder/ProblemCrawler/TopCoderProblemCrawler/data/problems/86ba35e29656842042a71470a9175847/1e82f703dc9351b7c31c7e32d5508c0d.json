{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7642&rd=10735",
	"statement":"<p> You are writing a function to make two pieces of network equipment from different vendors talk to each other. They send and receive data packets with the same data fields, but arranged in opposite orders. Given a data packet from one piece of equipment, reverse the order of the data fields so the second piece of equipment can read it. </p> <p> The input data will be packed into N <b>b</b>-bit words, for a total of N*<b>b</b> bits. These words will be given to you as a int[] <b>input</b>. The bit 0 of <b>input[0]</b> is bit 0 of the data packet, and bit <b>b-1</b> of <b>input[N-1]</b> is bit N*<b>b</b>-1 of the data packet. There will be <b>num_fields</b> fields, each <b>field_size</b> bits long. The first field is packed into bits 0 through <b>field_size</b>-1, the second field is packed into bits <b>field_size</b> through <b>field_size*2</b>-1, etc. </p> <p> For example, given an input packet of { 22, 37, 3 }, with 6-bit words, and four 4-bit fields, the fields would be extracted as shown below: </p> <pre>\n\n     input[2]    input[1]    input[0]\n         |           |           |\n    ----------- ----------- -----------\n    0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 0\n        ------- ------- ------- -------\n           |       |       |       |\n           D       C       B       A\n</pre> <p> Where A is the first field, B is the second field, C is the third field, and D is the forth field. These fields have the values 6, 5, 9, and 3, respectively. Reversing the order, the fields would be repacked like this: </p> <pre>\n\n     output[2]   output[1]   output[0]\n         |           |           |\n    ----------- ----------- -----------\n    0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 1\n        ------- ------- ------- -------\n           |       |       |       |\n           A       B       C       D\n</pre> <p> and the correct output is { 19, 22, 6 }. </p> <p> As shown in the example above, the upper bits of the packet may be unused. These bits will be zero in the input, and must be set to zero in the output as well. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"PacketRepack",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"output",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"int[], int, int, int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int[]",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int[] output(int[] input, int b, int num_fields, int field_size)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"6",
			"id":0,
			"input":"{ 22, 37, 3 }",
			"note":"This is the example from the problem statement.",
			"order":1
		},
		{
			"expect":"31",
			"id":0,
			"input":"{ 1, 0 }",
			"note":" ",
			"order":2
		},
		{
			"expect":"10",
			"id":0,
			"input":"{ 1, 0, 0, 0 }",
			"note":"",
			"order":3
		},
		{
			"expect":"16",
			"id":0,
			"input":"{ 15834, 2483, 19423 }",
			"note":"",
			"order":4
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"input will contain between 1 and 10 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of input will be between 0 and 2^b-1, inclusive."
		},
		{
			"order":3,
			"val":"b will be between 1 and 31, inclusive."
		},
		{
			"order":4,
			"val":"field_size will be between 1 and 31, inclusive."
		},
		{
			"order":5,
			"val":"The size of input multipled by b will be greater than or equal to num_fields*field_size."
		},
		{
			"order":6,
			"val":"Unused bits in the packet will be zeroes."
		}
	]
}