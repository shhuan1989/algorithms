{
	"link":"http://community.topcoder.com/stat?c=problem_statement&pm=7476&rd=10667",
	"statement":"<p> You recently purchased a CD player from Bob's Bargain Barn. As you don't like listening to songs from your CDs in the same order every day, you were very interested in the &quot;Random&quot; button on the CD player. According to the instruction manual, if the CD player has <b>n</b> songs, the &quot;Random&quot; feature works as follows: </p>\n <ol> \n  <li>Randomly select a permutation of the <b>n</b> songs.</li> \n  <li>Play the songs in order from that permutation.</li> \n  <li>Go to step 1.</li> \n </ol> Based on this algorithm, for 3 songs you could legally obtain &quot;ABCCAB&quot; and &quot;BCABCA&quot;, but not &quot;AABBCC&quot;. <p></p><p> You are not sure if you trust Bob's Bargain Barn, so you want to figure out if the CD player is broken or not. However, as luck would have it, your sister had started listening to the CD, so you don't know when the next permutation begins. This means that the list &quot;BBAC&quot; could be an acceptable list, if the first B was the last song in the first permutation, and the second B started the second permutation. </p> <p> You will be given a String[] <b>songlist</b> containing the list of songs that you heard. Each distinct character in <b>songlist</b> represents a single distinct song. This should be concatenated to form one String. You will also be given <b>n</b>, the number of songs on your CD. If the entire <b>songlist</b> could have been generated using the above algorithm, return the earliest 0-based index in <b>songlist</b> where a new permutation began. If there are multiple valid indices that could be the start of a permutation, return the smallest of these. If the <b>songlist</b> could not have been generated by the algorithm described above, return -1. See the examples for clarification. </p>",
	"notes":[],
	"definition":[
		{
			"definitionKey":"Class:",
			"definitionVal":"CDPlayer",
			"order":1
		},
		{
			"definitionKey":"Method:",
			"definitionVal":"isRandom",
			"order":2
		},
		{
			"definitionKey":"Parameters:",
			"definitionVal":"String[], int",
			"order":3
		},
		{
			"definitionKey":"Returns:",
			"definitionVal":"int",
			"order":4
		},
		{
			"definitionKey":"Method signature:",
			"definitionVal":"int isRandom(String[] songlist, int n)",
			"order":5
		}
	],
	"examples":[
		{
			"expect":"3",
			"id":0,
			"input":"{\"BBAC\"}",
			"note":"The example from the problem statement. The first song cannot be the start of a permutation, since \"BBA\" is not a permutation of \"ABC\". However, if the permutation starts at song 1, then \"??B\" and \"BAC\" are both valid.",
			"order":1
		},
		{
			"expect":"3",
			"id":0,
			"input":"{\"BACAB\", \"BCA\"}",
			"note":"Index 0 is illegal because the second set of songs \"ABB\" is illegal. Similarly, index 1 can't be a legal start (\"BBC\" is illegal). Index 2 works though, since \"?BA\", \"CAB\", \"BCA\" could be generated by the algorithm.",
			"order":2
		},
		{
			"expect":"3",
			"id":0,
			"input":"{\"AAACBACBACBACBACBACBACB\"}",
			"note":"Even though all of the songs starting at index 2 work, the \"?AA\" that would have preceded it could not have been generated; thus, the CD player is broken.",
			"order":3
		},
		{
			"expect":"5",
			"id":0,
			"input":"{\"ABCDEABDECBAECDEDACB\"}",
			"note":"",
			"order":4
		},
		{
			"expect":"22",
			"id":0,
			"input":"{\"ABCABCABCABCABCABCABC\", \"ABCABCABCABCABCABCABC\"}",
			"note":"",
			"order":5
		},
		{
			"expect":"1",
			"id":0,
			"input":"{\"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\", \"AAAAAAAAAAAAAAAA\"}",
			"note":"",
			"order":6
		},
		{
			"expect":"12",
			"id":0,
			"input":"{\"ADEF\"}",
			"note":"",
			"order":7
		}
	],
	"constraints":[
		{
			"order":1,
			"val":"songlist will contain between 1 and 50 elements, inclusive."
		},
		{
			"order":2,
			"val":"Each element of songlist will contain between 1 and 50 characters, inclusive."
		},
		{
			"order":3,
			"val":"Each character in songlist will be one of the first n uppercase letters ('A'-'Z')."
		},
		{
			"order":4,
			"val":"n will be between 1 and 26, inclusive."
		}
	]
}